/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthCode,
  MobileLoginStatus,
  QR,
  RequestMobileLogin,
  ResponseError,
  ResponseSuccess,
  UserProfile,
  UserProfileUpdate,
} from '../models/index';
import {
    AuthCodeFromJSON,
    AuthCodeToJSON,
    MobileLoginStatusFromJSON,
    MobileLoginStatusToJSON,
    QRFromJSON,
    QRToJSON,
    RequestMobileLoginFromJSON,
    RequestMobileLoginToJSON,
    ResponseErrorFromJSON,
    ResponseErrorToJSON,
    ResponseSuccessFromJSON,
    ResponseSuccessToJSON,
    UserProfileFromJSON,
    UserProfileToJSON,
    UserProfileUpdateFromJSON,
    UserProfileUpdateToJSON,
} from '../models/index';

export interface LoginUserRequest {
    wakeup?: boolean;
    size?: number;
    width?: number;
    height?: number;
    colorLight?: string;
    colorDark?: string;
}

export interface LoginUserImageRequest {
    wakeup?: boolean;
    size?: number;
    width?: number;
    height?: number;
    colorLight?: string;
    colorDark?: string;
}

export interface LoginUserRowDataRequest {
    wakeup?: boolean;
}

export interface LoginUserViaAuthCodeRequest {
    phoneNumber: string;
}

export interface LoginUserViaMobileRequest {
    requestMobileLogin: RequestMobileLogin;
}

export interface UpdateUserProfileRequest {
    userProfileUpdate: UserProfileUpdate;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     * The method allows you to get information about your WhatsApp profile
     * User info
     */
    async getUserProfileRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserProfile>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/profile`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserProfileFromJSON(jsonValue));
    }

    /**
     * The method allows you to get information about your WhatsApp profile
     * User info
     */
    async getUserProfile(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserProfile> {
        const response = await this.getUserProfileRaw(initOverrides);
        return await response.value();
    }

    /**
     * This method returns an image of the type base64. You can render this in a component of the type image that is compatible with the language that you use to program. Just like on WhatsApp Web you will need to read a QR code to connect to Whapi.Cloud. There are two ways that you can do the reading of the QR code. Connect through our dashboard panel or Make this experience available within your own application.
     * Login user with QR-base64
     */
    async loginUserRaw(requestParameters: LoginUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QR>> {
        const queryParameters: any = {};

        if (requestParameters['wakeup'] != null) {
            queryParameters['wakeup'] = requestParameters['wakeup'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['width'] != null) {
            queryParameters['width'] = requestParameters['width'];
        }

        if (requestParameters['height'] != null) {
            queryParameters['height'] = requestParameters['height'];
        }

        if (requestParameters['colorLight'] != null) {
            queryParameters['color_light'] = requestParameters['colorLight'];
        }

        if (requestParameters['colorDark'] != null) {
            queryParameters['color_dark'] = requestParameters['colorDark'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/login`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QRFromJSON(jsonValue));
    }

    /**
     * This method returns an image of the type base64. You can render this in a component of the type image that is compatible with the language that you use to program. Just like on WhatsApp Web you will need to read a QR code to connect to Whapi.Cloud. There are two ways that you can do the reading of the QR code. Connect through our dashboard panel or Make this experience available within your own application.
     * Login user with QR-base64
     */
    async loginUser(requestParameters: LoginUserRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QR> {
        const response = await this.loginUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method returns an image. Just like on WhatsApp Web you will need to read a QR code to connect to Whapi.Cloud. There are two ways that you can do the reading of the QR code. Connect through our dashboard panel or Make this experience available within your own application.
     * Login user with QR-image
     */
    async loginUserImageRaw(requestParameters: LoginUserImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        const queryParameters: any = {};

        if (requestParameters['wakeup'] != null) {
            queryParameters['wakeup'] = requestParameters['wakeup'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['width'] != null) {
            queryParameters['width'] = requestParameters['width'];
        }

        if (requestParameters['height'] != null) {
            queryParameters['height'] = requestParameters['height'];
        }

        if (requestParameters['colorLight'] != null) {
            queryParameters['color_light'] = requestParameters['colorLight'];
        }

        if (requestParameters['colorDark'] != null) {
            queryParameters['color_dark'] = requestParameters['colorDark'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/login/image`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * This method returns an image. Just like on WhatsApp Web you will need to read a QR code to connect to Whapi.Cloud. There are two ways that you can do the reading of the QR code. Connect through our dashboard panel or Make this experience available within your own application.
     * Login user with QR-image
     */
    async loginUserImage(requestParameters: LoginUserImageRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.loginUserImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Login user with QR-rowdata
     */
    async loginUserRowDataRaw(requestParameters: LoginUserRowDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QR>> {
        const queryParameters: any = {};

        if (requestParameters['wakeup'] != null) {
            queryParameters['wakeup'] = requestParameters['wakeup'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/login/rowdata`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QRFromJSON(jsonValue));
    }

    /**
     * Login user with QR-rowdata
     */
    async loginUserRowData(requestParameters: LoginUserRowDataRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QR> {
        const response = await this.loginUserRowDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method returns a code that allows you to connect the phone number to the API without the need to scan a QR code, simply by entering the generated code.
     * Get auth code by phone number
     */
    async loginUserViaAuthCodeRaw(requestParameters: LoginUserViaAuthCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthCode>> {
        if (requestParameters['phoneNumber'] == null) {
            throw new runtime.RequiredError(
                'phoneNumber',
                'Required parameter "phoneNumber" was null or undefined when calling loginUserViaAuthCode().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/login/{PhoneNumber}`.replace(`{${"PhoneNumber"}}`, encodeURIComponent(String(requestParameters['phoneNumber']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthCodeFromJSON(jsonValue));
    }

    /**
     * This method returns a code that allows you to connect the phone number to the API without the need to scan a QR code, simply by entering the generated code.
     * Get auth code by phone number
     */
    async loginUserViaAuthCode(requestParameters: LoginUserViaAuthCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthCode> {
        const response = await this.loginUserViaAuthCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Allows you to register a number on WhatsApp. Requires mandatory use of mobile proxies!
     * Login in whatsapp with phone number
     */
    async loginUserViaMobileRaw(requestParameters: LoginUserViaMobileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MobileLoginStatus>> {
        if (requestParameters['requestMobileLogin'] == null) {
            throw new runtime.RequiredError(
                'requestMobileLogin',
                'Required parameter "requestMobileLogin" was null or undefined when calling loginUserViaMobile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/login/mobile`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestMobileLoginToJSON(requestParameters['requestMobileLogin']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MobileLoginStatusFromJSON(jsonValue));
    }

    /**
     * Allows you to register a number on WhatsApp. Requires mandatory use of mobile proxies!
     * Login in whatsapp with phone number
     */
    async loginUserViaMobile(requestParameters: LoginUserViaMobileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MobileLoginStatus> {
        const response = await this.loginUserViaMobileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Logout user
     */
    async logoutUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseSuccess>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/logout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseSuccessFromJSON(jsonValue));
    }

    /**
     * Logout user
     */
    async logoutUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseSuccess> {
        const response = await this.logoutUserRaw(initOverrides);
        return await response.value();
    }

    /**
     * This method is responsible for changing the details of your WhatsApp profile
     * Update user info
     */
    async updateUserProfileRaw(requestParameters: UpdateUserProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseSuccess>> {
        if (requestParameters['userProfileUpdate'] == null) {
            throw new runtime.RequiredError(
                'userProfileUpdate',
                'Required parameter "userProfileUpdate" was null or undefined when calling updateUserProfile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/profile`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UserProfileUpdateToJSON(requestParameters['userProfileUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseSuccessFromJSON(jsonValue));
    }

    /**
     * This method is responsible for changing the details of your WhatsApp profile
     * Update user info
     */
    async updateUserProfile(requestParameters: UpdateUserProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseSuccess> {
        const response = await this.updateUserProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
