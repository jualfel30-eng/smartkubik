/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CheckContactRequest,
  CheckContactResponse,
  Contact,
  ContactsList,
  ResponseError,
  ResponseSuccess,
  SenderContactFromPhonebook,
  SentMessage,
  UserProfile,
} from '../models/index';
import {
    CheckContactRequestFromJSON,
    CheckContactRequestToJSON,
    CheckContactResponseFromJSON,
    CheckContactResponseToJSON,
    ContactFromJSON,
    ContactToJSON,
    ContactsListFromJSON,
    ContactsListToJSON,
    ResponseErrorFromJSON,
    ResponseErrorToJSON,
    ResponseSuccessFromJSON,
    ResponseSuccessToJSON,
    SenderContactFromPhonebookFromJSON,
    SenderContactFromPhonebookToJSON,
    SentMessageFromJSON,
    SentMessageToJSON,
    UserProfileFromJSON,
    UserProfileToJSON,
} from '../models/index';

export interface CheckExistRequest {
    contactID: string;
}

export interface CheckPhonesRequest {
    checkContactRequest: CheckContactRequest;
}

export interface GetContactRequest {
    contactID: string;
}

export interface GetContactProfileRequest {
    contactID: string;
}

export interface GetContactsRequest {
    count?: number;
    offset?: number;
}

export interface SendContactRequest {
    contactID: string;
    senderContactFromPhonebook: SenderContactFromPhonebook;
}

/**
 * 
 */
export class ContactsApi extends runtime.BaseAPI {

    /**
     * The method individually checks for a number in WhatsApp without additional information
     * Check exist
     */
    async checkExistRaw(requestParameters: CheckExistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseSuccess>> {
        if (requestParameters['contactID'] == null) {
            throw new runtime.RequiredError(
                'contactID',
                'Required parameter "contactID" was null or undefined when calling checkExist().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/contacts/{ContactID}`.replace(`{${"ContactID"}}`, encodeURIComponent(String(requestParameters['contactID']))),
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseSuccessFromJSON(jsonValue));
    }

    /**
     * The method individually checks for a number in WhatsApp without additional information
     * Check exist
     */
    async checkExist(requestParameters: CheckExistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseSuccess> {
        const response = await this.checkExistRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method returns whether or not the number has Whatsapp. Batch check provisioning is supported, and there is no batch check limit. However, an atypical mass check can draw attention to your number, so we advise [balancing the check between channels](https://support.whapi.cloud/help-desk/faq/checking-if-the-number-has-whatsapp)
     * Check phones
     */
    async checkPhonesRaw(requestParameters: CheckPhonesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckContactResponse>> {
        if (requestParameters['checkContactRequest'] == null) {
            throw new runtime.RequiredError(
                'checkContactRequest',
                'Required parameter "checkContactRequest" was null or undefined when calling checkPhones().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/contacts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CheckContactRequestToJSON(requestParameters['checkContactRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckContactResponseFromJSON(jsonValue));
    }

    /**
     * This method returns whether or not the number has Whatsapp. Batch check provisioning is supported, and there is no batch check limit. However, an atypical mass check can draw attention to your number, so we advise [balancing the check between channels](https://support.whapi.cloud/help-desk/faq/checking-if-the-number-has-whatsapp)
     * Check phones
     */
    async checkPhones(requestParameters: CheckPhonesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckContactResponse> {
        const response = await this.checkPhonesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method is responsible for returning all of you contact’s metadata
     * Get contact
     */
    async getContactRaw(requestParameters: GetContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Contact>> {
        if (requestParameters['contactID'] == null) {
            throw new runtime.RequiredError(
                'contactID',
                'Required parameter "contactID" was null or undefined when calling getContact().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/contacts/{ContactID}`.replace(`{${"ContactID"}}`, encodeURIComponent(String(requestParameters['contactID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContactFromJSON(jsonValue));
    }

    /**
     * This method is responsible for returning all of you contact’s metadata
     * Get contact
     */
    async getContact(requestParameters: GetContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Contact> {
        const response = await this.getContactRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method allows you to get profile information (description, profile image) by phone number, even if it is not in your contact list
     * Get profile
     */
    async getContactProfileRaw(requestParameters: GetContactProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserProfile>> {
        if (requestParameters['contactID'] == null) {
            throw new runtime.RequiredError(
                'contactID',
                'Required parameter "contactID" was null or undefined when calling getContactProfile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/contacts/{ContactID}/profile`.replace(`{${"ContactID"}}`, encodeURIComponent(String(requestParameters['contactID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserProfileFromJSON(jsonValue));
    }

    /**
     * This method allows you to get profile information (description, profile image) by phone number, even if it is not in your contact list
     * Get profile
     */
    async getContactProfile(requestParameters: GetContactProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserProfile> {
        const response = await this.getContactProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method is responsible for returning all of your Whatsapp contacts
     * Get contacts
     */
    async getContactsRaw(requestParameters: GetContactsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContactsList>> {
        const queryParameters: any = {};

        if (requestParameters['count'] != null) {
            queryParameters['count'] = requestParameters['count'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/contacts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContactsListFromJSON(jsonValue));
    }

    /**
     * This method is responsible for returning all of your Whatsapp contacts
     * Get contacts
     */
    async getContacts(requestParameters: GetContactsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContactsList> {
        const response = await this.getContactsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send contact
     */
    async sendContactRaw(requestParameters: SendContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SentMessage>> {
        if (requestParameters['contactID'] == null) {
            throw new runtime.RequiredError(
                'contactID',
                'Required parameter "contactID" was null or undefined when calling sendContact().'
            );
        }

        if (requestParameters['senderContactFromPhonebook'] == null) {
            throw new runtime.RequiredError(
                'senderContactFromPhonebook',
                'Required parameter "senderContactFromPhonebook" was null or undefined when calling sendContact().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/contacts/{ContactID}`.replace(`{${"ContactID"}}`, encodeURIComponent(String(requestParameters['contactID']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SenderContactFromPhonebookToJSON(requestParameters['senderContactFromPhonebook']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SentMessageFromJSON(jsonValue));
    }

    /**
     * Send contact
     */
    async sendContact(requestParameters: SendContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SentMessage> {
        const response = await this.sendContactRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
