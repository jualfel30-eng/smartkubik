/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ForwardMessage,
  MediaMessageType,
  Message,
  MessageMediaFileParametersForMediaUpload,
  MessagesList,
  Pin,
  ReactToMessage,
  ResponseError,
  ResponseSuccess,
  SendMediaMedia,
  SenderAudio,
  SenderContact,
  SenderContactList,
  SenderDocument,
  SenderGif,
  SenderImage,
  SenderInteractive,
  SenderLinkPreview,
  SenderLiveLocation,
  SenderLocation,
  SenderMedia,
  SenderPoll,
  SenderShort,
  SenderSticker,
  SenderStories,
  SenderStoriesAudio,
  SenderStoriesText,
  SenderText,
  SenderVideo,
  SenderVoice,
  SentMessage,
  Star,
} from '../models/index';
import {
    ForwardMessageFromJSON,
    ForwardMessageToJSON,
    MediaMessageTypeFromJSON,
    MediaMessageTypeToJSON,
    MessageFromJSON,
    MessageToJSON,
    MessageMediaFileParametersForMediaUploadFromJSON,
    MessageMediaFileParametersForMediaUploadToJSON,
    MessagesListFromJSON,
    MessagesListToJSON,
    PinFromJSON,
    PinToJSON,
    ReactToMessageFromJSON,
    ReactToMessageToJSON,
    ResponseErrorFromJSON,
    ResponseErrorToJSON,
    ResponseSuccessFromJSON,
    ResponseSuccessToJSON,
    SendMediaMediaFromJSON,
    SendMediaMediaToJSON,
    SenderAudioFromJSON,
    SenderAudioToJSON,
    SenderContactFromJSON,
    SenderContactToJSON,
    SenderContactListFromJSON,
    SenderContactListToJSON,
    SenderDocumentFromJSON,
    SenderDocumentToJSON,
    SenderGifFromJSON,
    SenderGifToJSON,
    SenderImageFromJSON,
    SenderImageToJSON,
    SenderInteractiveFromJSON,
    SenderInteractiveToJSON,
    SenderLinkPreviewFromJSON,
    SenderLinkPreviewToJSON,
    SenderLiveLocationFromJSON,
    SenderLiveLocationToJSON,
    SenderLocationFromJSON,
    SenderLocationToJSON,
    SenderMediaFromJSON,
    SenderMediaToJSON,
    SenderPollFromJSON,
    SenderPollToJSON,
    SenderShortFromJSON,
    SenderShortToJSON,
    SenderStickerFromJSON,
    SenderStickerToJSON,
    SenderStoriesFromJSON,
    SenderStoriesToJSON,
    SenderStoriesAudioFromJSON,
    SenderStoriesAudioToJSON,
    SenderStoriesTextFromJSON,
    SenderStoriesTextToJSON,
    SenderTextFromJSON,
    SenderTextToJSON,
    SenderVideoFromJSON,
    SenderVideoToJSON,
    SenderVoiceFromJSON,
    SenderVoiceToJSON,
    SentMessageFromJSON,
    SentMessageToJSON,
    StarFromJSON,
    StarToJSON,
} from '../models/index';

export interface DeleteMessageRequest {
    messageID: string;
}

export interface ForwardMessageRequest {
    messageID: string;
    forwardMessage: ForwardMessage;
}

export interface GetMessageRequest {
    messageID: string;
}

export interface GetMessagesRequest {
    count?: number;
    offset?: number;
    timeFrom?: number;
    timeTo?: number;
    normalTypes?: boolean;
    author?: string;
    fromMe?: boolean;
    sort?: GetMessagesSortEnum;
}

export interface GetMessagesByChatIDRequest {
    chatID: string;
    count?: number;
    offset?: number;
    timeFrom?: number;
    timeTo?: number;
    normalTypes?: boolean;
    author?: string;
    fromMe?: boolean;
    sort?: GetMessagesByChatIDSortEnum;
}

export interface MarkMessageAsReadRequest {
    messageID: string;
}

export interface PinMessageRequest {
    messageID: string;
    pin: Pin;
}

export interface ReactToMessageRequest {
    messageID: string;
    reactToMessage: ReactToMessage;
}

export interface SendMediaMessageRequest {
    mediaMessageType: MediaMessageType;
    sendParams: SenderMedia;
    body: Blob;
}

export interface SendMessageAudioRequest {
    senderAudio: SenderAudio;
}

export interface SendMessageContactRequest {
    senderContact: SenderContact;
}

export interface SendMessageContactListRequest {
    senderContactList: SenderContactList;
}

export interface SendMessageDocumentRequest {
    senderDocument: SenderDocument;
}

export interface SendMessageGifRequest {
    senderGif: SenderGif;
}

export interface SendMessageImageRequest {
    senderImage: SenderImage;
}

export interface SendMessageInteractiveRequest {
    senderInteractive: SenderInteractive;
}

export interface SendMessageLinkPreviewRequest {
    senderLinkPreview: SenderLinkPreview;
}

export interface SendMessageLiveLocationRequest {
    senderLiveLocation: SenderLiveLocation;
}

export interface SendMessageLocationRequest {
    senderLocation: SenderLocation;
}

export interface SendMessagePollRequest {
    senderPoll: SenderPoll;
}

export interface SendMessageShortRequest {
    senderShort: SenderShort;
}

export interface SendMessageStickerRequest {
    senderSticker: SenderSticker;
}

export interface SendMessageStoryRequest {
    senderStories: SenderStories;
}

export interface SendMessageStoryAudioRequest {
    senderStoriesAudio: SenderStoriesAudio;
}

export interface SendMessageStoryMediaRequest {
    media: SendMediaMedia;
    mimeType?: string;
    noEncode?: boolean;
    noCache?: boolean;
    caption?: string;
    preview?: string;
    width?: number;
    height?: number;
    contacts?: Array<string>;
    excludeContacts?: Array<string>;
    experimental?: boolean;
}

export interface SendMessageStoryTextRequest {
    senderStoriesText: SenderStoriesText;
}

export interface SendMessageTextRequest {
    senderText: SenderText;
}

export interface SendMessageVideoRequest {
    senderVideo: SenderVideo;
}

export interface SendMessageVoiceRequest {
    senderVoice: SenderVoice;
}

export interface StarMessageRequest {
    messageID: string;
    star: Star;
}

export interface UnpinMessageRequest {
    messageID: string;
}

/**
 * 
 */
export class MessagesApi extends runtime.BaseAPI {

    /**
     * Method used to delete a text sent in a chat. You will be able to delete a message that you sent as well as a message that was sent by a contact. To use this resource you will only need the messageId of the message that you want to delete.
     * ❌ Delete message
     */
    async deleteMessageRaw(requestParameters: DeleteMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseSuccess>> {
        if (requestParameters['messageID'] == null) {
            throw new runtime.RequiredError(
                'messageID',
                'Required parameter "messageID" was null or undefined when calling deleteMessage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/messages/{MessageID}`.replace(`{${"MessageID"}}`, encodeURIComponent(String(requestParameters['messageID']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseSuccessFromJSON(jsonValue));
    }

    /**
     * Method used to delete a text sent in a chat. You will be able to delete a message that you sent as well as a message that was sent by a contact. To use this resource you will only need the messageId of the message that you want to delete.
     * ❌ Delete message
     */
    async deleteMessage(requestParameters: DeleteMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseSuccess> {
        const response = await this.deleteMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Simple and straightforward, in this method, you can forward messages through the API by providing the messageId of the message you want to forward and the phone number of the chat where this messageId is located.
     * ↪ Forward message
     */
    async forwardMessageRaw(requestParameters: ForwardMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SentMessage>> {
        if (requestParameters['messageID'] == null) {
            throw new runtime.RequiredError(
                'messageID',
                'Required parameter "messageID" was null or undefined when calling forwardMessage().'
            );
        }

        if (requestParameters['forwardMessage'] == null) {
            throw new runtime.RequiredError(
                'forwardMessage',
                'Required parameter "forwardMessage" was null or undefined when calling forwardMessage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/messages/{MessageID}`.replace(`{${"MessageID"}}`, encodeURIComponent(String(requestParameters['messageID']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ForwardMessageToJSON(requestParameters['forwardMessage']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SentMessageFromJSON(jsonValue));
    }

    /**
     * Simple and straightforward, in this method, you can forward messages through the API by providing the messageId of the message you want to forward and the phone number of the chat where this messageId is located.
     * ↪ Forward message
     */
    async forwardMessage(requestParameters: ForwardMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SentMessage> {
        const response = await this.forwardMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The method returns a message from any chat by message id.
     * Get message
     */
    async getMessageRaw(requestParameters: GetMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Message>> {
        if (requestParameters['messageID'] == null) {
            throw new runtime.RequiredError(
                'messageID',
                'Required parameter "messageID" was null or undefined when calling getMessage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/messages/{MessageID}`.replace(`{${"MessageID"}}`, encodeURIComponent(String(requestParameters['messageID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageFromJSON(jsonValue));
    }

    /**
     * The method returns a message from any chat by message id.
     * Get message
     */
    async getMessage(requestParameters: GetMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Message> {
        const response = await this.getMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The method contains a list of all received and sent messages in a particular chat. Sorting by descending date of message sending.
     * Get messages
     */
    async getMessagesRaw(requestParameters: GetMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessagesList>> {
        const queryParameters: any = {};

        if (requestParameters['count'] != null) {
            queryParameters['count'] = requestParameters['count'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['timeFrom'] != null) {
            queryParameters['time_from'] = requestParameters['timeFrom'];
        }

        if (requestParameters['timeTo'] != null) {
            queryParameters['time_to'] = requestParameters['timeTo'];
        }

        if (requestParameters['normalTypes'] != null) {
            queryParameters['normal_types'] = requestParameters['normalTypes'];
        }

        if (requestParameters['author'] != null) {
            queryParameters['author'] = requestParameters['author'];
        }

        if (requestParameters['fromMe'] != null) {
            queryParameters['from_me'] = requestParameters['fromMe'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/messages/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessagesListFromJSON(jsonValue));
    }

    /**
     * The method contains a list of all received and sent messages in a particular chat. Sorting by descending date of message sending.
     * Get messages
     */
    async getMessages(requestParameters: GetMessagesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessagesList> {
        const response = await this.getMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The method contains a list of all received and sent messages in a particular chat. Sorting by descending date of message sending. You will need to specify [Chat ID](https://support.whapi.cloud/help-desk/faq/chat-id.-what-is-it-and-how-to-get-it)
     * Get messages by chat ID
     */
    async getMessagesByChatIDRaw(requestParameters: GetMessagesByChatIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessagesList>> {
        if (requestParameters['chatID'] == null) {
            throw new runtime.RequiredError(
                'chatID',
                'Required parameter "chatID" was null or undefined when calling getMessagesByChatID().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['count'] != null) {
            queryParameters['count'] = requestParameters['count'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['timeFrom'] != null) {
            queryParameters['time_from'] = requestParameters['timeFrom'];
        }

        if (requestParameters['timeTo'] != null) {
            queryParameters['time_to'] = requestParameters['timeTo'];
        }

        if (requestParameters['normalTypes'] != null) {
            queryParameters['normal_types'] = requestParameters['normalTypes'];
        }

        if (requestParameters['author'] != null) {
            queryParameters['author'] = requestParameters['author'];
        }

        if (requestParameters['fromMe'] != null) {
            queryParameters['from_me'] = requestParameters['fromMe'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/messages/list/{ChatID}`.replace(`{${"ChatID"}}`, encodeURIComponent(String(requestParameters['chatID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessagesListFromJSON(jsonValue));
    }

    /**
     * The method contains a list of all received and sent messages in a particular chat. Sorting by descending date of message sending. You will need to specify [Chat ID](https://support.whapi.cloud/help-desk/faq/chat-id.-what-is-it-and-how-to-get-it)
     * Get messages by chat ID
     */
    async getMessagesByChatID(requestParameters: GetMessagesByChatIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessagesList> {
        const response = await this.getMessagesByChatIDRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ✔✔ Mark message as read
     */
    async markMessageAsReadRaw(requestParameters: MarkMessageAsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseSuccess>> {
        if (requestParameters['messageID'] == null) {
            throw new runtime.RequiredError(
                'messageID',
                'Required parameter "messageID" was null or undefined when calling markMessageAsRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/messages/{MessageID}`.replace(`{${"MessageID"}}`, encodeURIComponent(String(requestParameters['messageID']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseSuccessFromJSON(jsonValue));
    }

    /**
     * ✔✔ Mark message as read
     */
    async markMessageAsRead(requestParameters: MarkMessageAsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseSuccess> {
        const response = await this.markMessageAsReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 📌 Pin message
     */
    async pinMessageRaw(requestParameters: PinMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseSuccess>> {
        if (requestParameters['messageID'] == null) {
            throw new runtime.RequiredError(
                'messageID',
                'Required parameter "messageID" was null or undefined when calling pinMessage().'
            );
        }

        if (requestParameters['pin'] == null) {
            throw new runtime.RequiredError(
                'pin',
                'Required parameter "pin" was null or undefined when calling pinMessage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/messages/{MessageID}/pin`.replace(`{${"MessageID"}}`, encodeURIComponent(String(requestParameters['messageID']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PinToJSON(requestParameters['pin']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseSuccessFromJSON(jsonValue));
    }

    /**
     * 📌 Pin message
     */
    async pinMessage(requestParameters: PinMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseSuccess> {
        const response = await this.pinMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * In this method you will be able to react to messages that were sent or recieved by you. You will need to specify the ID of the message you will respond to, as well as [the emoji](https://support.whapi.cloud/help-desk/sending/send-emoji)
     * 😍 React to message
     */
    async reactToMessageRaw(requestParameters: ReactToMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseSuccess>> {
        if (requestParameters['messageID'] == null) {
            throw new runtime.RequiredError(
                'messageID',
                'Required parameter "messageID" was null or undefined when calling reactToMessage().'
            );
        }

        if (requestParameters['reactToMessage'] == null) {
            throw new runtime.RequiredError(
                'reactToMessage',
                'Required parameter "reactToMessage" was null or undefined when calling reactToMessage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/messages/{MessageID}/reaction`.replace(`{${"MessageID"}}`, encodeURIComponent(String(requestParameters['messageID']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReactToMessageToJSON(requestParameters['reactToMessage']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseSuccessFromJSON(jsonValue));
    }

    /**
     * In this method you will be able to react to messages that were sent or recieved by you. You will need to specify the ID of the message you will respond to, as well as [the emoji](https://support.whapi.cloud/help-desk/sending/send-emoji)
     * 😍 React to message
     */
    async reactToMessage(requestParameters: ReactToMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseSuccess> {
        const response = await this.reactToMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Additional endpoint for easy send media-file as message. Use request body as file and inpath parameters for send parameters. Media message can be one of the following types: - 📷 image - 🎥 video - 🎬 gif - 🎵 audio - 🎤 voice - 📄 document - 🎭 sticker 
     * 📎 Send media message
     */
    async sendMediaMessageRaw(requestParameters: SendMediaMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SentMessage>> {
        if (requestParameters['mediaMessageType'] == null) {
            throw new runtime.RequiredError(
                'mediaMessageType',
                'Required parameter "mediaMessageType" was null or undefined when calling sendMediaMessage().'
            );
        }

        if (requestParameters['sendParams'] == null) {
            throw new runtime.RequiredError(
                'sendParams',
                'Required parameter "sendParams" was null or undefined when calling sendMediaMessage().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling sendMediaMessage().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['sendParams'] != null) {
            queryParameters['SendParams'] = requestParameters['sendParams'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/pdf';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/messages/media/{MediaMessageType}`.replace(`{${"MediaMessageType"}}`, encodeURIComponent(String(requestParameters['mediaMessageType']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SentMessageFromJSON(jsonValue));
    }

    /**
     * Additional endpoint for easy send media-file as message. Use request body as file and inpath parameters for send parameters. Media message can be one of the following types: - 📷 image - 🎥 video - 🎬 gif - 🎵 audio - 🎤 voice - 📄 document - 🎭 sticker 
     * 📎 Send media message
     */
    async sendMediaMessage(requestParameters: SendMediaMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SentMessage> {
        const response = await this.sendMediaMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method is responsible for sending audio messages for chats. The requirements for [sending all media types are identical](https://support.whapi.cloud/help-desk/sending/send-video-audio-image-document)
     * 🎵 Send media-audio message
     */
    async sendMessageAudioRaw(requestParameters: SendMessageAudioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SentMessage>> {
        if (requestParameters['senderAudio'] == null) {
            throw new runtime.RequiredError(
                'senderAudio',
                'Required parameter "senderAudio" was null or undefined when calling sendMessageAudio().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/messages/audio`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SenderAudioToJSON(requestParameters['senderAudio']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SentMessageFromJSON(jsonValue));
    }

    /**
     * This method is responsible for sending audio messages for chats. The requirements for [sending all media types are identical](https://support.whapi.cloud/help-desk/sending/send-video-audio-image-document)
     * 🎵 Send media-audio message
     */
    async sendMessageAudio(requestParameters: SendMessageAudioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SentMessage> {
        const response = await this.sendMessageAudioRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Simple and object, this method allows you to send a contact. You don\'t need to have it added to your contacts list, all you have to do is fill in the method attributes with the contact information and send. [A few ready examples](https://support.whapi.cloud/help-desk/sending/overview-of-other-methods-for-sending/send-contact-vcard)
     * 👤 Send contact message
     */
    async sendMessageContactRaw(requestParameters: SendMessageContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SentMessage>> {
        if (requestParameters['senderContact'] == null) {
            throw new runtime.RequiredError(
                'senderContact',
                'Required parameter "senderContact" was null or undefined when calling sendMessageContact().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/messages/contact`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SenderContactToJSON(requestParameters['senderContact']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SentMessageFromJSON(jsonValue));
    }

    /**
     * Simple and object, this method allows you to send a contact. You don\'t need to have it added to your contacts list, all you have to do is fill in the method attributes with the contact information and send. [A few ready examples](https://support.whapi.cloud/help-desk/sending/overview-of-other-methods-for-sending/send-contact-vcard)
     * 👤 Send contact message
     */
    async sendMessageContact(requestParameters: SendMessageContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SentMessage> {
        const response = await this.sendMessageContactRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Simple and straightforward, this method allows you to send multiple contacts. You don\'t need to have them in your contacts; just fill the method\'s attributes with the contact information and send. [A few ready examples](https://support.whapi.cloud/help-desk/sending/overview-of-other-methods-for-sending/send-contact-vcard)
     * 👥 Send contact list message
     */
    async sendMessageContactListRaw(requestParameters: SendMessageContactListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SentMessage>> {
        if (requestParameters['senderContactList'] == null) {
            throw new runtime.RequiredError(
                'senderContactList',
                'Required parameter "senderContactList" was null or undefined when calling sendMessageContactList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/messages/contact_list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SenderContactListToJSON(requestParameters['senderContactList']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SentMessageFromJSON(jsonValue));
    }

    /**
     * Simple and straightforward, this method allows you to send multiple contacts. You don\'t need to have them in your contacts; just fill the method\'s attributes with the contact information and send. [A few ready examples](https://support.whapi.cloud/help-desk/sending/overview-of-other-methods-for-sending/send-contact-vcard)
     * 👥 Send contact list message
     */
    async sendMessageContactList(requestParameters: SendMessageContactListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SentMessage> {
        const response = await this.sendMessageContactListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method is responsible for sending documents for chats. The requirements for [sending all media types are identical](https://support.whapi.cloud/help-desk/sending/send-video-audio-image-document)
     * 📑 Send media-document message
     */
    async sendMessageDocumentRaw(requestParameters: SendMessageDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SentMessage>> {
        if (requestParameters['senderDocument'] == null) {
            throw new runtime.RequiredError(
                'senderDocument',
                'Required parameter "senderDocument" was null or undefined when calling sendMessageDocument().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/messages/document`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SenderDocumentToJSON(requestParameters['senderDocument']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SentMessageFromJSON(jsonValue));
    }

    /**
     * This method is responsible for sending documents for chats. The requirements for [sending all media types are identical](https://support.whapi.cloud/help-desk/sending/send-video-audio-image-document)
     * 📑 Send media-document message
     */
    async sendMessageDocument(requestParameters: SendMessageDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SentMessage> {
        const response = await this.sendMessageDocumentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method responsible for sending GIFs to your chats through the API (The file to be sent must be an MP4)
     * 🎬 Send media-gif message
     */
    async sendMessageGifRaw(requestParameters: SendMessageGifRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SentMessage>> {
        if (requestParameters['senderGif'] == null) {
            throw new runtime.RequiredError(
                'senderGif',
                'Required parameter "senderGif" was null or undefined when calling sendMessageGif().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/messages/gif`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SenderGifToJSON(requestParameters['senderGif']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SentMessageFromJSON(jsonValue));
    }

    /**
     * Method responsible for sending GIFs to your chats through the API (The file to be sent must be an MP4)
     * 🎬 Send media-gif message
     */
    async sendMessageGif(requestParameters: SendMessageGifRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SentMessage> {
        const response = await this.sendMessageGifRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method is responsible for sending images for chats. The requirements for [sending all media types are identical](https://support.whapi.cloud/help-desk/sending/send-video-audio-image-document)
     * 🖼 Send media-image message
     */
    async sendMessageImageRaw(requestParameters: SendMessageImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SentMessage>> {
        if (requestParameters['senderImage'] == null) {
            throw new runtime.RequiredError(
                'senderImage',
                'Required parameter "senderImage" was null or undefined when calling sendMessageImage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/messages/image`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SenderImageToJSON(requestParameters['senderImage']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SentMessageFromJSON(jsonValue));
    }

    /**
     * This method is responsible for sending images for chats. The requirements for [sending all media types are identical](https://support.whapi.cloud/help-desk/sending/send-video-audio-image-document)
     * 🖼 Send media-image message
     */
    async sendMessageImage(requestParameters: SendMessageImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SentMessage> {
        const response = await this.sendMessageImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint is responsible for sending messages with buttons. The section is constantly updated as the functionality of buttons depends on WhatsApp updates. Attention! The functionality of sending messages with buttons is not stable! For more information, please visit the [Button Status topic](https://support.whapi.cloud/help-desk/faq/current-status-of-buttons-on-whatsapp).
     * 🎮 Send interactive message
     */
    async sendMessageInteractiveRaw(requestParameters: SendMessageInteractiveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SentMessage>> {
        if (requestParameters['senderInteractive'] == null) {
            throw new runtime.RequiredError(
                'senderInteractive',
                'Required parameter "senderInteractive" was null or undefined when calling sendMessageInteractive().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/messages/interactive`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SenderInteractiveToJSON(requestParameters['senderInteractive']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SentMessageFromJSON(jsonValue));
    }

    /**
     * This endpoint is responsible for sending messages with buttons. The section is constantly updated as the functionality of buttons depends on WhatsApp updates. Attention! The functionality of sending messages with buttons is not stable! For more information, please visit the [Button Status topic](https://support.whapi.cloud/help-desk/faq/current-status-of-buttons-on-whatsapp).
     * 🎮 Send interactive message
     */
    async sendMessageInteractive(requestParameters: SendMessageInteractiveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SentMessage> {
        const response = await this.sendMessageInteractiveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method responsible for sending links with customize preview to your contacts, it is used to share links so that the user can be redirected to a website. Your link must necessarily be in the Body parameter. It is important for you to know that [the link is only clickable](https://support.whapi.cloud/help-desk/faq/inactive-links-in-whatsapp-messages) if the recipient already has your phone number in their contacts, or if they start a conversation with you
     * 📎 Send link preview message
     */
    async sendMessageLinkPreviewRaw(requestParameters: SendMessageLinkPreviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SentMessage>> {
        if (requestParameters['senderLinkPreview'] == null) {
            throw new runtime.RequiredError(
                'senderLinkPreview',
                'Required parameter "senderLinkPreview" was null or undefined when calling sendMessageLinkPreview().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/messages/link_preview`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SenderLinkPreviewToJSON(requestParameters['senderLinkPreview']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SentMessageFromJSON(jsonValue));
    }

    /**
     * Method responsible for sending links with customize preview to your contacts, it is used to share links so that the user can be redirected to a website. Your link must necessarily be in the Body parameter. It is important for you to know that [the link is only clickable](https://support.whapi.cloud/help-desk/faq/inactive-links-in-whatsapp-messages) if the recipient already has your phone number in their contacts, or if they start a conversation with you
     * 📎 Send link preview message
     */
    async sendMessageLinkPreview(requestParameters: SendMessageLinkPreviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SentMessage> {
        const response = await this.sendMessageLinkPreviewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 🧭 Send live location message
     */
    async sendMessageLiveLocationRaw(requestParameters: SendMessageLiveLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SentMessage>> {
        if (requestParameters['senderLiveLocation'] == null) {
            throw new runtime.RequiredError(
                'senderLiveLocation',
                'Required parameter "senderLiveLocation" was null or undefined when calling sendMessageLiveLocation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/messages/live_location`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SenderLiveLocationToJSON(requestParameters['senderLiveLocation']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SentMessageFromJSON(jsonValue));
    }

    /**
     * 🧭 Send live location message
     */
    async sendMessageLiveLocation(requestParameters: SendMessageLiveLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SentMessage> {
        const response = await this.sendMessageLiveLocationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method responsible for sending a fixed location to your contacts, it is mostly used to send an address’s location
     * 📍 Send location message
     */
    async sendMessageLocationRaw(requestParameters: SendMessageLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SentMessage>> {
        if (requestParameters['senderLocation'] == null) {
            throw new runtime.RequiredError(
                'senderLocation',
                'Required parameter "senderLocation" was null or undefined when calling sendMessageLocation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/messages/location`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SenderLocationToJSON(requestParameters['senderLocation']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SentMessageFromJSON(jsonValue));
    }

    /**
     * Method responsible for sending a fixed location to your contacts, it is mostly used to send an address’s location
     * 📍 Send location message
     */
    async sendMessageLocation(requestParameters: SendMessageLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SentMessage> {
        const response = await this.sendMessageLocationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * In this method, you can send poll-type messages. Often, it\'s the polls that replace [the buttons for interactive communication](https://support.whapi.cloud/help-desk/hints/how-to-use-polls-as-buttons)
     * 📊 Send poll message
     */
    async sendMessagePollRaw(requestParameters: SendMessagePollRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SentMessage>> {
        if (requestParameters['senderPoll'] == null) {
            throw new runtime.RequiredError(
                'senderPoll',
                'Required parameter "senderPoll" was null or undefined when calling sendMessagePoll().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/messages/poll`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SenderPollToJSON(requestParameters['senderPoll']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SentMessageFromJSON(jsonValue));
    }

    /**
     * In this method, you can send poll-type messages. Often, it\'s the polls that replace [the buttons for interactive communication](https://support.whapi.cloud/help-desk/hints/how-to-use-polls-as-buttons)
     * 📊 Send poll message
     */
    async sendMessagePoll(requestParameters: SendMessagePollRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SentMessage> {
        const response = await this.sendMessagePollRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method is responsible for sending a short video in the circle for chats. The requirements for [sending all media types are identical](https://support.whapi.cloud/help-desk/sending/send-video-audio-image-document)
     * 📹 Send media-short video message (PTV)
     */
    async sendMessageShortRaw(requestParameters: SendMessageShortRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SentMessage>> {
        if (requestParameters['senderShort'] == null) {
            throw new runtime.RequiredError(
                'senderShort',
                'Required parameter "senderShort" was null or undefined when calling sendMessageShort().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/messages/short`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SenderShortToJSON(requestParameters['senderShort']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SentMessageFromJSON(jsonValue));
    }

    /**
     * This method is responsible for sending a short video in the circle for chats. The requirements for [sending all media types are identical](https://support.whapi.cloud/help-desk/sending/send-video-audio-image-document)
     * 📹 Send media-short video message (PTV)
     */
    async sendMessageShort(requestParameters: SendMessageShortRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SentMessage> {
        const response = await this.sendMessageShortRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method is responsible for sending a sticker message for chats. The requirements for [sending all media types are identical](https://support.whapi.cloud/help-desk/sending/send-video-audio-image-document)
     * 🎭 Send media-sticker message
     */
    async sendMessageStickerRaw(requestParameters: SendMessageStickerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SentMessage>> {
        if (requestParameters['senderSticker'] == null) {
            throw new runtime.RequiredError(
                'senderSticker',
                'Required parameter "senderSticker" was null or undefined when calling sendMessageSticker().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/messages/sticker`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SenderStickerToJSON(requestParameters['senderSticker']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SentMessageFromJSON(jsonValue));
    }

    /**
     * This method is responsible for sending a sticker message for chats. The requirements for [sending all media types are identical](https://support.whapi.cloud/help-desk/sending/send-video-audio-image-document)
     * 🎭 Send media-sticker message
     */
    async sendMessageSticker(requestParameters: SendMessageStickerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SentMessage> {
        const response = await this.sendMessageStickerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The method responsible for sending images or texts to your status. Remember that statuses disappear after 24 hours. The requirements for [sending all media types are identical](https://support.whapi.cloud/help-desk/sending/send-video-audio-image-document)
     * 👁️‍🗨️ Send story message
     */
    async sendMessageStoryRaw(requestParameters: SendMessageStoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SentMessage>> {
        if (requestParameters['senderStories'] == null) {
            throw new runtime.RequiredError(
                'senderStories',
                'Required parameter "senderStories" was null or undefined when calling sendMessageStory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/messages/story`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SenderStoriesToJSON(requestParameters['senderStories']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SentMessageFromJSON(jsonValue));
    }

    /**
     * The method responsible for sending images or texts to your status. Remember that statuses disappear after 24 hours. The requirements for [sending all media types are identical](https://support.whapi.cloud/help-desk/sending/send-video-audio-image-document)
     * 👁️‍🗨️ Send story message
     */
    async sendMessageStory(requestParameters: SendMessageStoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SentMessage> {
        const response = await this.sendMessageStoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The method responsible for sending audio to your status. Remember that statuses disappear after 24 hours. The requirements for [sending all media types are identical](https://support.whapi.cloud/help-desk/sending/send-video-audio-image-document)
     * 🎵️ Send story audio message
     */
    async sendMessageStoryAudioRaw(requestParameters: SendMessageStoryAudioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SentMessage>> {
        if (requestParameters['senderStoriesAudio'] == null) {
            throw new runtime.RequiredError(
                'senderStoriesAudio',
                'Required parameter "senderStoriesAudio" was null or undefined when calling sendMessageStoryAudio().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/messages/story/audio`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SenderStoriesAudioToJSON(requestParameters['senderStoriesAudio']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SentMessageFromJSON(jsonValue));
    }

    /**
     * The method responsible for sending audio to your status. Remember that statuses disappear after 24 hours. The requirements for [sending all media types are identical](https://support.whapi.cloud/help-desk/sending/send-video-audio-image-document)
     * 🎵️ Send story audio message
     */
    async sendMessageStoryAudio(requestParameters: SendMessageStoryAudioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SentMessage> {
        const response = await this.sendMessageStoryAudioRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The method responsible for sending images or video to your status. Remember that statuses disappear after 24 hours. The requirements for [sending all media types are identical](https://support.whapi.cloud/help-desk/sending/send-video-audio-image-document)
     * 🖼 Send story media message
     */
    async sendMessageStoryMediaRaw(requestParameters: SendMessageStoryMediaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SentMessage>> {
        if (requestParameters['media'] == null) {
            throw new runtime.RequiredError(
                'media',
                'Required parameter "media" was null or undefined when calling sendMessageStoryMedia().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
            { contentType: 'application/json' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['media'] != null) {
            formParams.append('media', new Blob([JSON.stringify(SendMediaMediaToJSON(requestParameters['media']))], { type: "application/json", }));
                    }

        if (requestParameters['mimeType'] != null) {
            formParams.append('mime_type', requestParameters['mimeType'] as any);
        }

        if (requestParameters['noEncode'] != null) {
            formParams.append('no_encode', requestParameters['noEncode'] as any);
        }

        if (requestParameters['noCache'] != null) {
            formParams.append('no_cache', requestParameters['noCache'] as any);
        }

        if (requestParameters['caption'] != null) {
            formParams.append('caption', requestParameters['caption'] as any);
        }

        if (requestParameters['preview'] != null) {
            formParams.append('preview', requestParameters['preview'] as any);
        }

        if (requestParameters['width'] != null) {
            formParams.append('width', requestParameters['width'] as any);
        }

        if (requestParameters['height'] != null) {
            formParams.append('height', requestParameters['height'] as any);
        }

        if (requestParameters['contacts'] != null) {
            formParams.append('contacts', requestParameters['contacts']!.join(runtime.COLLECTION_FORMATS["csv"]));
        }

        if (requestParameters['excludeContacts'] != null) {
            formParams.append('exclude_contacts', requestParameters['excludeContacts']!.join(runtime.COLLECTION_FORMATS["csv"]));
        }

        if (requestParameters['experimental'] != null) {
            formParams.append('experimental', requestParameters['experimental'] as any);
        }

        const response = await this.request({
            path: `/messages/story/media`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SentMessageFromJSON(jsonValue));
    }

    /**
     * The method responsible for sending images or video to your status. Remember that statuses disappear after 24 hours. The requirements for [sending all media types are identical](https://support.whapi.cloud/help-desk/sending/send-video-audio-image-document)
     * 🖼 Send story media message
     */
    async sendMessageStoryMedia(requestParameters: SendMessageStoryMediaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SentMessage> {
        const response = await this.sendMessageStoryMediaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The method responsible for sending texts to your status. Remember that statuses disappear after 24 hours.
     * 💬 Send story text message
     */
    async sendMessageStoryTextRaw(requestParameters: SendMessageStoryTextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SentMessage>> {
        if (requestParameters['senderStoriesText'] == null) {
            throw new runtime.RequiredError(
                'senderStoriesText',
                'Required parameter "senderStoriesText" was null or undefined when calling sendMessageStoryText().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/messages/story/text`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SenderStoriesTextToJSON(requestParameters['senderStoriesText']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SentMessageFromJSON(jsonValue));
    }

    /**
     * The method responsible for sending texts to your status. Remember that statuses disappear after 24 hours.
     * 💬 Send story text message
     */
    async sendMessageStoryText(requestParameters: SendMessageStoryTextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SentMessage> {
        const response = await this.sendMessageStoryTextRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint will let you send messages to any WhatsApp-enabled phone number or to any WhatsApp Group/Channel using your own number connected to Whapi.Cloud. Follow the instructions if you want to [format text](https://support.whapi.cloud/help-desk/faq/whatsapp-text-formatting), [send a emoji](https://support.whapi.cloud/help-desk/sending/send-emoji) or [use line breaks](https://support.whapi.cloud/help-desk/faq/how-to-send-a-paragraph-line-break).
     * 💬 Send text message
     */
    async sendMessageTextRaw(requestParameters: SendMessageTextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SentMessage>> {
        if (requestParameters['senderText'] == null) {
            throw new runtime.RequiredError(
                'senderText',
                'Required parameter "senderText" was null or undefined when calling sendMessageText().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/messages/text`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SenderTextToJSON(requestParameters['senderText']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SentMessageFromJSON(jsonValue));
    }

    /**
     * This endpoint will let you send messages to any WhatsApp-enabled phone number or to any WhatsApp Group/Channel using your own number connected to Whapi.Cloud. Follow the instructions if you want to [format text](https://support.whapi.cloud/help-desk/faq/whatsapp-text-formatting), [send a emoji](https://support.whapi.cloud/help-desk/sending/send-emoji) or [use line breaks](https://support.whapi.cloud/help-desk/faq/how-to-send-a-paragraph-line-break).
     * 💬 Send text message
     */
    async sendMessageText(requestParameters: SendMessageTextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SentMessage> {
        const response = await this.sendMessageTextRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method is responsible for sending a video message for chats. The requirements for [sending all media types are identical](https://support.whapi.cloud/help-desk/sending/send-video-audio-image-document)
     * 🎥 Send media-video message
     */
    async sendMessageVideoRaw(requestParameters: SendMessageVideoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SentMessage>> {
        if (requestParameters['senderVideo'] == null) {
            throw new runtime.RequiredError(
                'senderVideo',
                'Required parameter "senderVideo" was null or undefined when calling sendMessageVideo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/messages/video`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SenderVideoToJSON(requestParameters['senderVideo']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SentMessageFromJSON(jsonValue));
    }

    /**
     * This method is responsible for sending a video message for chats. The requirements for [sending all media types are identical](https://support.whapi.cloud/help-desk/sending/send-video-audio-image-document)
     * 🎥 Send media-video message
     */
    async sendMessageVideo(requestParameters: SendMessageVideoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SentMessage> {
        const response = await this.sendMessageVideoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method is responsible for sending a voice message for chats. The requirements for [sending all media types are identical](https://support.whapi.cloud/help-desk/sending/send-video-audio-image-document). However, there are [some nuances](https://support.whapi.cloud/help-desk/sending/overview-of-other-methods-for-sending/send-voice-message) when sending voice messages
     * 🎤 Send media-voice message
     */
    async sendMessageVoiceRaw(requestParameters: SendMessageVoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SentMessage>> {
        if (requestParameters['senderVoice'] == null) {
            throw new runtime.RequiredError(
                'senderVoice',
                'Required parameter "senderVoice" was null or undefined when calling sendMessageVoice().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/messages/voice`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SenderVoiceToJSON(requestParameters['senderVoice']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SentMessageFromJSON(jsonValue));
    }

    /**
     * This method is responsible for sending a voice message for chats. The requirements for [sending all media types are identical](https://support.whapi.cloud/help-desk/sending/send-video-audio-image-document). However, there are [some nuances](https://support.whapi.cloud/help-desk/sending/overview-of-other-methods-for-sending/send-voice-message) when sending voice messages
     * 🎤 Send media-voice message
     */
    async sendMessageVoice(requestParameters: SendMessageVoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SentMessage> {
        const response = await this.sendMessageVoiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ⭐ Star message
     */
    async starMessageRaw(requestParameters: StarMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseSuccess>> {
        if (requestParameters['messageID'] == null) {
            throw new runtime.RequiredError(
                'messageID',
                'Required parameter "messageID" was null or undefined when calling starMessage().'
            );
        }

        if (requestParameters['star'] == null) {
            throw new runtime.RequiredError(
                'star',
                'Required parameter "star" was null or undefined when calling starMessage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/messages/{MessageID}/star`.replace(`{${"MessageID"}}`, encodeURIComponent(String(requestParameters['messageID']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: StarToJSON(requestParameters['star']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseSuccessFromJSON(jsonValue));
    }

    /**
     * ⭐ Star message
     */
    async starMessage(requestParameters: StarMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseSuccess> {
        const response = await this.starMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Unpin message
     */
    async unpinMessageRaw(requestParameters: UnpinMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseSuccess>> {
        if (requestParameters['messageID'] == null) {
            throw new runtime.RequiredError(
                'messageID',
                'Required parameter "messageID" was null or undefined when calling unpinMessage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/messages/{MessageID}/pin`.replace(`{${"MessageID"}}`, encodeURIComponent(String(requestParameters['messageID']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseSuccessFromJSON(jsonValue));
    }

    /**
     * Unpin message
     */
    async unpinMessage(requestParameters: UnpinMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseSuccess> {
        const response = await this.unpinMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetMessagesSortEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type GetMessagesSortEnum = typeof GetMessagesSortEnum[keyof typeof GetMessagesSortEnum];
/**
 * @export
 */
export const GetMessagesByChatIDSortEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type GetMessagesByChatIDSortEnum = typeof GetMessagesByChatIDSortEnum[keyof typeof GetMessagesByChatIDSortEnum];
