/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateCallEventRequest,
  CreateCallEventResponse,
  RejectCallRequest,
  ResponseError,
  ResponseSuccess,
} from '../models/index';
import {
    CreateCallEventRequestFromJSON,
    CreateCallEventRequestToJSON,
    CreateCallEventResponseFromJSON,
    CreateCallEventResponseToJSON,
    RejectCallRequestFromJSON,
    RejectCallRequestToJSON,
    ResponseErrorFromJSON,
    ResponseErrorToJSON,
    ResponseSuccessFromJSON,
    ResponseSuccessToJSON,
} from '../models/index';

export interface CreateCallEventOperationRequest {
    createCallEventRequest: CreateCallEventRequest;
}

export interface RejectCallOperationRequest {
    callID: string;
    rejectCallRequest: RejectCallRequest;
}

/**
 * 
 */
export class CallsApi extends runtime.BaseAPI {

    /**
     * This method is responsible for creating a call event.
     * Create call event
     */
    async createCallEventRaw(requestParameters: CreateCallEventOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateCallEventResponse>> {
        if (requestParameters['createCallEventRequest'] == null) {
            throw new runtime.RequiredError(
                'createCallEventRequest',
                'Required parameter "createCallEventRequest" was null or undefined when calling createCallEvent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/calls`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCallEventRequestToJSON(requestParameters['createCallEventRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateCallEventResponseFromJSON(jsonValue));
    }

    /**
     * This method is responsible for creating a call event.
     * Create call event
     */
    async createCallEvent(requestParameters: CreateCallEventOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateCallEventResponse> {
        const response = await this.createCallEventRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method is responsible for reject call.
     * Reject call
     */
    async rejectCallRaw(requestParameters: RejectCallOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseSuccess>> {
        if (requestParameters['callID'] == null) {
            throw new runtime.RequiredError(
                'callID',
                'Required parameter "callID" was null or undefined when calling rejectCall().'
            );
        }

        if (requestParameters['rejectCallRequest'] == null) {
            throw new runtime.RequiredError(
                'rejectCallRequest',
                'Required parameter "rejectCallRequest" was null or undefined when calling rejectCall().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/calls/{CallID}/reject`.replace(`{${"CallID"}}`, encodeURIComponent(String(requestParameters['callID']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RejectCallRequestToJSON(requestParameters['rejectCallRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseSuccessFromJSON(jsonValue));
    }

    /**
     * This method is responsible for reject call.
     * Reject call
     */
    async rejectCall(requestParameters: RejectCallOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseSuccess> {
        const response = await this.rejectCallRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
