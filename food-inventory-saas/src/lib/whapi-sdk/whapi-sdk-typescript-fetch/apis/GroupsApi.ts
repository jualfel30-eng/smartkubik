/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApplicationRequest,
  CreateGroupRequest,
  Group,
  GroupApplicationChange,
  GroupApplicationList,
  GroupCreate,
  GroupIconParameters,
  GroupInfoByInviteCode,
  GroupInvite,
  GroupsList,
  ListParticipantsRequest,
  NewGroup,
  ResponseError,
  ResponseListParticipants,
  ResponseSuccess,
  SenderGroupInviteByCode,
  SentMessage,
  UpdateGroupInfoRequest,
  UpdateGroupSettingRequest,
} from '../models/index';
import {
    ApplicationRequestFromJSON,
    ApplicationRequestToJSON,
    CreateGroupRequestFromJSON,
    CreateGroupRequestToJSON,
    GroupFromJSON,
    GroupToJSON,
    GroupApplicationChangeFromJSON,
    GroupApplicationChangeToJSON,
    GroupApplicationListFromJSON,
    GroupApplicationListToJSON,
    GroupCreateFromJSON,
    GroupCreateToJSON,
    GroupIconParametersFromJSON,
    GroupIconParametersToJSON,
    GroupInfoByInviteCodeFromJSON,
    GroupInfoByInviteCodeToJSON,
    GroupInviteFromJSON,
    GroupInviteToJSON,
    GroupsListFromJSON,
    GroupsListToJSON,
    ListParticipantsRequestFromJSON,
    ListParticipantsRequestToJSON,
    NewGroupFromJSON,
    NewGroupToJSON,
    ResponseErrorFromJSON,
    ResponseErrorToJSON,
    ResponseListParticipantsFromJSON,
    ResponseListParticipantsToJSON,
    ResponseSuccessFromJSON,
    ResponseSuccessToJSON,
    SenderGroupInviteByCodeFromJSON,
    SenderGroupInviteByCodeToJSON,
    SentMessageFromJSON,
    SentMessageToJSON,
    UpdateGroupInfoRequestFromJSON,
    UpdateGroupInfoRequestToJSON,
    UpdateGroupSettingRequestFromJSON,
    UpdateGroupSettingRequestToJSON,
} from '../models/index';

export interface AcceptGroupInviteRequest {
    groupInvite: GroupInvite;
}

export interface AddGroupParticipantRequest {
    groupID: string;
    listParticipantsRequest: ListParticipantsRequest;
}

export interface ApproveGroupApplicationsListRequest {
    groupID: string;
    applicationRequest?: ApplicationRequest;
}

export interface CreateGroupOperationRequest {
    createGroupRequest: CreateGroupRequest;
}

export interface DeleteGroupIconRequest {
    groupID: string;
}

export interface DemoteGroupAdminRequest {
    groupID: string;
    listParticipantsRequest: ListParticipantsRequest;
}

export interface GetGroupRequest {
    groupID: string;
}

export interface GetGroupApplicationsListRequest {
    groupID: string;
    count?: number;
    offset?: number;
}

export interface GetGroupIconRequest {
    groupID: string;
}

export interface GetGroupInviteRequest {
    groupID: string;
}

export interface GetGroupMetadataByInviteCodeRequest {
    inviteCode: string;
}

export interface GetGroupsRequest {
    count?: number;
    offset?: number;
}

export interface LeaveGroupRequest {
    groupID: string;
}

export interface PromoteToGroupAdminRequest {
    groupID: string;
    listParticipantsRequest: ListParticipantsRequest;
}

export interface RejectGroupApplicationsListRequest {
    groupID: string;
    applicationRequest?: ApplicationRequest;
}

export interface RemoveGroupParticipantRequest {
    groupID: string;
    listParticipantsRequest: ListParticipantsRequest;
}

export interface RevokeGroupInviteRequest {
    groupID: string;
}

export interface SendGroupInviteRequest {
    inviteCode: string;
    senderGroupInviteByCode: SenderGroupInviteByCode;
}

export interface SetGroupIconRequest {
    groupID: string;
    body: Blob;
}

export interface UpdateGroupInfoOperationRequest {
    groupID: string;
    updateGroupInfoRequest: UpdateGroupInfoRequest;
}

export interface UpdateGroupSettingOperationRequest {
    groupID: string;
    updateGroupSettingRequest: UpdateGroupSettingRequest;
}

/**
 * 
 */
export class GroupsApi extends runtime.BaseAPI {

    /**
     * Allows you to join a group by knowing its invitation code
     * Accept group invite
     */
    async acceptGroupInviteRaw(requestParameters: AcceptGroupInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NewGroup>> {
        if (requestParameters['groupInvite'] == null) {
            throw new runtime.RequiredError(
                'groupInvite',
                'Required parameter "groupInvite" was null or undefined when calling acceptGroupInvite().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/groups`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GroupInviteToJSON(requestParameters['groupInvite']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NewGroupFromJSON(jsonValue));
    }

    /**
     * Allows you to join a group by knowing its invitation code
     * Accept group invite
     */
    async acceptGroupInvite(requestParameters: AcceptGroupInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NewGroup> {
        const response = await this.acceptGroupInviteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method is responsible for adding new members to the group. Due to WhatsApp\'s anti-spam policy, some contacts are not automatically added to the group. [Read more here](https://support.whapi.cloud/help-desk/groups/add-new-member-to-group)
     * Add group participant
     */
    async addGroupParticipantRaw(requestParameters: AddGroupParticipantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseListParticipants>> {
        if (requestParameters['groupID'] == null) {
            throw new runtime.RequiredError(
                'groupID',
                'Required parameter "groupID" was null or undefined when calling addGroupParticipant().'
            );
        }

        if (requestParameters['listParticipantsRequest'] == null) {
            throw new runtime.RequiredError(
                'listParticipantsRequest',
                'Required parameter "listParticipantsRequest" was null or undefined when calling addGroupParticipant().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/groups/{GroupID}/participants`.replace(`{${"GroupID"}}`, encodeURIComponent(String(requestParameters['groupID']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ListParticipantsRequestToJSON(requestParameters['listParticipantsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseListParticipantsFromJSON(jsonValue));
    }

    /**
     * This method is responsible for adding new members to the group. Due to WhatsApp\'s anti-spam policy, some contacts are not automatically added to the group. [Read more here](https://support.whapi.cloud/help-desk/groups/add-new-member-to-group)
     * Add group participant
     */
    async addGroupParticipant(requestParameters: AddGroupParticipantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseListParticipants> {
        const response = await this.addGroupParticipantRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method returns the list with result of operation for each user
     * Accept group applications for listed users
     */
    async approveGroupApplicationsListRaw(requestParameters: ApproveGroupApplicationsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GroupApplicationChange>>> {
        if (requestParameters['groupID'] == null) {
            throw new runtime.RequiredError(
                'groupID',
                'Required parameter "groupID" was null or undefined when calling approveGroupApplicationsList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/groups/{GroupID}/applications`.replace(`{${"GroupID"}}`, encodeURIComponent(String(requestParameters['groupID']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationRequestToJSON(requestParameters['applicationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GroupApplicationChangeFromJSON));
    }

    /**
     * This method returns the list with result of operation for each user
     * Accept group applications for listed users
     */
    async approveGroupApplicationsList(requestParameters: ApproveGroupApplicationsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GroupApplicationChange>> {
        const response = await this.approveGroupApplicationsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method is responsible for creating a group with its respective participants. Just like WhatsApp you will need to add at least one contact to be able to create a group. Due to WhatsApp\'s anti-spam policy, some contacts are not automatically added to the group. [Read more here](https://support.whapi.cloud/help-desk/groups/add-new-member-to-group)
     * Create group
     */
    async createGroupRaw(requestParameters: CreateGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupCreate>> {
        if (requestParameters['createGroupRequest'] == null) {
            throw new runtime.RequiredError(
                'createGroupRequest',
                'Required parameter "createGroupRequest" was null or undefined when calling createGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/groups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateGroupRequestToJSON(requestParameters['createGroupRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupCreateFromJSON(jsonValue));
    }

    /**
     * This method is responsible for creating a group with its respective participants. Just like WhatsApp you will need to add at least one contact to be able to create a group. Due to WhatsApp\'s anti-spam policy, some contacts are not automatically added to the group. [Read more here](https://support.whapi.cloud/help-desk/groups/add-new-member-to-group)
     * Create group
     */
    async createGroup(requestParameters: CreateGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupCreate> {
        const response = await this.createGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete group icon
     */
    async deleteGroupIconRaw(requestParameters: DeleteGroupIconRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseSuccess>> {
        if (requestParameters['groupID'] == null) {
            throw new runtime.RequiredError(
                'groupID',
                'Required parameter "groupID" was null or undefined when calling deleteGroupIcon().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/groups/{GroupID}/icon`.replace(`{${"GroupID"}}`, encodeURIComponent(String(requestParameters['groupID']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseSuccessFromJSON(jsonValue));
    }

    /**
     * Delete group icon
     */
    async deleteGroupIcon(requestParameters: DeleteGroupIconRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseSuccess> {
        const response = await this.deleteGroupIconRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method is responsible for removing one or more admins from a group
     * Demote group admin
     */
    async demoteGroupAdminRaw(requestParameters: DemoteGroupAdminRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseSuccess>> {
        if (requestParameters['groupID'] == null) {
            throw new runtime.RequiredError(
                'groupID',
                'Required parameter "groupID" was null or undefined when calling demoteGroupAdmin().'
            );
        }

        if (requestParameters['listParticipantsRequest'] == null) {
            throw new runtime.RequiredError(
                'listParticipantsRequest',
                'Required parameter "listParticipantsRequest" was null or undefined when calling demoteGroupAdmin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/groups/{GroupID}/admins`.replace(`{${"GroupID"}}`, encodeURIComponent(String(requestParameters['groupID']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: ListParticipantsRequestToJSON(requestParameters['listParticipantsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseSuccessFromJSON(jsonValue));
    }

    /**
     * This method is responsible for removing one or more admins from a group
     * Demote group admin
     */
    async demoteGroupAdmin(requestParameters: DemoteGroupAdminRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseSuccess> {
        const response = await this.demoteGroupAdminRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method returns the group metadata with all information about the group and its participants
     * Get group
     */
    async getGroupRaw(requestParameters: GetGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Group>> {
        if (requestParameters['groupID'] == null) {
            throw new runtime.RequiredError(
                'groupID',
                'Required parameter "groupID" was null or undefined when calling getGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/groups/{GroupID}`.replace(`{${"GroupID"}}`, encodeURIComponent(String(requestParameters['groupID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupFromJSON(jsonValue));
    }

    /**
     * This method returns the group metadata with all information about the group and its participants
     * Get group
     */
    async getGroup(requestParameters: GetGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Group> {
        const response = await this.getGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method returns the list of join requests to the group
     * Get list of join requests to the group
     */
    async getGroupApplicationsListRaw(requestParameters: GetGroupApplicationsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupApplicationList>> {
        if (requestParameters['groupID'] == null) {
            throw new runtime.RequiredError(
                'groupID',
                'Required parameter "groupID" was null or undefined when calling getGroupApplicationsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['count'] != null) {
            queryParameters['count'] = requestParameters['count'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/groups/{GroupID}/applications`.replace(`{${"GroupID"}}`, encodeURIComponent(String(requestParameters['groupID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupApplicationListFromJSON(jsonValue));
    }

    /**
     * This method returns the list of join requests to the group
     * Get list of join requests to the group
     */
    async getGroupApplicationsList(requestParameters: GetGroupApplicationsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupApplicationList> {
        const response = await this.getGroupApplicationsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method returns the profile image of group
     * Get group icon
     */
    async getGroupIconRaw(requestParameters: GetGroupIconRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['groupID'] == null) {
            throw new runtime.RequiredError(
                'groupID',
                'Required parameter "groupID" was null or undefined when calling getGroupIcon().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/groups/{GroupID}/icon`.replace(`{${"GroupID"}}`, encodeURIComponent(String(requestParameters['groupID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * This method returns the profile image of group
     * Get group icon
     */
    async getGroupIcon(requestParameters: GetGroupIconRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getGroupIconRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method retrieves the ID of the group invitation. [What it is and how to work with it](https://support.whapi.cloud/help-desk/groups/add-new-member-to-group#sending-an-invitation-to-a-group)
     * Get group invite
     */
    async getGroupInviteRaw(requestParameters: GetGroupInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupInvite>> {
        if (requestParameters['groupID'] == null) {
            throw new runtime.RequiredError(
                'groupID',
                'Required parameter "groupID" was null or undefined when calling getGroupInvite().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/groups/{GroupID}/invite`.replace(`{${"GroupID"}}`, encodeURIComponent(String(requestParameters['groupID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupInviteFromJSON(jsonValue));
    }

    /**
     * This method retrieves the ID of the group invitation. [What it is and how to work with it](https://support.whapi.cloud/help-desk/groups/add-new-member-to-group#sending-an-invitation-to-a-group)
     * Get group invite
     */
    async getGroupInvite(requestParameters: GetGroupInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupInvite> {
        const response = await this.getGroupInviteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get group info by invite code
     */
    async getGroupMetadataByInviteCodeRaw(requestParameters: GetGroupMetadataByInviteCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupInfoByInviteCode>> {
        if (requestParameters['inviteCode'] == null) {
            throw new runtime.RequiredError(
                'inviteCode',
                'Required parameter "inviteCode" was null or undefined when calling getGroupMetadataByInviteCode().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/groups/link/{InviteCode}`.replace(`{${"InviteCode"}}`, encodeURIComponent(String(requestParameters['inviteCode']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupInfoByInviteCodeFromJSON(jsonValue));
    }

    /**
     * Get group info by invite code
     */
    async getGroupMetadataByInviteCode(requestParameters: GetGroupMetadataByInviteCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupInfoByInviteCode> {
        const response = await this.getGroupMetadataByInviteCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get groups
     */
    async getGroupsRaw(requestParameters: GetGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupsList>> {
        const queryParameters: any = {};

        if (requestParameters['count'] != null) {
            queryParameters['count'] = requestParameters['count'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/groups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupsListFromJSON(jsonValue));
    }

    /**
     * Get groups
     */
    async getGroups(requestParameters: GetGroupsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupsList> {
        const response = await this.getGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method allows you to leave a group that you are a member of
     * Leave group
     */
    async leaveGroupRaw(requestParameters: LeaveGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseSuccess>> {
        if (requestParameters['groupID'] == null) {
            throw new runtime.RequiredError(
                'groupID',
                'Required parameter "groupID" was null or undefined when calling leaveGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/groups/{GroupID}`.replace(`{${"GroupID"}}`, encodeURIComponent(String(requestParameters['groupID']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseSuccessFromJSON(jsonValue));
    }

    /**
     * This method allows you to leave a group that you are a member of
     * Leave group
     */
    async leaveGroup(requestParameters: LeaveGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseSuccess> {
        const response = await this.leaveGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method is responsible for promoting group members to admins, you can promote one or more members to admins
     * Promote to group admin
     */
    async promoteToGroupAdminRaw(requestParameters: PromoteToGroupAdminRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseSuccess>> {
        if (requestParameters['groupID'] == null) {
            throw new runtime.RequiredError(
                'groupID',
                'Required parameter "groupID" was null or undefined when calling promoteToGroupAdmin().'
            );
        }

        if (requestParameters['listParticipantsRequest'] == null) {
            throw new runtime.RequiredError(
                'listParticipantsRequest',
                'Required parameter "listParticipantsRequest" was null or undefined when calling promoteToGroupAdmin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/groups/{GroupID}/admins`.replace(`{${"GroupID"}}`, encodeURIComponent(String(requestParameters['groupID']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ListParticipantsRequestToJSON(requestParameters['listParticipantsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseSuccessFromJSON(jsonValue));
    }

    /**
     * This method is responsible for promoting group members to admins, you can promote one or more members to admins
     * Promote to group admin
     */
    async promoteToGroupAdmin(requestParameters: PromoteToGroupAdminRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseSuccess> {
        const response = await this.promoteToGroupAdminRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method returns the list with result of operation for each user
     * Reject group applications for listed users
     */
    async rejectGroupApplicationsListRaw(requestParameters: RejectGroupApplicationsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GroupApplicationChange>>> {
        if (requestParameters['groupID'] == null) {
            throw new runtime.RequiredError(
                'groupID',
                'Required parameter "groupID" was null or undefined when calling rejectGroupApplicationsList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/groups/{GroupID}/applications`.replace(`{${"GroupID"}}`, encodeURIComponent(String(requestParameters['groupID']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationRequestToJSON(requestParameters['applicationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GroupApplicationChangeFromJSON));
    }

    /**
     * This method returns the list with result of operation for each user
     * Reject group applications for listed users
     */
    async rejectGroupApplicationsList(requestParameters: RejectGroupApplicationsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GroupApplicationChange>> {
        const response = await this.rejectGroupApplicationsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method is responsible for removing members of the group
     * Remove group participant
     */
    async removeGroupParticipantRaw(requestParameters: RemoveGroupParticipantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseSuccess>> {
        if (requestParameters['groupID'] == null) {
            throw new runtime.RequiredError(
                'groupID',
                'Required parameter "groupID" was null or undefined when calling removeGroupParticipant().'
            );
        }

        if (requestParameters['listParticipantsRequest'] == null) {
            throw new runtime.RequiredError(
                'listParticipantsRequest',
                'Required parameter "listParticipantsRequest" was null or undefined when calling removeGroupParticipant().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/groups/{GroupID}/participants`.replace(`{${"GroupID"}}`, encodeURIComponent(String(requestParameters['groupID']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: ListParticipantsRequestToJSON(requestParameters['listParticipantsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseSuccessFromJSON(jsonValue));
    }

    /**
     * This method is responsible for removing members of the group
     * Remove group participant
     */
    async removeGroupParticipant(requestParameters: RemoveGroupParticipantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseSuccess> {
        const response = await this.removeGroupParticipantRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Revoke group invite
     */
    async revokeGroupInviteRaw(requestParameters: RevokeGroupInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseSuccess>> {
        if (requestParameters['groupID'] == null) {
            throw new runtime.RequiredError(
                'groupID',
                'Required parameter "groupID" was null or undefined when calling revokeGroupInvite().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/groups/{GroupID}/invite`.replace(`{${"GroupID"}}`, encodeURIComponent(String(requestParameters['groupID']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseSuccessFromJSON(jsonValue));
    }

    /**
     * Revoke group invite
     */
    async revokeGroupInvite(requestParameters: RevokeGroupInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseSuccess> {
        const response = await this.revokeGroupInviteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send group invite link
     */
    async sendGroupInviteRaw(requestParameters: SendGroupInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SentMessage>> {
        if (requestParameters['inviteCode'] == null) {
            throw new runtime.RequiredError(
                'inviteCode',
                'Required parameter "inviteCode" was null or undefined when calling sendGroupInvite().'
            );
        }

        if (requestParameters['senderGroupInviteByCode'] == null) {
            throw new runtime.RequiredError(
                'senderGroupInviteByCode',
                'Required parameter "senderGroupInviteByCode" was null or undefined when calling sendGroupInvite().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/groups/link/{InviteCode}`.replace(`{${"InviteCode"}}`, encodeURIComponent(String(requestParameters['inviteCode']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SenderGroupInviteByCodeToJSON(requestParameters['senderGroupInviteByCode']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SentMessageFromJSON(jsonValue));
    }

    /**
     * Send group invite link
     */
    async sendGroupInvite(requestParameters: SendGroupInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SentMessage> {
        const response = await this.sendGroupInviteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method is reponsibible for changing a group image that already exists
     * Set group icon
     */
    async setGroupIconRaw(requestParameters: SetGroupIconRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseSuccess>> {
        if (requestParameters['groupID'] == null) {
            throw new runtime.RequiredError(
                'groupID',
                'Required parameter "groupID" was null or undefined when calling setGroupIcon().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling setGroupIcon().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'image/jpeg';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/groups/{GroupID}/icon`.replace(`{${"GroupID"}}`, encodeURIComponent(String(requestParameters['groupID']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseSuccessFromJSON(jsonValue));
    }

    /**
     * This method is reponsibible for changing a group image that already exists
     * Set group icon
     */
    async setGroupIcon(requestParameters: SetGroupIconRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseSuccess> {
        const response = await this.setGroupIconRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method is responsible for changing the name and description of a group that already exists
     * Update group info
     */
    async updateGroupInfoRaw(requestParameters: UpdateGroupInfoOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseSuccess>> {
        if (requestParameters['groupID'] == null) {
            throw new runtime.RequiredError(
                'groupID',
                'Required parameter "groupID" was null or undefined when calling updateGroupInfo().'
            );
        }

        if (requestParameters['updateGroupInfoRequest'] == null) {
            throw new runtime.RequiredError(
                'updateGroupInfoRequest',
                'Required parameter "updateGroupInfoRequest" was null or undefined when calling updateGroupInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/groups/{GroupID}`.replace(`{${"GroupID"}}`, encodeURIComponent(String(requestParameters['groupID']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateGroupInfoRequestToJSON(requestParameters['updateGroupInfoRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseSuccessFromJSON(jsonValue));
    }

    /**
     * This method is responsible for changing the name and description of a group that already exists
     * Update group info
     */
    async updateGroupInfo(requestParameters: UpdateGroupInfoOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseSuccess> {
        const response = await this.updateGroupInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method is responsible for changing the privacy settings for group
     * Update group setting
     */
    async updateGroupSettingRaw(requestParameters: UpdateGroupSettingOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseSuccess>> {
        if (requestParameters['groupID'] == null) {
            throw new runtime.RequiredError(
                'groupID',
                'Required parameter "groupID" was null or undefined when calling updateGroupSetting().'
            );
        }

        if (requestParameters['updateGroupSettingRequest'] == null) {
            throw new runtime.RequiredError(
                'updateGroupSettingRequest',
                'Required parameter "updateGroupSettingRequest" was null or undefined when calling updateGroupSetting().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/groups/{GroupID}`.replace(`{${"GroupID"}}`, encodeURIComponent(String(requestParameters['groupID']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateGroupSettingRequestToJSON(requestParameters['updateGroupSettingRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseSuccessFromJSON(jsonValue));
    }

    /**
     * This method is responsible for changing the privacy settings for group
     * Update group setting
     */
    async updateGroupSetting(requestParameters: UpdateGroupSettingOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseSuccess> {
        const response = await this.updateGroupSettingRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
