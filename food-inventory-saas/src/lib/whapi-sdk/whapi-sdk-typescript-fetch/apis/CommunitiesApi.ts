/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChangeCommunitySettingsRequest,
  CommunitySubGroups,
  CreateCommunityRequest,
  CreateGroupInCommunityRequest,
  Group,
  GroupsList,
  ListParticipantsRequest,
  ResponseError,
  ResponseListParticipants,
  ResponseSuccess,
} from '../models/index';
import {
    ChangeCommunitySettingsRequestFromJSON,
    ChangeCommunitySettingsRequestToJSON,
    CommunitySubGroupsFromJSON,
    CommunitySubGroupsToJSON,
    CreateCommunityRequestFromJSON,
    CreateCommunityRequestToJSON,
    CreateGroupInCommunityRequestFromJSON,
    CreateGroupInCommunityRequestToJSON,
    GroupFromJSON,
    GroupToJSON,
    GroupsListFromJSON,
    GroupsListToJSON,
    ListParticipantsRequestFromJSON,
    ListParticipantsRequestToJSON,
    ResponseErrorFromJSON,
    ResponseErrorToJSON,
    ResponseListParticipantsFromJSON,
    ResponseListParticipantsToJSON,
    ResponseSuccessFromJSON,
    ResponseSuccessToJSON,
} from '../models/index';

export interface AddCommunityParticipantRequest {
    communityID: string;
    listParticipantsRequest: ListParticipantsRequest;
}

export interface ChangeCommunitySettingsOperationRequest {
    communityID: string;
    changeCommunitySettingsRequest: ChangeCommunitySettingsRequest;
}

export interface CreateCommunityOperationRequest {
    createCommunityRequest: CreateCommunityRequest;
}

export interface CreateGroupInCommunityOperationRequest {
    communityID: string;
    createGroupInCommunityRequest: CreateGroupInCommunityRequest;
}

export interface DeactivateCommunityRequest {
    communityID: string;
}

export interface DemoteCommunityParticipantRequest {
    communityID: string;
    listParticipantsRequest: ListParticipantsRequest;
}

export interface GetCommunitiesRequest {
    count?: number;
    offset?: number;
}

export interface GetCommunityRequest {
    communityID: string;
}

export interface GetCommunitySubGroupsRequest {
    communityID: string;
}

export interface JoinInCommunityGroupRequest {
    communityID: string;
    groupID: string;
}

export interface LinkGroupToCommunityRequest {
    communityID: string;
    groupID: string;
}

export interface PromoteCommunityParticipantRequest {
    communityID: string;
    listParticipantsRequest: ListParticipantsRequest;
}

export interface RemoveCommunityParticipantRequest {
    communityID: string;
    listParticipantsRequest: ListParticipantsRequest;
}

export interface RevokeCommunityInviteRequest {
    communityID: string;
}

export interface UnlinkGroupFromCommunityRequest {
    communityID: string;
    groupID: string;
}

/**
 * 
 */
export class CommunitiesApi extends runtime.BaseAPI {

    /**
     * This method is responsible for add participants community.
     * Add participants to community
     */
    async addCommunityParticipantRaw(requestParameters: AddCommunityParticipantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseListParticipants>> {
        if (requestParameters['communityID'] == null) {
            throw new runtime.RequiredError(
                'communityID',
                'Required parameter "communityID" was null or undefined when calling addCommunityParticipant().'
            );
        }

        if (requestParameters['listParticipantsRequest'] == null) {
            throw new runtime.RequiredError(
                'listParticipantsRequest',
                'Required parameter "listParticipantsRequest" was null or undefined when calling addCommunityParticipant().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/communities/{CommunityID}/participants`.replace(`{${"CommunityID"}}`, encodeURIComponent(String(requestParameters['communityID']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ListParticipantsRequestToJSON(requestParameters['listParticipantsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseListParticipantsFromJSON(jsonValue));
    }

    /**
     * This method is responsible for add participants community.
     * Add participants to community
     */
    async addCommunityParticipant(requestParameters: AddCommunityParticipantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseListParticipants> {
        const response = await this.addCommunityParticipantRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method is responsible for change a community settings.
     * Change community settings
     */
    async changeCommunitySettingsRaw(requestParameters: ChangeCommunitySettingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseSuccess>> {
        if (requestParameters['communityID'] == null) {
            throw new runtime.RequiredError(
                'communityID',
                'Required parameter "communityID" was null or undefined when calling changeCommunitySettings().'
            );
        }

        if (requestParameters['changeCommunitySettingsRequest'] == null) {
            throw new runtime.RequiredError(
                'changeCommunitySettingsRequest',
                'Required parameter "changeCommunitySettingsRequest" was null or undefined when calling changeCommunitySettings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/communities/{CommunityID}/settings`.replace(`{${"CommunityID"}}`, encodeURIComponent(String(requestParameters['communityID']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeCommunitySettingsRequestToJSON(requestParameters['changeCommunitySettingsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseSuccessFromJSON(jsonValue));
    }

    /**
     * This method is responsible for change a community settings.
     * Change community settings
     */
    async changeCommunitySettings(requestParameters: ChangeCommunitySettingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseSuccess> {
        const response = await this.changeCommunitySettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method is responsible for creating a community. [Learn more about the nuances of community:](https://support.whapi.cloud/help-desk/communities/introduction)
     * Create community
     */
    async createCommunityRaw(requestParameters: CreateCommunityOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Group>> {
        if (requestParameters['createCommunityRequest'] == null) {
            throw new runtime.RequiredError(
                'createCommunityRequest',
                'Required parameter "createCommunityRequest" was null or undefined when calling createCommunity().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/communities`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCommunityRequestToJSON(requestParameters['createCommunityRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupFromJSON(jsonValue));
    }

    /**
     * This method is responsible for creating a community. [Learn more about the nuances of community:](https://support.whapi.cloud/help-desk/communities/introduction)
     * Create community
     */
    async createCommunity(requestParameters: CreateCommunityOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Group> {
        const response = await this.createCommunityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method is responsible for creating a group in community. [Learn more about the nuances of community:](https://support.whapi.cloud/help-desk/communities/introduction)
     * Create group in community
     */
    async createGroupInCommunityRaw(requestParameters: CreateGroupInCommunityOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Group>> {
        if (requestParameters['communityID'] == null) {
            throw new runtime.RequiredError(
                'communityID',
                'Required parameter "communityID" was null or undefined when calling createGroupInCommunity().'
            );
        }

        if (requestParameters['createGroupInCommunityRequest'] == null) {
            throw new runtime.RequiredError(
                'createGroupInCommunityRequest',
                'Required parameter "createGroupInCommunityRequest" was null or undefined when calling createGroupInCommunity().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/communities/{CommunityID}/createGroup`.replace(`{${"CommunityID"}}`, encodeURIComponent(String(requestParameters['communityID']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateGroupInCommunityRequestToJSON(requestParameters['createGroupInCommunityRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupFromJSON(jsonValue));
    }

    /**
     * This method is responsible for creating a group in community. [Learn more about the nuances of community:](https://support.whapi.cloud/help-desk/communities/introduction)
     * Create group in community
     */
    async createGroupInCommunity(requestParameters: CreateGroupInCommunityOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Group> {
        const response = await this.createGroupInCommunityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method is responsible for deactivate community.
     * Deactivate community
     */
    async deactivateCommunityRaw(requestParameters: DeactivateCommunityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseSuccess>> {
        if (requestParameters['communityID'] == null) {
            throw new runtime.RequiredError(
                'communityID',
                'Required parameter "communityID" was null or undefined when calling deactivateCommunity().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/communities/{CommunityID}`.replace(`{${"CommunityID"}}`, encodeURIComponent(String(requestParameters['communityID']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseSuccessFromJSON(jsonValue));
    }

    /**
     * This method is responsible for deactivate community.
     * Deactivate community
     */
    async deactivateCommunity(requestParameters: DeactivateCommunityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseSuccess> {
        const response = await this.deactivateCommunityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method is responsible for demote participants to admin in community.
     * Demote participants to admin in community
     */
    async demoteCommunityParticipantRaw(requestParameters: DemoteCommunityParticipantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseListParticipants>> {
        if (requestParameters['communityID'] == null) {
            throw new runtime.RequiredError(
                'communityID',
                'Required parameter "communityID" was null or undefined when calling demoteCommunityParticipant().'
            );
        }

        if (requestParameters['listParticipantsRequest'] == null) {
            throw new runtime.RequiredError(
                'listParticipantsRequest',
                'Required parameter "listParticipantsRequest" was null or undefined when calling demoteCommunityParticipant().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/communities/{CommunityID}/admins`.replace(`{${"CommunityID"}}`, encodeURIComponent(String(requestParameters['communityID']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: ListParticipantsRequestToJSON(requestParameters['listParticipantsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseListParticipantsFromJSON(jsonValue));
    }

    /**
     * This method is responsible for demote participants to admin in community.
     * Demote participants to admin in community
     */
    async demoteCommunityParticipant(requestParameters: DemoteCommunityParticipantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseListParticipants> {
        const response = await this.demoteCommunityParticipantRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method is responsible for get a communities. [Learn more about the nuances of community:](https://support.whapi.cloud/help-desk/communities/introduction)
     * Get communities
     */
    async getCommunitiesRaw(requestParameters: GetCommunitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupsList>> {
        const queryParameters: any = {};

        if (requestParameters['count'] != null) {
            queryParameters['count'] = requestParameters['count'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/communities`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupsListFromJSON(jsonValue));
    }

    /**
     * This method is responsible for get a communities. [Learn more about the nuances of community:](https://support.whapi.cloud/help-desk/communities/introduction)
     * Get communities
     */
    async getCommunities(requestParameters: GetCommunitiesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupsList> {
        const response = await this.getCommunitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method is responsible for get a community. [Learn more about the nuances of community:](https://support.whapi.cloud/help-desk/communities/introduction)
     * Get community
     */
    async getCommunityRaw(requestParameters: GetCommunityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Group>> {
        if (requestParameters['communityID'] == null) {
            throw new runtime.RequiredError(
                'communityID',
                'Required parameter "communityID" was null or undefined when calling getCommunity().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/communities/{CommunityID}`.replace(`{${"CommunityID"}}`, encodeURIComponent(String(requestParameters['communityID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupFromJSON(jsonValue));
    }

    /**
     * This method is responsible for get a community. [Learn more about the nuances of community:](https://support.whapi.cloud/help-desk/communities/introduction)
     * Get community
     */
    async getCommunity(requestParameters: GetCommunityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Group> {
        const response = await this.getCommunityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method is responsible for get a community subgroups. [Learn more about the nuances of community:](https://support.whapi.cloud/help-desk/communities/introduction)
     * Get community subgroups
     */
    async getCommunitySubGroupsRaw(requestParameters: GetCommunitySubGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommunitySubGroups>> {
        if (requestParameters['communityID'] == null) {
            throw new runtime.RequiredError(
                'communityID',
                'Required parameter "communityID" was null or undefined when calling getCommunitySubGroups().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/communities/{CommunityID}/subGroups`.replace(`{${"CommunityID"}}`, encodeURIComponent(String(requestParameters['communityID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommunitySubGroupsFromJSON(jsonValue));
    }

    /**
     * This method is responsible for get a community subgroups. [Learn more about the nuances of community:](https://support.whapi.cloud/help-desk/communities/introduction)
     * Get community subgroups
     */
    async getCommunitySubGroups(requestParameters: GetCommunitySubGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommunitySubGroups> {
        const response = await this.getCommunitySubGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method is responsible for join in community group. [Learn more about the nuances of community:](https://support.whapi.cloud/help-desk/communities/introduction)
     * Join in community group
     */
    async joinInCommunityGroupRaw(requestParameters: JoinInCommunityGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseSuccess>> {
        if (requestParameters['communityID'] == null) {
            throw new runtime.RequiredError(
                'communityID',
                'Required parameter "communityID" was null or undefined when calling joinInCommunityGroup().'
            );
        }

        if (requestParameters['groupID'] == null) {
            throw new runtime.RequiredError(
                'groupID',
                'Required parameter "groupID" was null or undefined when calling joinInCommunityGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/communities/{CommunityID}/{GroupID}/join`.replace(`{${"CommunityID"}}`, encodeURIComponent(String(requestParameters['communityID']))).replace(`{${"GroupID"}}`, encodeURIComponent(String(requestParameters['groupID']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseSuccessFromJSON(jsonValue));
    }

    /**
     * This method is responsible for join in community group. [Learn more about the nuances of community:](https://support.whapi.cloud/help-desk/communities/introduction)
     * Join in community group
     */
    async joinInCommunityGroup(requestParameters: JoinInCommunityGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseSuccess> {
        const response = await this.joinInCommunityGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method is responsible for link group to community.
     * Link group to community
     */
    async linkGroupToCommunityRaw(requestParameters: LinkGroupToCommunityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseSuccess>> {
        if (requestParameters['communityID'] == null) {
            throw new runtime.RequiredError(
                'communityID',
                'Required parameter "communityID" was null or undefined when calling linkGroupToCommunity().'
            );
        }

        if (requestParameters['groupID'] == null) {
            throw new runtime.RequiredError(
                'groupID',
                'Required parameter "groupID" was null or undefined when calling linkGroupToCommunity().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/communities/{CommunityID}/{GroupID}`.replace(`{${"CommunityID"}}`, encodeURIComponent(String(requestParameters['communityID']))).replace(`{${"GroupID"}}`, encodeURIComponent(String(requestParameters['groupID']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseSuccessFromJSON(jsonValue));
    }

    /**
     * This method is responsible for link group to community.
     * Link group to community
     */
    async linkGroupToCommunity(requestParameters: LinkGroupToCommunityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseSuccess> {
        const response = await this.linkGroupToCommunityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method is responsible for promote participants to admin in community.
     * Promote participants to admin in community
     */
    async promoteCommunityParticipantRaw(requestParameters: PromoteCommunityParticipantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseListParticipants>> {
        if (requestParameters['communityID'] == null) {
            throw new runtime.RequiredError(
                'communityID',
                'Required parameter "communityID" was null or undefined when calling promoteCommunityParticipant().'
            );
        }

        if (requestParameters['listParticipantsRequest'] == null) {
            throw new runtime.RequiredError(
                'listParticipantsRequest',
                'Required parameter "listParticipantsRequest" was null or undefined when calling promoteCommunityParticipant().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/communities/{CommunityID}/admins`.replace(`{${"CommunityID"}}`, encodeURIComponent(String(requestParameters['communityID']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ListParticipantsRequestToJSON(requestParameters['listParticipantsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseListParticipantsFromJSON(jsonValue));
    }

    /**
     * This method is responsible for promote participants to admin in community.
     * Promote participants to admin in community
     */
    async promoteCommunityParticipant(requestParameters: PromoteCommunityParticipantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseListParticipants> {
        const response = await this.promoteCommunityParticipantRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method is responsible for remove paricipants from community.
     * Remove participants from community
     */
    async removeCommunityParticipantRaw(requestParameters: RemoveCommunityParticipantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseListParticipants>> {
        if (requestParameters['communityID'] == null) {
            throw new runtime.RequiredError(
                'communityID',
                'Required parameter "communityID" was null or undefined when calling removeCommunityParticipant().'
            );
        }

        if (requestParameters['listParticipantsRequest'] == null) {
            throw new runtime.RequiredError(
                'listParticipantsRequest',
                'Required parameter "listParticipantsRequest" was null or undefined when calling removeCommunityParticipant().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/communities/{CommunityID}/participants`.replace(`{${"CommunityID"}}`, encodeURIComponent(String(requestParameters['communityID']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: ListParticipantsRequestToJSON(requestParameters['listParticipantsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseListParticipantsFromJSON(jsonValue));
    }

    /**
     * This method is responsible for remove paricipants from community.
     * Remove participants from community
     */
    async removeCommunityParticipant(requestParameters: RemoveCommunityParticipantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseListParticipants> {
        const response = await this.removeCommunityParticipantRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Revoke community invite code
     */
    async revokeCommunityInviteRaw(requestParameters: RevokeCommunityInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseSuccess>> {
        if (requestParameters['communityID'] == null) {
            throw new runtime.RequiredError(
                'communityID',
                'Required parameter "communityID" was null or undefined when calling revokeCommunityInvite().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/communities/{CommunityID}/revokeInviteUrl`.replace(`{${"CommunityID"}}`, encodeURIComponent(String(requestParameters['communityID']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseSuccessFromJSON(jsonValue));
    }

    /**
     * Revoke community invite code
     */
    async revokeCommunityInvite(requestParameters: RevokeCommunityInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseSuccess> {
        const response = await this.revokeCommunityInviteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method is responsible for unlink group from community.
     * Unlink group from community
     */
    async unlinkGroupFromCommunityRaw(requestParameters: UnlinkGroupFromCommunityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseSuccess>> {
        if (requestParameters['communityID'] == null) {
            throw new runtime.RequiredError(
                'communityID',
                'Required parameter "communityID" was null or undefined when calling unlinkGroupFromCommunity().'
            );
        }

        if (requestParameters['groupID'] == null) {
            throw new runtime.RequiredError(
                'groupID',
                'Required parameter "groupID" was null or undefined when calling unlinkGroupFromCommunity().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/communities/{CommunityID}/{GroupID}`.replace(`{${"CommunityID"}}`, encodeURIComponent(String(requestParameters['communityID']))).replace(`{${"GroupID"}}`, encodeURIComponent(String(requestParameters['groupID']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseSuccessFromJSON(jsonValue));
    }

    /**
     * This method is responsible for unlink group from community.
     * Unlink group from community
     */
    async unlinkGroupFromCommunity(requestParameters: UnlinkGroupFromCommunityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseSuccess> {
        const response = await this.unlinkGroupFromCommunityRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
