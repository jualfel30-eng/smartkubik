/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateNewsletterAdminInviteRequest,
  CreateNewsletterRequest,
  EditNewsletterRequest,
  MessagesList,
  Newsletter,
  NewslettersList,
  NewslettersListPaged,
  ResponseError,
  ResponseSuccess,
  SenderNewsletterInviteByCode,
  SentMessage,
} from '../models/index';
import {
    CreateNewsletterAdminInviteRequestFromJSON,
    CreateNewsletterAdminInviteRequestToJSON,
    CreateNewsletterRequestFromJSON,
    CreateNewsletterRequestToJSON,
    EditNewsletterRequestFromJSON,
    EditNewsletterRequestToJSON,
    MessagesListFromJSON,
    MessagesListToJSON,
    NewsletterFromJSON,
    NewsletterToJSON,
    NewslettersListFromJSON,
    NewslettersListToJSON,
    NewslettersListPagedFromJSON,
    NewslettersListPagedToJSON,
    ResponseErrorFromJSON,
    ResponseErrorToJSON,
    ResponseSuccessFromJSON,
    ResponseSuccessToJSON,
    SenderNewsletterInviteByCodeFromJSON,
    SenderNewsletterInviteByCodeToJSON,
    SentMessageFromJSON,
    SentMessageToJSON,
} from '../models/index';

export interface AcceptNewsletterAdminRequestRequest {
    newsletterID: string;
    contactID: string;
}

export interface CreateNewsletterOperationRequest {
    createNewsletterRequest: CreateNewsletterRequest;
}

export interface CreateNewsletterAdminInviteOperationRequest {
    newsletterID: string;
    contactID: string;
    createNewsletterAdminInviteRequest?: CreateNewsletterAdminInviteRequest;
}

export interface DeleteNewsletterRequest {
    newsletterID: string;
}

export interface DemoteNewsletterAdminRequest {
    newsletterID: string;
    contactID: string;
}

export interface EditNewsletterOperationRequest {
    newsletterID: string;
    editNewsletterRequest: EditNewsletterRequest;
}

export interface FindNewsletterRequest {
    countryCode?: string;
    search?: string;
    newsletterField?: FindNewsletterNewsletterFieldEnum;
    cursor?: string;
    count?: number;
    sort?: FindNewsletterSortEnum;
}

export interface GetMessagesNewsletterRequest {
    newsletterID: string;
    count?: number;
    before?: number;
    after?: number;
}

export interface GetNewsletterRequest {
    newsletterID: string;
    userRole?: GetNewsletterUserRoleEnum;
}

export interface GetNewsletterByInviteCodeRequest {
    newsletterInviteCode: string;
}

export interface GetNewslettersRequest {
    count?: number;
    offset?: number;
}

export interface RecommendedNewsletterRequest {
    countryCode?: string;
    cursor?: string;
    count?: number;
}

export interface RevokeNewsletterAdminInviteRequest {
    newsletterID: string;
    contactID: string;
}

export interface SendNewsletterInviteRequest {
    newsletterInviteCode: string;
    senderNewsletterInviteByCode: SenderNewsletterInviteByCode;
}

export interface SubscribeNewsletterRequest {
    newsletterID: string;
}

export interface SubscribeNewsletterInviteRequest {
    newsletterInviteCode: string;
}

export interface TrackingNewsletterRequest {
    newsletterID: string;
}

export interface UnsubscribeNewsletterRequest {
    newsletterID: string;
}

export interface UnsubscribeNewsletterInviteRequest {
    newsletterInviteCode: string;
}

/**
 * 
 */
export class NewslettersApi extends runtime.BaseAPI {

    /**
     * This method is responsible for accepting an request to become an administrator of a WhatsApp Channel. This request is a message that you can both send like invitation and receive through the received message webhook
     * Accept Newsletter admin-request
     */
    async acceptNewsletterAdminRequestRaw(requestParameters: AcceptNewsletterAdminRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseSuccess>> {
        if (requestParameters['newsletterID'] == null) {
            throw new runtime.RequiredError(
                'newsletterID',
                'Required parameter "newsletterID" was null or undefined when calling acceptNewsletterAdminRequest().'
            );
        }

        if (requestParameters['contactID'] == null) {
            throw new runtime.RequiredError(
                'contactID',
                'Required parameter "contactID" was null or undefined when calling acceptNewsletterAdminRequest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/newsletters/{NewsletterID}/admins/{ContactID}`.replace(`{${"NewsletterID"}}`, encodeURIComponent(String(requestParameters['newsletterID']))).replace(`{${"ContactID"}}`, encodeURIComponent(String(requestParameters['contactID']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseSuccessFromJSON(jsonValue));
    }

    /**
     * This method is responsible for accepting an request to become an administrator of a WhatsApp Channel. This request is a message that you can both send like invitation and receive through the received message webhook
     * Accept Newsletter admin-request
     */
    async acceptNewsletterAdminRequest(requestParameters: AcceptNewsletterAdminRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseSuccess> {
        const response = await this.acceptNewsletterAdminRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method is responsible for creating a WhatsApp Channel. [How to send a post to WhatsApp Channel](https://support.whapi.cloud/help-desk/channels/send-post-to-whatsapp-channel)
     * Create newsletter
     */
    async createNewsletterRaw(requestParameters: CreateNewsletterOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Newsletter>> {
        if (requestParameters['createNewsletterRequest'] == null) {
            throw new runtime.RequiredError(
                'createNewsletterRequest',
                'Required parameter "createNewsletterRequest" was null or undefined when calling createNewsletter().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/newsletters`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateNewsletterRequestToJSON(requestParameters['createNewsletterRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NewsletterFromJSON(jsonValue));
    }

    /**
     * This method is responsible for creating a WhatsApp Channel. [How to send a post to WhatsApp Channel](https://support.whapi.cloud/help-desk/channels/send-post-to-whatsapp-channel)
     * Create newsletter
     */
    async createNewsletter(requestParameters: CreateNewsletterOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Newsletter> {
        const response = await this.createNewsletterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method is responsible for sending an invitation for WhatsApp Channel administrator. Once the invitation is created, an invitation message will be sent to the contact
     * Create Newsletter admin-invite
     */
    async createNewsletterAdminInviteRaw(requestParameters: CreateNewsletterAdminInviteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SentMessage>> {
        if (requestParameters['newsletterID'] == null) {
            throw new runtime.RequiredError(
                'newsletterID',
                'Required parameter "newsletterID" was null or undefined when calling createNewsletterAdminInvite().'
            );
        }

        if (requestParameters['contactID'] == null) {
            throw new runtime.RequiredError(
                'contactID',
                'Required parameter "contactID" was null or undefined when calling createNewsletterAdminInvite().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/newsletters/{NewsletterID}/invite/{ContactID}`.replace(`{${"NewsletterID"}}`, encodeURIComponent(String(requestParameters['newsletterID']))).replace(`{${"ContactID"}}`, encodeURIComponent(String(requestParameters['contactID']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateNewsletterAdminInviteRequestToJSON(requestParameters['createNewsletterAdminInviteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SentMessageFromJSON(jsonValue));
    }

    /**
     * This method is responsible for sending an invitation for WhatsApp Channel administrator. Once the invitation is created, an invitation message will be sent to the contact
     * Create Newsletter admin-invite
     */
    async createNewsletterAdminInvite(requestParameters: CreateNewsletterAdminInviteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SentMessage> {
        const response = await this.createNewsletterAdminInviteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method is responsible for deleting a WhatsApp Channel
     * Delete newsletter
     */
    async deleteNewsletterRaw(requestParameters: DeleteNewsletterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseSuccess>> {
        if (requestParameters['newsletterID'] == null) {
            throw new runtime.RequiredError(
                'newsletterID',
                'Required parameter "newsletterID" was null or undefined when calling deleteNewsletter().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/newsletters/{NewsletterID}`.replace(`{${"NewsletterID"}}`, encodeURIComponent(String(requestParameters['newsletterID']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseSuccessFromJSON(jsonValue));
    }

    /**
     * This method is responsible for deleting a WhatsApp Channel
     * Delete newsletter
     */
    async deleteNewsletter(requestParameters: DeleteNewsletterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseSuccess> {
        const response = await this.deleteNewsletterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method is responsible for removing a user from the administration of the WhatsApp Channel
     * Demote Newsletter admin
     */
    async demoteNewsletterAdminRaw(requestParameters: DemoteNewsletterAdminRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseSuccess>> {
        if (requestParameters['newsletterID'] == null) {
            throw new runtime.RequiredError(
                'newsletterID',
                'Required parameter "newsletterID" was null or undefined when calling demoteNewsletterAdmin().'
            );
        }

        if (requestParameters['contactID'] == null) {
            throw new runtime.RequiredError(
                'contactID',
                'Required parameter "contactID" was null or undefined when calling demoteNewsletterAdmin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/newsletters/{NewsletterID}/admins/{ContactID}`.replace(`{${"NewsletterID"}}`, encodeURIComponent(String(requestParameters['newsletterID']))).replace(`{${"ContactID"}}`, encodeURIComponent(String(requestParameters['contactID']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseSuccessFromJSON(jsonValue));
    }

    /**
     * This method is responsible for removing a user from the administration of the WhatsApp Channel
     * Demote Newsletter admin
     */
    async demoteNewsletterAdmin(requestParameters: DemoteNewsletterAdminRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseSuccess> {
        const response = await this.demoteNewsletterAdminRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method is responsible for editing a WhatsApp Newsletter Channel
     * Edit newsletter
     */
    async editNewsletterRaw(requestParameters: EditNewsletterOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Newsletter>> {
        if (requestParameters['newsletterID'] == null) {
            throw new runtime.RequiredError(
                'newsletterID',
                'Required parameter "newsletterID" was null or undefined when calling editNewsletter().'
            );
        }

        if (requestParameters['editNewsletterRequest'] == null) {
            throw new runtime.RequiredError(
                'editNewsletterRequest',
                'Required parameter "editNewsletterRequest" was null or undefined when calling editNewsletter().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/newsletters/{NewsletterID}`.replace(`{${"NewsletterID"}}`, encodeURIComponent(String(requestParameters['newsletterID']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: EditNewsletterRequestToJSON(requestParameters['editNewsletterRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NewsletterFromJSON(jsonValue));
    }

    /**
     * This method is responsible for editing a WhatsApp Newsletter Channel
     * Edit newsletter
     */
    async editNewsletter(requestParameters: EditNewsletterOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Newsletter> {
        const response = await this.editNewsletterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method returns a list of WhatsApp Channels data based on the search performed using filters provided in the request body
     * Find newsletters by filters
     */
    async findNewsletterRaw(requestParameters: FindNewsletterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NewslettersListPaged>> {
        const queryParameters: any = {};

        if (requestParameters['countryCode'] != null) {
            queryParameters['country_code'] = requestParameters['countryCode'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['newsletterField'] != null) {
            queryParameters['newsletter_field'] = requestParameters['newsletterField'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['count'] != null) {
            queryParameters['count'] = requestParameters['count'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/newsletters/find`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NewslettersListPagedFromJSON(jsonValue));
    }

    /**
     * This method returns a list of WhatsApp Channels data based on the search performed using filters provided in the request body
     * Find newsletters by filters
     */
    async findNewsletter(requestParameters: FindNewsletterRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NewslettersListPaged> {
        const response = await this.findNewsletterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The method returns the history of WhatsApp Channel messages
     * Get newsletter messages
     */
    async getMessagesNewsletterRaw(requestParameters: GetMessagesNewsletterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessagesList>> {
        if (requestParameters['newsletterID'] == null) {
            throw new runtime.RequiredError(
                'newsletterID',
                'Required parameter "newsletterID" was null or undefined when calling getMessagesNewsletter().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['count'] != null) {
            queryParameters['count'] = requestParameters['count'];
        }

        if (requestParameters['before'] != null) {
            queryParameters['before'] = requestParameters['before'];
        }

        if (requestParameters['after'] != null) {
            queryParameters['after'] = requestParameters['after'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/newsletters/{NewsletterID}/messages`.replace(`{${"NewsletterID"}}`, encodeURIComponent(String(requestParameters['newsletterID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessagesListFromJSON(jsonValue));
    }

    /**
     * The method returns the history of WhatsApp Channel messages
     * Get newsletter messages
     */
    async getMessagesNewsletter(requestParameters: GetMessagesNewsletterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessagesList> {
        const response = await this.getMessagesNewsletterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method returns the metadata of a WhatsApp Channel
     * Get newsletter information
     */
    async getNewsletterRaw(requestParameters: GetNewsletterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessagesList>> {
        if (requestParameters['newsletterID'] == null) {
            throw new runtime.RequiredError(
                'newsletterID',
                'Required parameter "newsletterID" was null or undefined when calling getNewsletter().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userRole'] != null) {
            queryParameters['user role'] = requestParameters['userRole'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/newsletters/{NewsletterID}`.replace(`{${"NewsletterID"}}`, encodeURIComponent(String(requestParameters['newsletterID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessagesListFromJSON(jsonValue));
    }

    /**
     * This method returns the metadata of a WhatsApp Channel
     * Get newsletter information
     */
    async getNewsletter(requestParameters: GetNewsletterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessagesList> {
        const response = await this.getNewsletterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get newsletter info by invite code
     */
    async getNewsletterByInviteCodeRaw(requestParameters: GetNewsletterByInviteCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Newsletter>> {
        if (requestParameters['newsletterInviteCode'] == null) {
            throw new runtime.RequiredError(
                'newsletterInviteCode',
                'Required parameter "newsletterInviteCode" was null or undefined when calling getNewsletterByInviteCode().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/newsletters/link/{NewsletterInviteCode}`.replace(`{${"NewsletterInviteCode"}}`, encodeURIComponent(String(requestParameters['newsletterInviteCode']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NewsletterFromJSON(jsonValue));
    }

    /**
     * Get newsletter info by invite code
     */
    async getNewsletterByInviteCode(requestParameters: GetNewsletterByInviteCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Newsletter> {
        const response = await this.getNewsletterByInviteCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method returns a list with metadata of your own WhatsApp Channel and followed Channels, including all Channel information and their views.
     * Get newsletters
     */
    async getNewslettersRaw(requestParameters: GetNewslettersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NewslettersList>> {
        const queryParameters: any = {};

        if (requestParameters['count'] != null) {
            queryParameters['count'] = requestParameters['count'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/newsletters`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NewslettersListFromJSON(jsonValue));
    }

    /**
     * This method returns a list with metadata of your own WhatsApp Channel and followed Channels, including all Channel information and their views.
     * Get newsletters
     */
    async getNewsletters(requestParameters: GetNewslettersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NewslettersList> {
        const response = await this.getNewslettersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method returns a list of WhatsApp Channels data based on the search performed using filters provided in the request body
     * Get recommended newsletters by country
     */
    async recommendedNewsletterRaw(requestParameters: RecommendedNewsletterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NewslettersListPaged>> {
        const queryParameters: any = {};

        if (requestParameters['countryCode'] != null) {
            queryParameters['country_code'] = requestParameters['countryCode'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['count'] != null) {
            queryParameters['count'] = requestParameters['count'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/newsletters/recommended`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NewslettersListPagedFromJSON(jsonValue));
    }

    /**
     * This method returns a list of WhatsApp Channels data based on the search performed using filters provided in the request body
     * Get recommended newsletters by country
     */
    async recommendedNewsletter(requestParameters: RecommendedNewsletterRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NewslettersListPaged> {
        const response = await this.recommendedNewsletterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method is responsible for revoking an invitation for WhatsApp Channel administrator.
     * Revoke Newsletter admin-invite
     */
    async revokeNewsletterAdminInviteRaw(requestParameters: RevokeNewsletterAdminInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseSuccess>> {
        if (requestParameters['newsletterID'] == null) {
            throw new runtime.RequiredError(
                'newsletterID',
                'Required parameter "newsletterID" was null or undefined when calling revokeNewsletterAdminInvite().'
            );
        }

        if (requestParameters['contactID'] == null) {
            throw new runtime.RequiredError(
                'contactID',
                'Required parameter "contactID" was null or undefined when calling revokeNewsletterAdminInvite().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/newsletters/{NewsletterID}/invite/{ContactID}`.replace(`{${"NewsletterID"}}`, encodeURIComponent(String(requestParameters['newsletterID']))).replace(`{${"ContactID"}}`, encodeURIComponent(String(requestParameters['contactID']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseSuccessFromJSON(jsonValue));
    }

    /**
     * This method is responsible for revoking an invitation for WhatsApp Channel administrator.
     * Revoke Newsletter admin-invite
     */
    async revokeNewsletterAdminInvite(requestParameters: RevokeNewsletterAdminInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseSuccess> {
        const response = await this.revokeNewsletterAdminInviteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send newsletter invite link
     */
    async sendNewsletterInviteRaw(requestParameters: SendNewsletterInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SentMessage>> {
        if (requestParameters['newsletterInviteCode'] == null) {
            throw new runtime.RequiredError(
                'newsletterInviteCode',
                'Required parameter "newsletterInviteCode" was null or undefined when calling sendNewsletterInvite().'
            );
        }

        if (requestParameters['senderNewsletterInviteByCode'] == null) {
            throw new runtime.RequiredError(
                'senderNewsletterInviteByCode',
                'Required parameter "senderNewsletterInviteByCode" was null or undefined when calling sendNewsletterInvite().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/newsletters/link/{NewsletterInviteCode}`.replace(`{${"NewsletterInviteCode"}}`, encodeURIComponent(String(requestParameters['newsletterInviteCode']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SenderNewsletterInviteByCodeToJSON(requestParameters['senderNewsletterInviteByCode']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SentMessageFromJSON(jsonValue));
    }

    /**
     * Send newsletter invite link
     */
    async sendNewsletterInvite(requestParameters: SendNewsletterInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SentMessage> {
        const response = await this.sendNewsletterInviteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method is responsible for following a WhatsApp Channel
     * Subscribe to newsletter
     */
    async subscribeNewsletterRaw(requestParameters: SubscribeNewsletterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseSuccess>> {
        if (requestParameters['newsletterID'] == null) {
            throw new runtime.RequiredError(
                'newsletterID',
                'Required parameter "newsletterID" was null or undefined when calling subscribeNewsletter().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/newsletters/{NewsletterID}/subscription`.replace(`{${"NewsletterID"}}`, encodeURIComponent(String(requestParameters['newsletterID']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseSuccessFromJSON(jsonValue));
    }

    /**
     * This method is responsible for following a WhatsApp Channel
     * Subscribe to newsletter
     */
    async subscribeNewsletter(requestParameters: SubscribeNewsletterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseSuccess> {
        const response = await this.subscribeNewsletterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method is responsible for following a WhatsApp Channel
     * Subscribe to newsletter by invite code
     */
    async subscribeNewsletterInviteRaw(requestParameters: SubscribeNewsletterInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseSuccess>> {
        if (requestParameters['newsletterInviteCode'] == null) {
            throw new runtime.RequiredError(
                'newsletterInviteCode',
                'Required parameter "newsletterInviteCode" was null or undefined when calling subscribeNewsletterInvite().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/newsletters/invite/{NewsletterInviteCode}/subscription`.replace(`{${"NewsletterInviteCode"}}`, encodeURIComponent(String(requestParameters['newsletterInviteCode']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseSuccessFromJSON(jsonValue));
    }

    /**
     * This method is responsible for following a WhatsApp Channel
     * Subscribe to newsletter by invite code
     */
    async subscribeNewsletterInvite(requestParameters: SubscribeNewsletterInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseSuccess> {
        const response = await this.subscribeNewsletterInviteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * It is necessary to receive notifications about new votes in the polls
     * Subscribe to newsletter updates
     */
    async trackingNewsletterRaw(requestParameters: TrackingNewsletterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseSuccess>> {
        if (requestParameters['newsletterID'] == null) {
            throw new runtime.RequiredError(
                'newsletterID',
                'Required parameter "newsletterID" was null or undefined when calling trackingNewsletter().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/newsletters/{NewsletterID}/tracking`.replace(`{${"NewsletterID"}}`, encodeURIComponent(String(requestParameters['newsletterID']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseSuccessFromJSON(jsonValue));
    }

    /**
     * It is necessary to receive notifications about new votes in the polls
     * Subscribe to newsletter updates
     */
    async trackingNewsletter(requestParameters: TrackingNewsletterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseSuccess> {
        const response = await this.trackingNewsletterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method is responsible for unfollowing a WhatsApp Channel
     * Unsubscribe from newsletter
     */
    async unsubscribeNewsletterRaw(requestParameters: UnsubscribeNewsletterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseSuccess>> {
        if (requestParameters['newsletterID'] == null) {
            throw new runtime.RequiredError(
                'newsletterID',
                'Required parameter "newsletterID" was null or undefined when calling unsubscribeNewsletter().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/newsletters/{NewsletterID}/subscription`.replace(`{${"NewsletterID"}}`, encodeURIComponent(String(requestParameters['newsletterID']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseSuccessFromJSON(jsonValue));
    }

    /**
     * This method is responsible for unfollowing a WhatsApp Channel
     * Unsubscribe from newsletter
     */
    async unsubscribeNewsletter(requestParameters: UnsubscribeNewsletterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseSuccess> {
        const response = await this.unsubscribeNewsletterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method is responsible for unfollowing a WhatsApp Channel
     * Unsubscribe from newsletter by invite code
     */
    async unsubscribeNewsletterInviteRaw(requestParameters: UnsubscribeNewsletterInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseSuccess>> {
        if (requestParameters['newsletterInviteCode'] == null) {
            throw new runtime.RequiredError(
                'newsletterInviteCode',
                'Required parameter "newsletterInviteCode" was null or undefined when calling unsubscribeNewsletterInvite().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/newsletters/invite/{NewsletterInviteCode}/subscription`.replace(`{${"NewsletterInviteCode"}}`, encodeURIComponent(String(requestParameters['newsletterInviteCode']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseSuccessFromJSON(jsonValue));
    }

    /**
     * This method is responsible for unfollowing a WhatsApp Channel
     * Unsubscribe from newsletter by invite code
     */
    async unsubscribeNewsletterInvite(requestParameters: UnsubscribeNewsletterInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseSuccess> {
        const response = await this.unsubscribeNewsletterInviteRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const FindNewsletterNewsletterFieldEnum = {
    CreationTime: 'creation_time',
    Subscribers: 'subscribers'
} as const;
export type FindNewsletterNewsletterFieldEnum = typeof FindNewsletterNewsletterFieldEnum[keyof typeof FindNewsletterNewsletterFieldEnum];
/**
 * @export
 */
export const FindNewsletterSortEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type FindNewsletterSortEnum = typeof FindNewsletterSortEnum[keyof typeof FindNewsletterSortEnum];
/**
 * @export
 */
export const GetNewsletterUserRoleEnum = {
    Subscriber: 'subscriber',
    Admin: 'admin',
    Guest: 'guest',
    Owner: 'owner'
} as const;
export type GetNewsletterUserRoleEnum = typeof GetNewsletterUserRoleEnum[keyof typeof GetNewsletterUserRoleEnum];
