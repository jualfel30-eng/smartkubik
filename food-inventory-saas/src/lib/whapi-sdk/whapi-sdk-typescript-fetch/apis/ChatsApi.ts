/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ArchiveChatRequest,
  Chat,
  ChatsList,
  PatchChatRequest,
  ResponseError,
  ResponseSuccess,
} from '../models/index';
import {
    ArchiveChatRequestFromJSON,
    ArchiveChatRequestToJSON,
    ChatFromJSON,
    ChatToJSON,
    ChatsListFromJSON,
    ChatsListToJSON,
    PatchChatRequestFromJSON,
    PatchChatRequestToJSON,
    ResponseErrorFromJSON,
    ResponseErrorToJSON,
    ResponseSuccessFromJSON,
    ResponseSuccessToJSON,
} from '../models/index';

export interface ArchiveChatOperationRequest {
    chatID: string;
    archiveChatRequest?: ArchiveChatRequest;
}

export interface DeleteChatRequest {
    chatID: string;
}

export interface GetChatRequest {
    chatID: string;
}

export interface GetChatsRequest {
    count?: number;
    offset?: number;
}

export interface PatchChatOperationRequest {
    chatID: string;
    patchChatRequest?: PatchChatRequest;
}

/**
 * 
 */
export class ChatsApi extends runtime.BaseAPI {

    /**
     * This method is responsible for archiving or unarchiving chats
     * üóÑ Archive/Unarchive chat
     */
    async archiveChatRaw(requestParameters: ArchiveChatOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseSuccess>> {
        if (requestParameters['chatID'] == null) {
            throw new runtime.RequiredError(
                'chatID',
                'Required parameter "chatID" was null or undefined when calling archiveChat().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/chats/{ChatID}`.replace(`{${"ChatID"}}`, encodeURIComponent(String(requestParameters['chatID']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ArchiveChatRequestToJSON(requestParameters['archiveChatRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseSuccessFromJSON(jsonValue));
    }

    /**
     * This method is responsible for archiving or unarchiving chats
     * üóÑ Archive/Unarchive chat
     */
    async archiveChat(requestParameters: ArchiveChatOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseSuccess> {
        const response = await this.archiveChatRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method is responsible for deleting chats
     * ‚ùå Delete chat
     */
    async deleteChatRaw(requestParameters: DeleteChatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseSuccess>> {
        if (requestParameters['chatID'] == null) {
            throw new runtime.RequiredError(
                'chatID',
                'Required parameter "chatID" was null or undefined when calling deleteChat().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/chats/{ChatID}`.replace(`{${"ChatID"}}`, encodeURIComponent(String(requestParameters['chatID']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseSuccessFromJSON(jsonValue));
    }

    /**
     * This method is responsible for deleting chats
     * ‚ùå Delete chat
     */
    async deleteChat(requestParameters: DeleteChatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseSuccess> {
        const response = await this.deleteChatRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method is responsible for returning the metadata of a chat. Read more about [Chat ID](https://support.whapi.cloud/help-desk/faq/chat-id.-what-is-it-and-how-to-get-it)
     * Get chat
     */
    async getChatRaw(requestParameters: GetChatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Chat>> {
        if (requestParameters['chatID'] == null) {
            throw new runtime.RequiredError(
                'chatID',
                'Required parameter "chatID" was null or undefined when calling getChat().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/chats/{ChatID}`.replace(`{${"ChatID"}}`, encodeURIComponent(String(requestParameters['chatID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChatFromJSON(jsonValue));
    }

    /**
     * This method is responsible for returning the metadata of a chat. Read more about [Chat ID](https://support.whapi.cloud/help-desk/faq/chat-id.-what-is-it-and-how-to-get-it)
     * Get chat
     */
    async getChat(requestParameters: GetChatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Chat> {
        const response = await this.getChatRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method is responsible for returning all of your chats. If you need to get a profile pic of your contacts or chats, [refer to these instructions](https://support.whapi.cloud/help-desk/receiving/http-api/get-a-profile-picture-of-a-chat-or-user).
     * Get chats
     */
    async getChatsRaw(requestParameters: GetChatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChatsList>> {
        const queryParameters: any = {};

        if (requestParameters['count'] != null) {
            queryParameters['count'] = requestParameters['count'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/chats`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChatsListFromJSON(jsonValue));
    }

    /**
     * This method is responsible for returning all of your chats. If you need to get a profile pic of your contacts or chats, [refer to these instructions](https://support.whapi.cloud/help-desk/receiving/http-api/get-a-profile-picture-of-a-chat-or-user).
     * Get chats
     */
    async getChats(requestParameters: GetChatsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChatsList> {
        const response = await this.getChatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method is responsible for pinning and unpinning, for muting and unmuting your chats. Also this method is responsible for performing the action of reading an entire chat or marking a chat as unread
     * ‚öôÔ∏èChat Settings Management: Pin, Mute, Read, Disappearing.
     */
    async patchChatRaw(requestParameters: PatchChatOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseSuccess>> {
        if (requestParameters['chatID'] == null) {
            throw new runtime.RequiredError(
                'chatID',
                'Required parameter "chatID" was null or undefined when calling patchChat().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/chats/{ChatID}`.replace(`{${"ChatID"}}`, encodeURIComponent(String(requestParameters['chatID']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchChatRequestToJSON(requestParameters['patchChatRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseSuccessFromJSON(jsonValue));
    }

    /**
     * This method is responsible for pinning and unpinning, for muting and unmuting your chats. Also this method is responsible for performing the action of reading an entire chat or marking a chat as unread
     * ‚öôÔ∏èChat Settings Management: Pin, Mute, Read, Disappearing.
     */
    async patchChat(requestParameters: PatchChatOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseSuccess> {
        const response = await this.patchChatRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
