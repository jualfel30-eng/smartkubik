/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BusinessCollection,
  BusinessCollectionCreate,
  BusinessCollectionEdit,
  BusinessCollectionEditResult,
  BusinessCollectionList,
  BusinessProfile,
  BusinessProfileCustom,
  OrderItems,
  Product,
  ProductCreate,
  ProductEdit,
  ProductsList,
  ResponseError,
  ResponseSuccess,
  SenderCatalogByID,
  SenderProductFromCatalog,
  SentMessage,
} from '../models/index';
import {
    BusinessCollectionFromJSON,
    BusinessCollectionToJSON,
    BusinessCollectionCreateFromJSON,
    BusinessCollectionCreateToJSON,
    BusinessCollectionEditFromJSON,
    BusinessCollectionEditToJSON,
    BusinessCollectionEditResultFromJSON,
    BusinessCollectionEditResultToJSON,
    BusinessCollectionListFromJSON,
    BusinessCollectionListToJSON,
    BusinessProfileFromJSON,
    BusinessProfileToJSON,
    BusinessProfileCustomFromJSON,
    BusinessProfileCustomToJSON,
    OrderItemsFromJSON,
    OrderItemsToJSON,
    ProductFromJSON,
    ProductToJSON,
    ProductCreateFromJSON,
    ProductCreateToJSON,
    ProductEditFromJSON,
    ProductEditToJSON,
    ProductsListFromJSON,
    ProductsListToJSON,
    ResponseErrorFromJSON,
    ResponseErrorToJSON,
    ResponseSuccessFromJSON,
    ResponseSuccessToJSON,
    SenderCatalogByIDFromJSON,
    SenderCatalogByIDToJSON,
    SenderProductFromCatalogFromJSON,
    SenderProductFromCatalogToJSON,
    SentMessageFromJSON,
    SentMessageToJSON,
} from '../models/index';

export interface CreateCollectionRequest {
    businessCollectionCreate: BusinessCollectionCreate;
}

export interface CreateProductRequest {
    productCreate?: ProductCreate;
}

export interface DeleteCollectionRequest {
    collectionID: string;
}

export interface DeleteProductRequest {
    productID: string;
}

export interface EditBusinessProfileRequest {
    businessProfileCustom?: BusinessProfileCustom;
}

export interface EditCollectionRequest {
    collectionID: string;
    businessCollectionEdit: BusinessCollectionEdit;
}

export interface GetCollectionRequest {
    collectionID: string;
}

export interface GetCollectionsListRequest {
    count?: number;
    offset?: number;
}

export interface GetContactProductsRequest {
    contactID: string;
    count?: number;
    offset?: number;
}

export interface GetOrderItemsRequest {
    orderID: string;
    orderToken?: string;
}

export interface GetProductRequest {
    productID: string;
}

export interface GetProductsRequest {
    count?: number;
    offset?: number;
}

export interface SendCatalogRequest {
    contactID: string;
    senderCatalogByID: SenderCatalogByID;
}

export interface SendProductRequest {
    productID: string;
    senderProductFromCatalog: SenderProductFromCatalog;
}

export interface UpdateProductRequest {
    productID: string;
    productEdit: ProductEdit;
}

/**
 * 
 */
export class BusinessApi extends runtime.BaseAPI {

    /**
     * Create business collection
     * Create collection
     */
    async createCollectionRaw(requestParameters: CreateCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BusinessCollectionEditResult>> {
        if (requestParameters['businessCollectionCreate'] == null) {
            throw new runtime.RequiredError(
                'businessCollectionCreate',
                'Required parameter "businessCollectionCreate" was null or undefined when calling createCollection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/business/collections`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BusinessCollectionCreateToJSON(requestParameters['businessCollectionCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BusinessCollectionEditResultFromJSON(jsonValue));
    }

    /**
     * Create business collection
     * Create collection
     */
    async createCollection(requestParameters: CreateCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BusinessCollectionEditResult> {
        const response = await this.createCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * In this method you will be able to register a product in your catalog
     * Create product
     */
    async createProductRaw(requestParameters: CreateProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Product>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/business/products`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductCreateToJSON(requestParameters['productCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductFromJSON(jsonValue));
    }

    /**
     * In this method you will be able to register a product in your catalog
     * Create product
     */
    async createProduct(requestParameters: CreateProductRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Product> {
        const response = await this.createProductRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Method to delete business collection
     * Delete collection
     */
    async deleteCollectionRaw(requestParameters: DeleteCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseSuccess>> {
        if (requestParameters['collectionID'] == null) {
            throw new runtime.RequiredError(
                'collectionID',
                'Required parameter "collectionID" was null or undefined when calling deleteCollection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/business/collections/{CollectionID}`.replace(`{${"CollectionID"}}`, encodeURIComponent(String(requestParameters['collectionID']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseSuccessFromJSON(jsonValue));
    }

    /**
     * Method to delete business collection
     * Delete collection
     */
    async deleteCollection(requestParameters: DeleteCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseSuccess> {
        const response = await this.deleteCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * In this method you will be able to delete a product by its ID
     * Delete product
     */
    async deleteProductRaw(requestParameters: DeleteProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseSuccess>> {
        if (requestParameters['productID'] == null) {
            throw new runtime.RequiredError(
                'productID',
                'Required parameter "productID" was null or undefined when calling deleteProduct().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/business/products/{ProductID}`.replace(`{${"ProductID"}}`, encodeURIComponent(String(requestParameters['productID']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseSuccessFromJSON(jsonValue));
    }

    /**
     * In this method you will be able to delete a product by its ID
     * Delete product
     */
    async deleteProduct(requestParameters: DeleteProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseSuccess> {
        const response = await this.deleteProductRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The method allows you to edit information of your WhatsApp Business profile
     * Edit your Business Profile
     */
    async editBusinessProfileRaw(requestParameters: EditBusinessProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseSuccess>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/business`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BusinessProfileCustomToJSON(requestParameters['businessProfileCustom']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseSuccessFromJSON(jsonValue));
    }

    /**
     * The method allows you to edit information of your WhatsApp Business profile
     * Edit your Business Profile
     */
    async editBusinessProfile(requestParameters: EditBusinessProfileRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseSuccess> {
        const response = await this.editBusinessProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * With this method you will be able to edit business collection
     * Edit collection
     */
    async editCollectionRaw(requestParameters: EditCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BusinessCollectionEditResult>> {
        if (requestParameters['collectionID'] == null) {
            throw new runtime.RequiredError(
                'collectionID',
                'Required parameter "collectionID" was null or undefined when calling editCollection().'
            );
        }

        if (requestParameters['businessCollectionEdit'] == null) {
            throw new runtime.RequiredError(
                'businessCollectionEdit',
                'Required parameter "businessCollectionEdit" was null or undefined when calling editCollection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/business/collections/{CollectionID}`.replace(`{${"CollectionID"}}`, encodeURIComponent(String(requestParameters['collectionID']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: BusinessCollectionEditToJSON(requestParameters['businessCollectionEdit']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BusinessCollectionEditResultFromJSON(jsonValue));
    }

    /**
     * With this method you will be able to edit business collection
     * Edit collection
     */
    async editCollection(requestParameters: EditCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BusinessCollectionEditResult> {
        const response = await this.editCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The method allows you to get information about your WhatsApp Business profile
     * Get business profile
     */
    async getBusinessProfileRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BusinessProfile>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/business`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BusinessProfileFromJSON(jsonValue));
    }

    /**
     * The method allows you to get information about your WhatsApp Business profile
     * Get business profile
     */
    async getBusinessProfile(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BusinessProfile> {
        const response = await this.getBusinessProfileRaw(initOverrides);
        return await response.value();
    }

    /**
     * With this method you will be able to get business collection
     * Get collection
     */
    async getCollectionRaw(requestParameters: GetCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BusinessCollection>> {
        if (requestParameters['collectionID'] == null) {
            throw new runtime.RequiredError(
                'collectionID',
                'Required parameter "collectionID" was null or undefined when calling getCollection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/business/collections/{CollectionID}`.replace(`{${"CollectionID"}}`, encodeURIComponent(String(requestParameters['collectionID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BusinessCollectionFromJSON(jsonValue));
    }

    /**
     * With this method you will be able to get business collection
     * Get collection
     */
    async getCollection(requestParameters: GetCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BusinessCollection> {
        const response = await this.getCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * With this method you will be able to get the collections list from a Whatsapp Business catalog
     * Get collections
     */
    async getCollectionsListRaw(requestParameters: GetCollectionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BusinessCollectionList>> {
        const queryParameters: any = {};

        if (requestParameters['count'] != null) {
            queryParameters['count'] = requestParameters['count'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/business/collections`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BusinessCollectionListFromJSON(jsonValue));
    }

    /**
     * With this method you will be able to get the collections list from a Whatsapp Business catalog
     * Get collections
     */
    async getCollectionsList(requestParameters: GetCollectionsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BusinessCollectionList> {
        const response = await this.getCollectionsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method allows you to get the catalog and products by [Chat ID](https://support.whapi.cloud/help-desk/faq/chat-id.-what-is-it-and-how-to-get-it), even if it is not in your contact list
     * Get products by Contact ID
     */
    async getContactProductsRaw(requestParameters: GetContactProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductsList>> {
        if (requestParameters['contactID'] == null) {
            throw new runtime.RequiredError(
                'contactID',
                'Required parameter "contactID" was null or undefined when calling getContactProducts().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['count'] != null) {
            queryParameters['count'] = requestParameters['count'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/business/{ContactID}/products`.replace(`{${"ContactID"}}`, encodeURIComponent(String(requestParameters['contactID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductsListFromJSON(jsonValue));
    }

    /**
     * This method allows you to get the catalog and products by [Chat ID](https://support.whapi.cloud/help-desk/faq/chat-id.-what-is-it-and-how-to-get-it), even if it is not in your contact list
     * Get products by Contact ID
     */
    async getContactProducts(requestParameters: GetContactProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductsList> {
        const response = await this.getContactProductsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The method allows you to get information about the items in the shopping cart sent to you in messages. Note! Use the token as a Query (as in a get request). [More details in the knowledge base](https://support.whapi.cloud/help-desk/receiving/http-api/get-order-items)
     * Get order items
     */
    async getOrderItemsRaw(requestParameters: GetOrderItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderItems>> {
        if (requestParameters['orderID'] == null) {
            throw new runtime.RequiredError(
                'orderID',
                'Required parameter "orderID" was null or undefined when calling getOrderItems().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['orderToken'] != null) {
            queryParameters['order_token'] = requestParameters['orderToken'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/business/orders/{OrderID}`.replace(`{${"OrderID"}}`, encodeURIComponent(String(requestParameters['orderID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderItemsFromJSON(jsonValue));
    }

    /**
     * The method allows you to get information about the items in the shopping cart sent to you in messages. Note! Use the token as a Query (as in a get request). [More details in the knowledge base](https://support.whapi.cloud/help-desk/receiving/http-api/get-order-items)
     * Get order items
     */
    async getOrderItems(requestParameters: GetOrderItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderItems> {
        const response = await this.getOrderItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * In this method you will be able to get your product by its ID
     * Get product
     */
    async getProductRaw(requestParameters: GetProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Product>> {
        if (requestParameters['productID'] == null) {
            throw new runtime.RequiredError(
                'productID',
                'Required parameter "productID" was null or undefined when calling getProduct().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/business/products/{ProductID}`.replace(`{${"ProductID"}}`, encodeURIComponent(String(requestParameters['productID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductFromJSON(jsonValue));
    }

    /**
     * In this method you will be able to get your product by its ID
     * Get product
     */
    async getProduct(requestParameters: GetProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Product> {
        const response = await this.getProductRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * With this method you will be able to get the products from a Whatsapp Business catalog
     * Get products
     */
    async getProductsRaw(requestParameters: GetProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductsList>> {
        const queryParameters: any = {};

        if (requestParameters['count'] != null) {
            queryParameters['count'] = requestParameters['count'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/business/products`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductsListFromJSON(jsonValue));
    }

    /**
     * With this method you will be able to get the products from a Whatsapp Business catalog
     * Get products
     */
    async getProducts(requestParameters: GetProductsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductsList> {
        const response = await this.getProductsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send catalog by Contact ID (phone number)
     */
    async sendCatalogRaw(requestParameters: SendCatalogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SentMessage>> {
        if (requestParameters['contactID'] == null) {
            throw new runtime.RequiredError(
                'contactID',
                'Required parameter "contactID" was null or undefined when calling sendCatalog().'
            );
        }

        if (requestParameters['senderCatalogByID'] == null) {
            throw new runtime.RequiredError(
                'senderCatalogByID',
                'Required parameter "senderCatalogByID" was null or undefined when calling sendCatalog().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/business/catalogs/{ContactID}`.replace(`{${"ContactID"}}`, encodeURIComponent(String(requestParameters['contactID']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SenderCatalogByIDToJSON(requestParameters['senderCatalogByID']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SentMessageFromJSON(jsonValue));
    }

    /**
     * Send catalog by Contact ID (phone number)
     */
    async sendCatalog(requestParameters: SendCatalogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SentMessage> {
        const response = await this.sendCatalogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The method is for sending an item from your catalog
     * Send product
     */
    async sendProductRaw(requestParameters: SendProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SentMessage>> {
        if (requestParameters['productID'] == null) {
            throw new runtime.RequiredError(
                'productID',
                'Required parameter "productID" was null or undefined when calling sendProduct().'
            );
        }

        if (requestParameters['senderProductFromCatalog'] == null) {
            throw new runtime.RequiredError(
                'senderProductFromCatalog',
                'Required parameter "senderProductFromCatalog" was null or undefined when calling sendProduct().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/business/products/{ProductID}`.replace(`{${"ProductID"}}`, encodeURIComponent(String(requestParameters['productID']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SenderProductFromCatalogToJSON(requestParameters['senderProductFromCatalog']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SentMessageFromJSON(jsonValue));
    }

    /**
     * The method is for sending an item from your catalog
     * Send product
     */
    async sendProduct(requestParameters: SendProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SentMessage> {
        const response = await this.sendProductRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The *images* field is required and must contain all images
     * Update product
     */
    async updateProductRaw(requestParameters: UpdateProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Product>> {
        if (requestParameters['productID'] == null) {
            throw new runtime.RequiredError(
                'productID',
                'Required parameter "productID" was null or undefined when calling updateProduct().'
            );
        }

        if (requestParameters['productEdit'] == null) {
            throw new runtime.RequiredError(
                'productEdit',
                'Required parameter "productEdit" was null or undefined when calling updateProduct().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/business/products/{ProductID}`.replace(`{${"ProductID"}}`, encodeURIComponent(String(requestParameters['productID']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ProductEditToJSON(requestParameters['productEdit']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductFromJSON(jsonValue));
    }

    /**
     * The *images* field is required and must contain all images
     * Update product
     */
    async updateProduct(requestParameters: UpdateProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Product> {
        const response = await this.updateProductRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
