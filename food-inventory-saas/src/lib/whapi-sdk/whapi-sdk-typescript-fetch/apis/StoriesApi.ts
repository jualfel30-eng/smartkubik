/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CopyStories,
  Message,
  MessagesList,
  ResponseError,
  ResponseSuccess,
  SendMediaMedia,
  SenderStories,
  SenderStoriesAudio,
  SenderStoriesText,
  SentMessage,
} from '../models/index';
import {
    CopyStoriesFromJSON,
    CopyStoriesToJSON,
    MessageFromJSON,
    MessageToJSON,
    MessagesListFromJSON,
    MessagesListToJSON,
    ResponseErrorFromJSON,
    ResponseErrorToJSON,
    ResponseSuccessFromJSON,
    ResponseSuccessToJSON,
    SendMediaMediaFromJSON,
    SendMediaMediaToJSON,
    SenderStoriesFromJSON,
    SenderStoriesToJSON,
    SenderStoriesAudioFromJSON,
    SenderStoriesAudioToJSON,
    SenderStoriesTextFromJSON,
    SenderStoriesTextToJSON,
    SentMessageFromJSON,
    SentMessageToJSON,
} from '../models/index';

export interface CopyStoryRequest {
    messageID: string;
    copyStories: CopyStories;
}

export interface CreateStoryRequest {
    senderStories: SenderStories;
}

export interface CreateStoryAudioRequest {
    senderStoriesAudio: SenderStoriesAudio;
}

export interface CreateStoryMediaRequest {
    media: SendMediaMedia;
    mimeType?: string;
    noEncode?: boolean;
    noCache?: boolean;
    caption?: string;
    preview?: string;
    width?: number;
    height?: number;
    contacts?: Array<string>;
    excludeContacts?: Array<string>;
    experimental?: boolean;
}

export interface CreateStoryTextRequest {
    senderStoriesText: SenderStoriesText;
}

export interface DeleteStoryRequest {
    messageID: string;
}

export interface GetStoriesRequest {
    count?: number;
    offset?: number;
    timeFrom?: number;
    timeTo?: number;
    normalTypes?: boolean;
    author?: string;
    fromMe?: boolean;
}

export interface GetStoryRequest {
    messageID: string;
}

export interface SendMessageStoryTextRequest {
    senderStoriesText: SenderStoriesText;
}

/**
 * 
 */
export class StoriesApi extends runtime.BaseAPI {

    /**
     * Copy story
     */
    async copyStoryRaw(requestParameters: CopyStoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseSuccess>> {
        if (requestParameters['messageID'] == null) {
            throw new runtime.RequiredError(
                'messageID',
                'Required parameter "messageID" was null or undefined when calling copyStory().'
            );
        }

        if (requestParameters['copyStories'] == null) {
            throw new runtime.RequiredError(
                'copyStories',
                'Required parameter "copyStories" was null or undefined when calling copyStory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stories/{MessageID}`.replace(`{${"MessageID"}}`, encodeURIComponent(String(requestParameters['messageID']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CopyStoriesToJSON(requestParameters['copyStories']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseSuccessFromJSON(jsonValue));
    }

    /**
     * Copy story
     */
    async copyStory(requestParameters: CopyStoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseSuccess> {
        const response = await this.copyStoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The method responsible for sending images or texts to your status. Remember that statuses disappear after 24 hours. The requirements for [sending all media types are identical](https://support.whapi.cloud/help-desk/sending/send-video-audio-image-document)
     * Create & publish story
     */
    async createStoryRaw(requestParameters: CreateStoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SentMessage>> {
        if (requestParameters['senderStories'] == null) {
            throw new runtime.RequiredError(
                'senderStories',
                'Required parameter "senderStories" was null or undefined when calling createStory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stories`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SenderStoriesToJSON(requestParameters['senderStories']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SentMessageFromJSON(jsonValue));
    }

    /**
     * The method responsible for sending images or texts to your status. Remember that statuses disappear after 24 hours. The requirements for [sending all media types are identical](https://support.whapi.cloud/help-desk/sending/send-video-audio-image-document)
     * Create & publish story
     */
    async createStory(requestParameters: CreateStoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SentMessage> {
        const response = await this.createStoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The method responsible for sending audio to your status. Remember that statuses disappear after 24 hours. The requirements for [sending all media types are identical](https://support.whapi.cloud/help-desk/sending/send-video-audio-image-document)
     * üéµÔ∏è Post audio story
     */
    async createStoryAudioRaw(requestParameters: CreateStoryAudioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SentMessage>> {
        if (requestParameters['senderStoriesAudio'] == null) {
            throw new runtime.RequiredError(
                'senderStoriesAudio',
                'Required parameter "senderStoriesAudio" was null or undefined when calling createStoryAudio().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stories/send/audio`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SenderStoriesAudioToJSON(requestParameters['senderStoriesAudio']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SentMessageFromJSON(jsonValue));
    }

    /**
     * The method responsible for sending audio to your status. Remember that statuses disappear after 24 hours. The requirements for [sending all media types are identical](https://support.whapi.cloud/help-desk/sending/send-video-audio-image-document)
     * üéµÔ∏è Post audio story
     */
    async createStoryAudio(requestParameters: CreateStoryAudioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SentMessage> {
        const response = await this.createStoryAudioRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The method responsible for sending images or video to your status. Remember that statuses disappear after 24 hours. The requirements for [sending all media types are identical](https://support.whapi.cloud/help-desk/sending/send-video-audio-image-document)
     * üñº Post media story
     */
    async createStoryMediaRaw(requestParameters: CreateStoryMediaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SentMessage>> {
        if (requestParameters['media'] == null) {
            throw new runtime.RequiredError(
                'media',
                'Required parameter "media" was null or undefined when calling createStoryMedia().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
            { contentType: 'application/json' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['media'] != null) {
            formParams.append('media', new Blob([JSON.stringify(SendMediaMediaToJSON(requestParameters['media']))], { type: "application/json", }));
                    }

        if (requestParameters['mimeType'] != null) {
            formParams.append('mime_type', requestParameters['mimeType'] as any);
        }

        if (requestParameters['noEncode'] != null) {
            formParams.append('no_encode', requestParameters['noEncode'] as any);
        }

        if (requestParameters['noCache'] != null) {
            formParams.append('no_cache', requestParameters['noCache'] as any);
        }

        if (requestParameters['caption'] != null) {
            formParams.append('caption', requestParameters['caption'] as any);
        }

        if (requestParameters['preview'] != null) {
            formParams.append('preview', requestParameters['preview'] as any);
        }

        if (requestParameters['width'] != null) {
            formParams.append('width', requestParameters['width'] as any);
        }

        if (requestParameters['height'] != null) {
            formParams.append('height', requestParameters['height'] as any);
        }

        if (requestParameters['contacts'] != null) {
            formParams.append('contacts', requestParameters['contacts']!.join(runtime.COLLECTION_FORMATS["csv"]));
        }

        if (requestParameters['excludeContacts'] != null) {
            formParams.append('exclude_contacts', requestParameters['excludeContacts']!.join(runtime.COLLECTION_FORMATS["csv"]));
        }

        if (requestParameters['experimental'] != null) {
            formParams.append('experimental', requestParameters['experimental'] as any);
        }

        const response = await this.request({
            path: `/stories/send/media`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SentMessageFromJSON(jsonValue));
    }

    /**
     * The method responsible for sending images or video to your status. Remember that statuses disappear after 24 hours. The requirements for [sending all media types are identical](https://support.whapi.cloud/help-desk/sending/send-video-audio-image-document)
     * üñº Post media story
     */
    async createStoryMedia(requestParameters: CreateStoryMediaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SentMessage> {
        const response = await this.createStoryMediaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The method responsible for sending texts to your status. Remember that statuses disappear after 24 hours.
     * üí¨ Post text story
     */
    async createStoryTextRaw(requestParameters: CreateStoryTextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SentMessage>> {
        if (requestParameters['senderStoriesText'] == null) {
            throw new runtime.RequiredError(
                'senderStoriesText',
                'Required parameter "senderStoriesText" was null or undefined when calling createStoryText().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stories/send/text`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SenderStoriesTextToJSON(requestParameters['senderStoriesText']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SentMessageFromJSON(jsonValue));
    }

    /**
     * The method responsible for sending texts to your status. Remember that statuses disappear after 24 hours.
     * üí¨ Post text story
     */
    async createStoryText(requestParameters: CreateStoryTextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SentMessage> {
        const response = await this.createStoryTextRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete story
     */
    async deleteStoryRaw(requestParameters: DeleteStoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseSuccess>> {
        if (requestParameters['messageID'] == null) {
            throw new runtime.RequiredError(
                'messageID',
                'Required parameter "messageID" was null or undefined when calling deleteStory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stories/{MessageID}`.replace(`{${"MessageID"}}`, encodeURIComponent(String(requestParameters['messageID']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseSuccessFromJSON(jsonValue));
    }

    /**
     * Delete story
     */
    async deleteStory(requestParameters: DeleteStoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseSuccess> {
        const response = await this.deleteStoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get list of stories
     */
    async getStoriesRaw(requestParameters: GetStoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessagesList>> {
        const queryParameters: any = {};

        if (requestParameters['count'] != null) {
            queryParameters['count'] = requestParameters['count'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['timeFrom'] != null) {
            queryParameters['time_from'] = requestParameters['timeFrom'];
        }

        if (requestParameters['timeTo'] != null) {
            queryParameters['time_to'] = requestParameters['timeTo'];
        }

        if (requestParameters['normalTypes'] != null) {
            queryParameters['normal_types'] = requestParameters['normalTypes'];
        }

        if (requestParameters['author'] != null) {
            queryParameters['author'] = requestParameters['author'];
        }

        if (requestParameters['fromMe'] != null) {
            queryParameters['from_me'] = requestParameters['fromMe'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessagesListFromJSON(jsonValue));
    }

    /**
     * Get list of stories
     */
    async getStories(requestParameters: GetStoriesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessagesList> {
        const response = await this.getStoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get story
     */
    async getStoryRaw(requestParameters: GetStoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Message>> {
        if (requestParameters['messageID'] == null) {
            throw new runtime.RequiredError(
                'messageID',
                'Required parameter "messageID" was null or undefined when calling getStory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stories/{MessageID}`.replace(`{${"MessageID"}}`, encodeURIComponent(String(requestParameters['messageID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageFromJSON(jsonValue));
    }

    /**
     * Get story
     */
    async getStory(requestParameters: GetStoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Message> {
        const response = await this.getStoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The method responsible for sending texts to your status. Remember that statuses disappear after 24 hours.
     * üí¨ Send story text message
     */
    async sendMessageStoryTextRaw(requestParameters: SendMessageStoryTextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SentMessage>> {
        if (requestParameters['senderStoriesText'] == null) {
            throw new runtime.RequiredError(
                'senderStoriesText',
                'Required parameter "senderStoriesText" was null or undefined when calling sendMessageStoryText().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/messages/story/text`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SenderStoriesTextToJSON(requestParameters['senderStoriesText']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SentMessageFromJSON(jsonValue));
    }

    /**
     * The method responsible for sending texts to your status. Remember that statuses disappear after 24 hours.
     * üí¨ Send story text message
     */
    async sendMessageStoryText(requestParameters: SendMessageStoryTextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SentMessage> {
        const response = await this.sendMessageStoryTextRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
