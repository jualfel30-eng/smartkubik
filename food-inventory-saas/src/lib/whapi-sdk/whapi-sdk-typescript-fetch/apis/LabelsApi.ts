/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddLabelAssociationAssociationIDParameter,
  CreateLabel,
  Label,
  LabelAssociations,
  ResponseError,
  ResponseSuccess,
} from '../models/index';
import {
    AddLabelAssociationAssociationIDParameterFromJSON,
    AddLabelAssociationAssociationIDParameterToJSON,
    CreateLabelFromJSON,
    CreateLabelToJSON,
    LabelFromJSON,
    LabelToJSON,
    LabelAssociationsFromJSON,
    LabelAssociationsToJSON,
    ResponseErrorFromJSON,
    ResponseErrorToJSON,
    ResponseSuccessFromJSON,
    ResponseSuccessToJSON,
} from '../models/index';

export interface AddLabelAssociationRequest {
    labelID: string;
    associationID: AddLabelAssociationAssociationIDParameter;
}

export interface CreateLabelRequest {
    createLabel?: CreateLabel;
}

export interface DeleteLabelAssociationRequest {
    labelID: string;
    associationID: AddLabelAssociationAssociationIDParameter;
}

export interface GetLabelAssociationsRequest {
    labelID: string;
}

/**
 * 
 */
export class LabelsApi extends runtime.BaseAPI {

    /**
     * Through this method, it is possible to assign a label to a chat in WhatsApp Business
     * Add label association
     */
    async addLabelAssociationRaw(requestParameters: AddLabelAssociationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseSuccess>> {
        if (requestParameters['labelID'] == null) {
            throw new runtime.RequiredError(
                'labelID',
                'Required parameter "labelID" was null or undefined when calling addLabelAssociation().'
            );
        }

        if (requestParameters['associationID'] == null) {
            throw new runtime.RequiredError(
                'associationID',
                'Required parameter "associationID" was null or undefined when calling addLabelAssociation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/labels/{LabelID}/{AssociationID}`.replace(`{${"LabelID"}}`, encodeURIComponent(String(requestParameters['labelID']))).replace(`{${"AssociationID"}}`, encodeURIComponent(String(requestParameters['associationID']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseSuccessFromJSON(jsonValue));
    }

    /**
     * Through this method, it is possible to assign a label to a chat in WhatsApp Business
     * Add label association
     */
    async addLabelAssociation(requestParameters: AddLabelAssociationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseSuccess> {
        const response = await this.addLabelAssociationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create label
     * Create label
     */
    async createLabelRaw(requestParameters: CreateLabelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseSuccess>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/labels`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateLabelToJSON(requestParameters['createLabel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseSuccessFromJSON(jsonValue));
    }

    /**
     * Create label
     * Create label
     */
    async createLabel(requestParameters: CreateLabelRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseSuccess> {
        const response = await this.createLabelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Through this method, it is possible to remove the labels from a chat in WhatsApp Business
     * Delete label association
     */
    async deleteLabelAssociationRaw(requestParameters: DeleteLabelAssociationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseSuccess>> {
        if (requestParameters['labelID'] == null) {
            throw new runtime.RequiredError(
                'labelID',
                'Required parameter "labelID" was null or undefined when calling deleteLabelAssociation().'
            );
        }

        if (requestParameters['associationID'] == null) {
            throw new runtime.RequiredError(
                'associationID',
                'Required parameter "associationID" was null or undefined when calling deleteLabelAssociation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/labels/{LabelID}/{AssociationID}`.replace(`{${"LabelID"}}`, encodeURIComponent(String(requestParameters['labelID']))).replace(`{${"AssociationID"}}`, encodeURIComponent(String(requestParameters['associationID']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseSuccessFromJSON(jsonValue));
    }

    /**
     * Through this method, it is possible to remove the labels from a chat in WhatsApp Business
     * Delete label association
     */
    async deleteLabelAssociation(requestParameters: DeleteLabelAssociationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseSuccess> {
        const response = await this.deleteLabelAssociationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get objects associated with label
     */
    async getLabelAssociationsRaw(requestParameters: GetLabelAssociationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LabelAssociations>> {
        if (requestParameters['labelID'] == null) {
            throw new runtime.RequiredError(
                'labelID',
                'Required parameter "labelID" was null or undefined when calling getLabelAssociations().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/labels/{LabelID}`.replace(`{${"LabelID"}}`, encodeURIComponent(String(requestParameters['labelID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LabelAssociationsFromJSON(jsonValue));
    }

    /**
     * Get objects associated with label
     */
    async getLabelAssociations(requestParameters: GetLabelAssociationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LabelAssociations> {
        const response = await this.getLabelAssociationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * In this method, you retrieve all your registered labels in your WhatsApp Business
     * Get labels
     */
    async getLabelsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Label>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/labels`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LabelFromJSON));
    }

    /**
     * In this method, you retrieve all your registered labels in your WhatsApp Business
     * Get labels
     */
    async getLabels(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Label>> {
        const response = await this.getLabelsRaw(initOverrides);
        return await response.value();
    }

}
