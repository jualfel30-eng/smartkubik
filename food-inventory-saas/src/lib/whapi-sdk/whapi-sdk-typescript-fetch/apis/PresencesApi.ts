/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CheckContactResponse,
  GetPresenceEntryIDParameter,
  Presence,
  ResponseError,
  SendMePresenceRequest,
  SendPresenceRequest,
} from '../models/index';
import {
    CheckContactResponseFromJSON,
    CheckContactResponseToJSON,
    GetPresenceEntryIDParameterFromJSON,
    GetPresenceEntryIDParameterToJSON,
    PresenceFromJSON,
    PresenceToJSON,
    ResponseErrorFromJSON,
    ResponseErrorToJSON,
    SendMePresenceRequestFromJSON,
    SendMePresenceRequestToJSON,
    SendPresenceRequestFromJSON,
    SendPresenceRequestToJSON,
} from '../models/index';

export interface GetPresenceRequest {
    entryID: GetPresenceEntryIDParameter;
}

export interface SendMePresenceOperationRequest {
    sendMePresenceRequest?: SendMePresenceRequest;
}

export interface SendPresenceOperationRequest {
    entryID: GetPresenceEntryIDParameter;
    sendPresenceRequest?: SendPresenceRequest;
}

export interface SubscribePresenceRequest {
    entryID: GetPresenceEntryIDParameter;
}

/**
 * 
 */
export class PresencesApi extends runtime.BaseAPI {

    /**
     * Get presence
     */
    async getPresenceRaw(requestParameters: GetPresenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Presence>> {
        if (requestParameters['entryID'] == null) {
            throw new runtime.RequiredError(
                'entryID',
                'Required parameter "entryID" was null or undefined when calling getPresence().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/presences/{EntryID}`.replace(`{${"EntryID"}}`, encodeURIComponent(String(requestParameters['entryID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PresenceFromJSON(jsonValue));
    }

    /**
     * Get presence
     */
    async getPresence(requestParameters: GetPresenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Presence> {
        const response = await this.getPresenceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send online or offline presence
     */
    async sendMePresenceRaw(requestParameters: SendMePresenceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckContactResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/presences/me`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SendMePresenceRequestToJSON(requestParameters['sendMePresenceRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckContactResponseFromJSON(jsonValue));
    }

    /**
     * Send online or offline presence
     */
    async sendMePresence(requestParameters: SendMePresenceOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckContactResponse> {
        const response = await this.sendMePresenceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send typing or recording presence
     */
    async sendPresenceRaw(requestParameters: SendPresenceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckContactResponse>> {
        if (requestParameters['entryID'] == null) {
            throw new runtime.RequiredError(
                'entryID',
                'Required parameter "entryID" was null or undefined when calling sendPresence().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/presences/{EntryID}`.replace(`{${"EntryID"}}`, encodeURIComponent(String(requestParameters['entryID']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SendPresenceRequestToJSON(requestParameters['sendPresenceRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckContactResponseFromJSON(jsonValue));
    }

    /**
     * Send typing or recording presence
     */
    async sendPresence(requestParameters: SendPresenceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckContactResponse> {
        const response = await this.sendPresenceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Subscribe to presence
     */
    async subscribePresenceRaw(requestParameters: SubscribePresenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckContactResponse>> {
        if (requestParameters['entryID'] == null) {
            throw new runtime.RequiredError(
                'entryID',
                'Required parameter "entryID" was null or undefined when calling subscribePresence().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/presences/{EntryID}`.replace(`{${"EntryID"}}`, encodeURIComponent(String(requestParameters['entryID']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckContactResponseFromJSON(jsonValue));
    }

    /**
     * Subscribe to presence
     */
    async subscribePresence(requestParameters: SubscribePresenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckContactResponse> {
        const response = await this.subscribePresenceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
