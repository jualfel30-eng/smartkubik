/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ResponseError,
  StatusesList,
} from '../models/index';
import {
    ResponseErrorFromJSON,
    ResponseErrorToJSON,
    StatusesListFromJSON,
    StatusesListToJSON,
} from '../models/index';

export interface GetMessageViewStatusesRequest {
    messageID: string;
}

/**
 * 
 */
export class StatusesApi extends runtime.BaseAPI {

    /**
     * Get message or story view statuses
     */
    async getMessageViewStatusesRaw(requestParameters: GetMessageViewStatusesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StatusesList>> {
        if (requestParameters['messageID'] == null) {
            throw new runtime.RequiredError(
                'messageID',
                'Required parameter "messageID" was null or undefined when calling getMessageViewStatuses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/statuses/{MessageID}`.replace(`{${"MessageID"}}`, encodeURIComponent(String(requestParameters['messageID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusesListFromJSON(jsonValue));
    }

    /**
     * Get message or story view statuses
     */
    async getMessageViewStatuses(requestParameters: GetMessageViewStatusesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StatusesList> {
        const response = await this.getMessageViewStatusesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
