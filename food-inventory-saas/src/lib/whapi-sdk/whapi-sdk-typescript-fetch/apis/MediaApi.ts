/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MediaFilesList,
  MessageMediaFileParametersForMediaUpload,
  ResponseError,
  ResponseSuccess,
  UploadMediaResponse,
} from '../models/index';
import {
    MediaFilesListFromJSON,
    MediaFilesListToJSON,
    MessageMediaFileParametersForMediaUploadFromJSON,
    MessageMediaFileParametersForMediaUploadToJSON,
    ResponseErrorFromJSON,
    ResponseErrorToJSON,
    ResponseSuccessFromJSON,
    ResponseSuccessToJSON,
    UploadMediaResponseFromJSON,
    UploadMediaResponseToJSON,
} from '../models/index';

export interface DeleteMediaRequest {
    mediaID: string;
}

export interface GetMediaRequest {
    mediaID: string;
}

export interface GetMediaFilesRequest {
    count?: number;
    offset?: number;
    timeFrom?: number;
    timeTo?: number;
    sort?: GetMediaFilesSortEnum;
}

export interface UploadMediaRequest {
    body: Blob;
}

/**
 * 
 */
export class MediaApi extends runtime.BaseAPI {

    /**
     * Delete a file from the cloud by ID
     * Delete media
     */
    async deleteMediaRaw(requestParameters: DeleteMediaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseSuccess>> {
        if (requestParameters['mediaID'] == null) {
            throw new runtime.RequiredError(
                'mediaID',
                'Required parameter "mediaID" was null or undefined when calling deleteMedia().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/media/{MediaID}`.replace(`{${"MediaID"}}`, encodeURIComponent(String(requestParameters['mediaID']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseSuccessFromJSON(jsonValue));
    }

    /**
     * Delete a file from the cloud by ID
     * Delete media
     */
    async deleteMedia(requestParameters: DeleteMediaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseSuccess> {
        const response = await this.deleteMediaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Receive a file from the cloud by ID. [Read more about file storage period.](https://support.whapi.cloud/help-desk/receiving/file-expiration-period)
     * Get media
     */
    async getMediaRaw(requestParameters: GetMediaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['mediaID'] == null) {
            throw new runtime.RequiredError(
                'mediaID',
                'Required parameter "mediaID" was null or undefined when calling getMedia().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/media/{MediaID}`.replace(`{${"MediaID"}}`, encodeURIComponent(String(requestParameters['mediaID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Receive a file from the cloud by ID. [Read more about file storage period.](https://support.whapi.cloud/help-desk/receiving/file-expiration-period)
     * Get media
     */
    async getMedia(requestParameters: GetMediaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getMediaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method is responsible for returning all of your media files
     * Get media files
     */
    async getMediaFilesRaw(requestParameters: GetMediaFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MediaFilesList>> {
        const queryParameters: any = {};

        if (requestParameters['count'] != null) {
            queryParameters['count'] = requestParameters['count'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['timeFrom'] != null) {
            queryParameters['time_from'] = requestParameters['timeFrom'];
        }

        if (requestParameters['timeTo'] != null) {
            queryParameters['time_to'] = requestParameters['timeTo'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/media`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MediaFilesListFromJSON(jsonValue));
    }

    /**
     * This method is responsible for returning all of your media files
     * Get media files
     */
    async getMediaFiles(requestParameters: GetMediaFilesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MediaFilesList> {
        const response = await this.getMediaFilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method is used to upload a file to cloud storage. In the response, you will receive the MediaID for the uploaded file, which can be used later, for example, to send media messages. The file type are determined by the file extension. [Read more about file storage period.](https://support.whapi.cloud/help-desk/receiving/file-expiration-period)
     * Upload media
     */
    async uploadMediaRaw(requestParameters: UploadMediaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UploadMediaResponse>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling uploadMedia().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/pdf';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["token"] = await this.configuration.apiKey("token"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/media`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UploadMediaResponseFromJSON(jsonValue));
    }

    /**
     * This method is used to upload a file to cloud storage. In the response, you will receive the MediaID for the uploaded file, which can be used later, for example, to send media messages. The file type are determined by the file extension. [Read more about file storage period.](https://support.whapi.cloud/help-desk/receiving/file-expiration-period)
     * Upload media
     */
    async uploadMedia(requestParameters: UploadMediaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UploadMediaResponse> {
        const response = await this.uploadMediaRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetMediaFilesSortEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type GetMediaFilesSortEnum = typeof GetMediaFilesSortEnum[keyof typeof GetMediaFilesSortEnum];
