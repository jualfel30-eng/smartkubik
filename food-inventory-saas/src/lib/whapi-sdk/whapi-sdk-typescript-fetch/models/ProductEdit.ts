/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { GroupIconParametersMedia } from './GroupIconParametersMedia';
import {
    GroupIconParametersMediaFromJSON,
    GroupIconParametersMediaFromJSONTyped,
    GroupIconParametersMediaToJSON,
    GroupIconParametersMediaToJSONTyped,
} from './GroupIconParametersMedia';
import type { Currency } from './Currency';
import {
    CurrencyFromJSON,
    CurrencyFromJSONTyped,
    CurrencyToJSON,
    CurrencyToJSONTyped,
} from './Currency';

/**
 * 
 * @export
 * @interface ProductEdit
 */
export interface ProductEdit {
    /**
     * Product Retailer ID
     * @type {string}
     * @memberof ProductEdit
     */
    productRetailerId?: string;
    /**
     * 
     * @type {Currency}
     * @memberof ProductEdit
     */
    currency?: Currency;
    /**
     * Product images urls
     * @type {Array<GroupIconParametersMedia>}
     * @memberof ProductEdit
     */
    images: Array<GroupIconParametersMedia>;
    /**
     * Product availability
     * @type {string}
     * @memberof ProductEdit
     */
    availability?: ProductEditAvailabilityEnum;
    /**
     * Product name
     * @type {string}
     * @memberof ProductEdit
     */
    name?: string;
    /**
     * Product url
     * @type {string}
     * @memberof ProductEdit
     */
    url?: string;
    /**
     * Product description
     * @type {string}
     * @memberof ProductEdit
     */
    description?: string;
    /**
     * Product price
     * @type {number}
     * @memberof ProductEdit
     */
    price?: number;
    /**
     * Product is hidden
     * @type {boolean}
     * @memberof ProductEdit
     */
    isHidden?: boolean;
}


/**
 * @export
 */
export const ProductEditAvailabilityEnum = {
    InStock: 'in stock',
    OutOfStock: 'out of stock'
} as const;
export type ProductEditAvailabilityEnum = typeof ProductEditAvailabilityEnum[keyof typeof ProductEditAvailabilityEnum];


/**
 * Check if a given object implements the ProductEdit interface.
 */
export function instanceOfProductEdit(value: object): value is ProductEdit {
    if (!('images' in value) || value['images'] === undefined) return false;
    return true;
}

export function ProductEditFromJSON(json: any): ProductEdit {
    return ProductEditFromJSONTyped(json, false);
}

export function ProductEditFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProductEdit {
    if (json == null) {
        return json;
    }
    return {
        
        'productRetailerId': json['product_retailer_id'] == null ? undefined : json['product_retailer_id'],
        'currency': json['currency'] == null ? undefined : CurrencyFromJSON(json['currency']),
        'images': ((json['images'] as Array<any>).map(GroupIconParametersMediaFromJSON)),
        'availability': json['availability'] == null ? undefined : json['availability'],
        'name': json['name'] == null ? undefined : json['name'],
        'url': json['url'] == null ? undefined : json['url'],
        'description': json['description'] == null ? undefined : json['description'],
        'price': json['price'] == null ? undefined : json['price'],
        'isHidden': json['is_hidden'] == null ? undefined : json['is_hidden'],
    };
}

export function ProductEditToJSON(json: any): ProductEdit {
    return ProductEditToJSONTyped(json, false);
}

export function ProductEditToJSONTyped(value?: ProductEdit | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'product_retailer_id': value['productRetailerId'],
        'currency': CurrencyToJSON(value['currency']),
        'images': ((value['images'] as Array<any>).map(GroupIconParametersMediaToJSON)),
        'availability': value['availability'],
        'name': value['name'],
        'url': value['url'],
        'description': value['description'],
        'price': value['price'],
        'is_hidden': value['isHidden'],
    };
}

