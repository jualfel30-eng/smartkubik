/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface MessageContentLiveLocation
 */
export interface MessageContentLiveLocation {
    /**
     * Is view once
     * @type {boolean}
     * @memberof MessageContentLiveLocation
     */
    viewOnce?: boolean;
    /**
     * Latitude of live location being sent
     * @type {number}
     * @memberof MessageContentLiveLocation
     */
    latitude: number;
    /**
     * Longitude of live location being sent
     * @type {number}
     * @memberof MessageContentLiveLocation
     */
    longitude: number;
    /**
     * Accuracy of the live location in meters
     * @type {number}
     * @memberof MessageContentLiveLocation
     */
    accuracy?: number;
    /**
     * Speed of the live location in meters per second
     * @type {number}
     * @memberof MessageContentLiveLocation
     */
    speed?: number;
    /**
     * Degrees clockwise from true north
     * @type {number}
     * @memberof MessageContentLiveLocation
     */
    degrees?: number;
    /**
     * Optional. Text caption under the live location
     * @type {string}
     * @memberof MessageContentLiveLocation
     */
    caption?: string;
    /**
     * Optional. Sequence number of the live location for event tracking
     * @type {number}
     * @memberof MessageContentLiveLocation
     */
    sequenceNumber?: number;
    /**
     * Optional. Time offset of the live location
     * @type {number}
     * @memberof MessageContentLiveLocation
     */
    timeOffset?: number;
    /**
     * Optional. Base64 encoded preview of the media. In JPEG format.
     * @type {string}
     * @memberof MessageContentLiveLocation
     */
    preview?: string;
}

/**
 * Check if a given object implements the MessageContentLiveLocation interface.
 */
export function instanceOfMessageContentLiveLocation(value: object): value is MessageContentLiveLocation {
    if (!('latitude' in value) || value['latitude'] === undefined) return false;
    if (!('longitude' in value) || value['longitude'] === undefined) return false;
    return true;
}

export function MessageContentLiveLocationFromJSON(json: any): MessageContentLiveLocation {
    return MessageContentLiveLocationFromJSONTyped(json, false);
}

export function MessageContentLiveLocationFromJSONTyped(json: any, ignoreDiscriminator: boolean): MessageContentLiveLocation {
    if (json == null) {
        return json;
    }
    return {
        
        'viewOnce': json['view_once'] == null ? undefined : json['view_once'],
        'latitude': json['latitude'],
        'longitude': json['longitude'],
        'accuracy': json['accuracy'] == null ? undefined : json['accuracy'],
        'speed': json['speed'] == null ? undefined : json['speed'],
        'degrees': json['degrees'] == null ? undefined : json['degrees'],
        'caption': json['caption'] == null ? undefined : json['caption'],
        'sequenceNumber': json['sequence_number'] == null ? undefined : json['sequence_number'],
        'timeOffset': json['time_offset'] == null ? undefined : json['time_offset'],
        'preview': json['preview'] == null ? undefined : json['preview'],
    };
}

export function MessageContentLiveLocationToJSON(json: any): MessageContentLiveLocation {
    return MessageContentLiveLocationToJSONTyped(json, false);
}

export function MessageContentLiveLocationToJSONTyped(value?: MessageContentLiveLocation | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'view_once': value['viewOnce'],
        'latitude': value['latitude'],
        'longitude': value['longitude'],
        'accuracy': value['accuracy'],
        'speed': value['speed'],
        'degrees': value['degrees'],
        'caption': value['caption'],
        'sequence_number': value['sequenceNumber'],
        'time_offset': value['timeOffset'],
        'preview': value['preview'],
    };
}

