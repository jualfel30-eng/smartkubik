/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MediaSettings } from './MediaSettings';
import {
    MediaSettingsFromJSON,
    MediaSettingsFromJSONTyped,
    MediaSettingsToJSON,
    MediaSettingsToJSONTyped,
} from './MediaSettings';
import type { Webhook } from './Webhook';
import {
    WebhookFromJSON,
    WebhookFromJSONTyped,
    WebhookToJSON,
    WebhookToJSONTyped,
} from './Webhook';

/**
 * 
 * @export
 * @interface Settings
 */
export interface Settings {
    /**
     * Backoff delay for a failed callback in milliseconds This setting is used to configure the amount of time the backoff delays before retrying a failed callback. The backoff delay increases linearly by this value each time a callback fails to get a HTTPS 200 OK response. The backoff delay is capped by the max_callback_backoff_delay_ms setting.
     * @type {number}
     * @memberof Settings
     */
    callbackBackoffDelayMs?: number;
    /**
     * Maximum delay for a failed callback in milliseconds
     * @type {number}
     * @memberof Settings
     */
    maxCallbackBackoffDelayMs?: number;
    /**
     * Stores callbacks on disk until they are successfully acknowledged by the Webhook or not. Restart required.
     * @type {boolean}
     * @memberof Settings
     */
    callbackPersist?: boolean;
    /**
     * 
     * @type {MediaSettings}
     * @memberof Settings
     */
    media?: MediaSettings;
    /**
     * 
     * @type {Array<Webhook>}
     * @memberof Settings
     */
    webhooks?: Array<Webhook>;
    /**
     * Use your Socks5 proxy if your account activity arouses suspicion from WhatsApp. This can help maintain anonymity and ensure smooth operation.
     * @type {string}
     * @memberof Settings
     */
    proxy?: string;
    /**
     * Service proxy for mobile authorization.
     * @type {string}
     * @memberof Settings
     */
    mobileProxy?: string;
    /**
     * When true, API will not send online status to the server on connection. This will allow you to receive push notifications to devices connected to the number. Working after reconnect.
     * @type {boolean}
     * @memberof Settings
     */
    offlineMode?: boolean;
    /**
     * When true, all messages will be cached after the connection. If false, old messages will selectively not be cached, allowing large accounts to run faster. Working after reconnect.
     * @type {boolean}
     * @memberof Settings
     */
    fullHistory?: boolean;
}

/**
 * Check if a given object implements the Settings interface.
 */
export function instanceOfSettings(value: object): value is Settings {
    return true;
}

export function SettingsFromJSON(json: any): Settings {
    return SettingsFromJSONTyped(json, false);
}

export function SettingsFromJSONTyped(json: any, ignoreDiscriminator: boolean): Settings {
    if (json == null) {
        return json;
    }
    return {
        
        'callbackBackoffDelayMs': json['callback_backoff_delay_ms'] == null ? undefined : json['callback_backoff_delay_ms'],
        'maxCallbackBackoffDelayMs': json['max_callback_backoff_delay_ms'] == null ? undefined : json['max_callback_backoff_delay_ms'],
        'callbackPersist': json['callback_persist'] == null ? undefined : json['callback_persist'],
        'media': json['media'] == null ? undefined : MediaSettingsFromJSON(json['media']),
        'webhooks': json['webhooks'] == null ? undefined : ((json['webhooks'] as Array<any>).map(WebhookFromJSON)),
        'proxy': json['proxy'] == null ? undefined : json['proxy'],
        'mobileProxy': json['mobile_proxy'] == null ? undefined : json['mobile_proxy'],
        'offlineMode': json['offline_mode'] == null ? undefined : json['offline_mode'],
        'fullHistory': json['full_history'] == null ? undefined : json['full_history'],
    };
}

export function SettingsToJSON(json: any): Settings {
    return SettingsToJSONTyped(json, false);
}

export function SettingsToJSONTyped(value?: Settings | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'callback_backoff_delay_ms': value['callbackBackoffDelayMs'],
        'max_callback_backoff_delay_ms': value['maxCallbackBackoffDelayMs'],
        'callback_persist': value['callbackPersist'],
        'media': MediaSettingsToJSON(value['media']),
        'webhooks': value['webhooks'] == null ? undefined : ((value['webhooks'] as Array<any>).map(WebhookToJSON)),
        'proxy': value['proxy'],
        'mobile_proxy': value['mobileProxy'],
        'offline_mode': value['offlineMode'],
        'full_history': value['fullHistory'],
    };
}

