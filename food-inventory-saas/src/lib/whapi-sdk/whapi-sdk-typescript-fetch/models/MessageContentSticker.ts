/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface MessageContentSticker
 */
export interface MessageContentSticker {
    /**
     * Media ID
     * @type {string}
     * @memberof MessageContentSticker
     */
    id: string;
    /**
     * Optional. Link to media
     * @type {string}
     * @memberof MessageContentSticker
     */
    link?: string;
    /**
     * Mime type of media
     * @type {string}
     * @memberof MessageContentSticker
     */
    mimeType: string;
    /**
     * File size in bytes
     * @type {number}
     * @memberof MessageContentSticker
     */
    fileSize: number;
    /**
     * Optional. File name
     * @type {string}
     * @memberof MessageContentSticker
     */
    fileName?: string;
    /**
     * Checksum
     * @type {string}
     * @memberof MessageContentSticker
     */
    sha256?: string;
    /**
     * Created at
     * @type {number}
     * @memberof MessageContentSticker
     */
    timestamp?: number;
    /**
     * Optional. For stickers, this field indicates whether the sticker is animated.
     * @type {boolean}
     * @memberof MessageContentSticker
     */
    animated?: boolean;
    /**
     * Width of the media in pixels
     * @type {number}
     * @memberof MessageContentSticker
     */
    width?: number;
    /**
     * Height of the media in pixels
     * @type {number}
     * @memberof MessageContentSticker
     */
    height?: number;
    /**
     * Is view once
     * @type {boolean}
     * @memberof MessageContentSticker
     */
    viewOnce?: boolean;
    /**
     * Optional. Base64 encoded preview of the media. In PNG format.
     * @type {string}
     * @memberof MessageContentSticker
     */
    preview?: string;
}

/**
 * Check if a given object implements the MessageContentSticker interface.
 */
export function instanceOfMessageContentSticker(value: object): value is MessageContentSticker {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('mimeType' in value) || value['mimeType'] === undefined) return false;
    if (!('fileSize' in value) || value['fileSize'] === undefined) return false;
    return true;
}

export function MessageContentStickerFromJSON(json: any): MessageContentSticker {
    return MessageContentStickerFromJSONTyped(json, false);
}

export function MessageContentStickerFromJSONTyped(json: any, ignoreDiscriminator: boolean): MessageContentSticker {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'link': json['link'] == null ? undefined : json['link'],
        'mimeType': json['mime_type'],
        'fileSize': json['file_size'],
        'fileName': json['file_name'] == null ? undefined : json['file_name'],
        'sha256': json['sha256'] == null ? undefined : json['sha256'],
        'timestamp': json['timestamp'] == null ? undefined : json['timestamp'],
        'animated': json['animated'] == null ? undefined : json['animated'],
        'width': json['width'] == null ? undefined : json['width'],
        'height': json['height'] == null ? undefined : json['height'],
        'viewOnce': json['view_once'] == null ? undefined : json['view_once'],
        'preview': json['preview'] == null ? undefined : json['preview'],
    };
}

export function MessageContentStickerToJSON(json: any): MessageContentSticker {
    return MessageContentStickerToJSONTyped(json, false);
}

export function MessageContentStickerToJSONTyped(value?: MessageContentSticker | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'link': value['link'],
        'mime_type': value['mimeType'],
        'file_size': value['fileSize'],
        'file_name': value['fileName'],
        'sha256': value['sha256'],
        'timestamp': value['timestamp'],
        'animated': value['animated'],
        'width': value['width'],
        'height': value['height'],
        'view_once': value['viewOnce'],
        'preview': value['preview'],
    };
}

