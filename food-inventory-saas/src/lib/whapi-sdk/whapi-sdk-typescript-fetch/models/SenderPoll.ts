/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SenderPoll
 */
export interface SenderPoll {
    /**
     * Use the phone number or [Chat ID](https://support.whapi.cloud/help-desk/faq/chat-id.-what-is-it-and-how-to-get-it) of the contact/group/channel to which you want to send the message. Use [Get groups](https://whapi.readme.io/reference/getgroups) to get the group ID.
     * @type {string}
     * @memberof SenderPoll
     */
    to: string;
    /**
     * Message ID of the message to be quoted
     * @type {string}
     * @memberof SenderPoll
     */
    quoted?: string;
    /**
     * Time in seconds for the message to be deleted. The Disappearing messages setting should be enabled in the chat where you are sending this message.
     * @type {number}
     * @memberof SenderPoll
     */
    ephemeral?: number;
    /**
     * Message ID of the message to be edited
     * @type {string}
     * @memberof SenderPoll
     */
    edit?: string;
    /**
     * Title of poll
     * @type {string}
     * @memberof SenderPoll
     */
    title: string;
    /**
     * Options of poll
     * @type {Array<string>}
     * @memberof SenderPoll
     */
    options: Array<string>;
    /**
     * Number of selectable options in poll (1 - can choose only one option, 0 - any number of options)
     * @type {number}
     * @memberof SenderPoll
     */
    count?: number;
    /**
     * Is view once
     * @type {boolean}
     * @memberof SenderPoll
     */
    viewOnce?: boolean;
}

/**
 * Check if a given object implements the SenderPoll interface.
 */
export function instanceOfSenderPoll(value: object): value is SenderPoll {
    if (!('to' in value) || value['to'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('options' in value) || value['options'] === undefined) return false;
    return true;
}

export function SenderPollFromJSON(json: any): SenderPoll {
    return SenderPollFromJSONTyped(json, false);
}

export function SenderPollFromJSONTyped(json: any, ignoreDiscriminator: boolean): SenderPoll {
    if (json == null) {
        return json;
    }
    return {
        
        'to': json['to'],
        'quoted': json['quoted'] == null ? undefined : json['quoted'],
        'ephemeral': json['ephemeral'] == null ? undefined : json['ephemeral'],
        'edit': json['edit'] == null ? undefined : json['edit'],
        'title': json['title'],
        'options': json['options'],
        'count': json['count'] == null ? undefined : json['count'],
        'viewOnce': json['view_once'] == null ? undefined : json['view_once'],
    };
}

export function SenderPollToJSON(json: any): SenderPoll {
    return SenderPollToJSONTyped(json, false);
}

export function SenderPollToJSONTyped(value?: SenderPoll | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'to': value['to'],
        'quoted': value['quoted'],
        'ephemeral': value['ephemeral'],
        'edit': value['edit'],
        'title': value['title'],
        'options': value['options'],
        'count': value['count'],
        'view_once': value['viewOnce'],
    };
}

