/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MessageContentButtonsButtonsInner } from './MessageContentButtonsButtonsInner';
import {
    MessageContentButtonsButtonsInnerFromJSON,
    MessageContentButtonsButtonsInnerFromJSONTyped,
    MessageContentButtonsButtonsInnerToJSON,
    MessageContentButtonsButtonsInnerToJSONTyped,
} from './MessageContentButtonsButtonsInner';

/**
 * 
 * @export
 * @interface MessageContentButtons
 */
export interface MessageContentButtons {
    /**
     * 
     * @type {string}
     * @memberof MessageContentButtons
     */
    text?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageContentButtons
     */
    footer?: string;
    /**
     * 
     * @type {Array<MessageContentButtonsButtonsInner>}
     * @memberof MessageContentButtons
     */
    buttons?: Array<MessageContentButtonsButtonsInner>;
}

/**
 * Check if a given object implements the MessageContentButtons interface.
 */
export function instanceOfMessageContentButtons(value: object): value is MessageContentButtons {
    return true;
}

export function MessageContentButtonsFromJSON(json: any): MessageContentButtons {
    return MessageContentButtonsFromJSONTyped(json, false);
}

export function MessageContentButtonsFromJSONTyped(json: any, ignoreDiscriminator: boolean): MessageContentButtons {
    if (json == null) {
        return json;
    }
    return {
        
        'text': json['text'] == null ? undefined : json['text'],
        'footer': json['footer'] == null ? undefined : json['footer'],
        'buttons': json['buttons'] == null ? undefined : ((json['buttons'] as Array<any>).map(MessageContentButtonsButtonsInnerFromJSON)),
    };
}

export function MessageContentButtonsToJSON(json: any): MessageContentButtons {
    return MessageContentButtonsToJSONTyped(json, false);
}

export function MessageContentButtonsToJSONTyped(value?: MessageContentButtons | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'text': value['text'],
        'footer': value['footer'],
        'buttons': value['buttons'] == null ? undefined : ((value['buttons'] as Array<any>).map(MessageContentButtonsButtonsInnerToJSON)),
    };
}

