/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Message } from './Message';
import {
    MessageFromJSON,
    MessageFromJSONTyped,
    MessageToJSON,
    MessageToJSONTyped,
} from './Message';
import type { Label } from './Label';
import {
    LabelFromJSON,
    LabelFromJSONTyped,
    LabelToJSON,
    LabelToJSONTyped,
} from './Label';

/**
 * 
 * @export
 * @interface Chat
 */
export interface Chat {
    /**
     * Chat ID
     * @type {string}
     * @memberof Chat
     */
    id: string;
    /**
     * Chat name
     * @type {string}
     * @memberof Chat
     */
    name?: string;
    /**
     * Chat type
     * @type {string}
     * @memberof Chat
     */
    type: ChatTypeEnum;
    /**
     * Chat timestamp
     * @type {number}
     * @memberof Chat
     */
    timestamp?: number;
    /**
     * Chat picture URL
     * @type {string}
     * @memberof Chat
     */
    chatPic?: string;
    /**
     * Chat full picture URL
     * @type {string}
     * @memberof Chat
     */
    chatPicFull?: string;
    /**
     * Is chat pinned
     * @type {boolean}
     * @memberof Chat
     */
    pin?: boolean;
    /**
     * Is chat muted
     * @type {boolean}
     * @memberof Chat
     */
    mute?: boolean;
    /**
     * Chat mute until
     * @type {number}
     * @memberof Chat
     */
    muteUntil?: number;
    /**
     * Is chat archived
     * @type {boolean}
     * @memberof Chat
     */
    archive?: boolean;
    /**
     * Unread messages count
     * @type {number}
     * @memberof Chat
     */
    unread?: number;
    /**
     * Is chat unread mention
     * @type {boolean}
     * @memberof Chat
     */
    unreadMention?: boolean;
    /**
     * Is chat read only
     * @type {boolean}
     * @memberof Chat
     */
    readOnly?: boolean;
    /**
     * Is chat not spam
     * @type {boolean}
     * @memberof Chat
     */
    notSpam?: boolean;
    /**
     * 
     * @type {Message}
     * @memberof Chat
     */
    lastMessage?: Message;
    /**
     * Labels associated with chat
     * @type {Array<Label>}
     * @memberof Chat
     */
    labels?: Array<Label>;
}


/**
 * @export
 */
export const ChatTypeEnum = {
    Group: 'group',
    Contact: 'contact',
    Broadcast: 'broadcast',
    Newsletter: 'newsletter',
    Unknown: 'unknown'
} as const;
export type ChatTypeEnum = typeof ChatTypeEnum[keyof typeof ChatTypeEnum];


/**
 * Check if a given object implements the Chat interface.
 */
export function instanceOfChat(value: object): value is Chat {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function ChatFromJSON(json: any): Chat {
    return ChatFromJSONTyped(json, false);
}

export function ChatFromJSONTyped(json: any, ignoreDiscriminator: boolean): Chat {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'] == null ? undefined : json['name'],
        'type': json['type'],
        'timestamp': json['timestamp'] == null ? undefined : json['timestamp'],
        'chatPic': json['chat_pic'] == null ? undefined : json['chat_pic'],
        'chatPicFull': json['chat_pic_full'] == null ? undefined : json['chat_pic_full'],
        'pin': json['pin'] == null ? undefined : json['pin'],
        'mute': json['mute'] == null ? undefined : json['mute'],
        'muteUntil': json['mute_until'] == null ? undefined : json['mute_until'],
        'archive': json['archive'] == null ? undefined : json['archive'],
        'unread': json['unread'] == null ? undefined : json['unread'],
        'unreadMention': json['unread_mention'] == null ? undefined : json['unread_mention'],
        'readOnly': json['read_only'] == null ? undefined : json['read_only'],
        'notSpam': json['not_spam'] == null ? undefined : json['not_spam'],
        'lastMessage': json['last_message'] == null ? undefined : MessageFromJSON(json['last_message']),
        'labels': json['labels'] == null ? undefined : ((json['labels'] as Array<any>).map(LabelFromJSON)),
    };
}

export function ChatToJSON(json: any): Chat {
    return ChatToJSONTyped(json, false);
}

export function ChatToJSONTyped(value?: Chat | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'name': value['name'],
        'type': value['type'],
        'timestamp': value['timestamp'],
        'chat_pic': value['chatPic'],
        'chat_pic_full': value['chatPicFull'],
        'pin': value['pin'],
        'mute': value['mute'],
        'mute_until': value['muteUntil'],
        'archive': value['archive'],
        'unread': value['unread'],
        'unread_mention': value['unreadMention'],
        'read_only': value['readOnly'],
        'not_spam': value['notSpam'],
        'last_message': MessageToJSON(value['lastMessage']),
        'labels': value['labels'] == null ? undefined : ((value['labels'] as Array<any>).map(LabelToJSON)),
    };
}

