/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface MediaSettings
 */
export interface MediaSettings {
    /**
     * An array specifying which types of media to automatically download.
     * @type {Array<string>}
     * @memberof MediaSettings
     */
    autoDownload?: Array<MediaSettingsAutoDownloadEnum>;
    /**
     * Set to true if you need to get avatars after channel authorization
     * @type {boolean}
     * @memberof MediaSettings
     */
    initAvatars?: boolean;
}


/**
 * @export
 */
export const MediaSettingsAutoDownloadEnum = {
    Image: 'image',
    Audio: 'audio',
    Voice: 'voice',
    Video: 'video',
    Document: 'document',
    Sticker: 'sticker'
} as const;
export type MediaSettingsAutoDownloadEnum = typeof MediaSettingsAutoDownloadEnum[keyof typeof MediaSettingsAutoDownloadEnum];


/**
 * Check if a given object implements the MediaSettings interface.
 */
export function instanceOfMediaSettings(value: object): value is MediaSettings {
    return true;
}

export function MediaSettingsFromJSON(json: any): MediaSettings {
    return MediaSettingsFromJSONTyped(json, false);
}

export function MediaSettingsFromJSONTyped(json: any, ignoreDiscriminator: boolean): MediaSettings {
    if (json == null) {
        return json;
    }
    return {
        
        'autoDownload': json['auto_download'] == null ? undefined : json['auto_download'],
        'initAvatars': json['init_avatars'] == null ? undefined : json['init_avatars'],
    };
}

export function MediaSettingsToJSON(json: any): MediaSettings {
    return MediaSettingsToJSONTyped(json, false);
}

export function MediaSettingsToJSONTyped(value?: MediaSettings | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'auto_download': value['autoDownload'],
        'init_avatars': value['initAvatars'],
    };
}

