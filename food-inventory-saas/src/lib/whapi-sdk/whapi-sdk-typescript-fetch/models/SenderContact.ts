/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SenderContact
 */
export interface SenderContact {
    /**
     * Use the phone number or [Chat ID](https://support.whapi.cloud/help-desk/faq/chat-id.-what-is-it-and-how-to-get-it) of the contact/group/channel to which you want to send the message. Use [Get groups](https://whapi.readme.io/reference/getgroups) to get the group ID.
     * @type {string}
     * @memberof SenderContact
     */
    to: string;
    /**
     * Message ID of the message to be quoted
     * @type {string}
     * @memberof SenderContact
     */
    quoted?: string;
    /**
     * Time in seconds for the message to be deleted. The Disappearing messages setting should be enabled in the chat where you are sending this message.
     * @type {number}
     * @memberof SenderContact
     */
    ephemeral?: number;
    /**
     * Message ID of the message to be edited
     * @type {string}
     * @memberof SenderContact
     */
    edit?: string;
    /**
     * Name of contact
     * @type {string}
     * @memberof SenderContact
     */
    name: string;
    /**
     * Vcard of contact
     * @type {string}
     * @memberof SenderContact
     */
    vcard: string;
    /**
     * Is view once
     * @type {boolean}
     * @memberof SenderContact
     */
    viewOnce?: boolean;
}

/**
 * Check if a given object implements the SenderContact interface.
 */
export function instanceOfSenderContact(value: object): value is SenderContact {
    if (!('to' in value) || value['to'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('vcard' in value) || value['vcard'] === undefined) return false;
    return true;
}

export function SenderContactFromJSON(json: any): SenderContact {
    return SenderContactFromJSONTyped(json, false);
}

export function SenderContactFromJSONTyped(json: any, ignoreDiscriminator: boolean): SenderContact {
    if (json == null) {
        return json;
    }
    return {
        
        'to': json['to'],
        'quoted': json['quoted'] == null ? undefined : json['quoted'],
        'ephemeral': json['ephemeral'] == null ? undefined : json['ephemeral'],
        'edit': json['edit'] == null ? undefined : json['edit'],
        'name': json['name'],
        'vcard': json['vcard'],
        'viewOnce': json['view_once'] == null ? undefined : json['view_once'],
    };
}

export function SenderContactToJSON(json: any): SenderContact {
    return SenderContactToJSONTyped(json, false);
}

export function SenderContactToJSONTyped(value?: SenderContact | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'to': value['to'],
        'quoted': value['quoted'],
        'ephemeral': value['ephemeral'],
        'edit': value['edit'],
        'name': value['name'],
        'vcard': value['vcard'],
        'view_once': value['viewOnce'],
    };
}

