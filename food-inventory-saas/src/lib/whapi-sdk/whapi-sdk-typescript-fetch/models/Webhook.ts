/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Event } from './Event';
import {
    EventFromJSON,
    EventFromJSONTyped,
    EventToJSON,
    EventToJSONTyped,
} from './Event';

/**
 * 
 * @export
 * @interface Webhook
 */
export interface Webhook {
    /**
     * Additional headers for webhook. Max 5 headers. <br/>Example: <br/>"Authorization - Bearer token" <br/>"Content-Type - application/json" <br/>"X-Header - value"
     * @type {{ [key: string]: string; }}
     * @memberof Webhook
     */
    headers?: { [key: string]: string; };
    /**
     * Inbound and outbound notifications are routed to this URL.
     * @type {string}
     * @memberof Webhook
     */
    url: string;
    /**
     * Request method for sending hook.
     * @type {string}
     * @memberof Webhook
     */
    mode?: WebhookModeEnum;
    /**
     * Tracked events. <br/>"messages" - got new message/got offline messages/edit message/delete message;<br/>"statuses" - got message status/got offline message status;<br/>"chats" - got chat/chat update/chat remove;<br/>"contacts" - contact update;<br/>"presences" - got presences<br/>"groups" - new group/participants update/group update;<br/>"calls" - got call events<br/>labels" - new label/remove label<br/>"users" - login user/logout user<br/>"channel" - instance status changed/QR-code update<br/>"service" - special notifications<br/><br/>"message", "ack", "chat", "status" - is deprecated, use "messages", "statuses", "chats", "channel" instead.
     * @type {Array<Event>}
     * @memberof Webhook
     */
    events?: Array<Event>;
}


/**
 * @export
 */
export const WebhookModeEnum = {
    Body: 'body',
    Path: 'path',
    Method: 'method'
} as const;
export type WebhookModeEnum = typeof WebhookModeEnum[keyof typeof WebhookModeEnum];


/**
 * Check if a given object implements the Webhook interface.
 */
export function instanceOfWebhook(value: object): value is Webhook {
    if (!('url' in value) || value['url'] === undefined) return false;
    return true;
}

export function WebhookFromJSON(json: any): Webhook {
    return WebhookFromJSONTyped(json, false);
}

export function WebhookFromJSONTyped(json: any, ignoreDiscriminator: boolean): Webhook {
    if (json == null) {
        return json;
    }
    return {
        
        'headers': json['headers'] == null ? undefined : json['headers'],
        'url': json['url'],
        'mode': json['mode'] == null ? undefined : json['mode'],
        'events': json['events'] == null ? undefined : ((json['events'] as Array<any>).map(EventFromJSON)),
    };
}

export function WebhookToJSON(json: any): Webhook {
    return WebhookToJSONTyped(json, false);
}

export function WebhookToJSONTyped(value?: Webhook | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'headers': value['headers'],
        'url': value['url'],
        'mode': value['mode'],
        'events': value['events'] == null ? undefined : ((value['events'] as Array<any>).map(EventToJSON)),
    };
}

