/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ChangeCommunitySettingsRequest
 */
export interface ChangeCommunitySettingsRequest {
    /**
     * 
     * @type {string}
     * @memberof ChangeCommunitySettingsRequest
     */
    setting: ChangeCommunitySettingsRequestSettingEnum;
    /**
     * 
     * @type {string}
     * @memberof ChangeCommunitySettingsRequest
     */
    policy: ChangeCommunitySettingsRequestPolicyEnum;
}


/**
 * @export
 */
export const ChangeCommunitySettingsRequestSettingEnum = {
    ModifyGroups: 'modify_groups',
    MemberAddMode: 'member_add_mode'
} as const;
export type ChangeCommunitySettingsRequestSettingEnum = typeof ChangeCommunitySettingsRequestSettingEnum[keyof typeof ChangeCommunitySettingsRequestSettingEnum];

/**
 * @export
 */
export const ChangeCommunitySettingsRequestPolicyEnum = {
    Anyone: 'anyone',
    Admins: 'admins'
} as const;
export type ChangeCommunitySettingsRequestPolicyEnum = typeof ChangeCommunitySettingsRequestPolicyEnum[keyof typeof ChangeCommunitySettingsRequestPolicyEnum];


/**
 * Check if a given object implements the ChangeCommunitySettingsRequest interface.
 */
export function instanceOfChangeCommunitySettingsRequest(value: object): value is ChangeCommunitySettingsRequest {
    if (!('setting' in value) || value['setting'] === undefined) return false;
    if (!('policy' in value) || value['policy'] === undefined) return false;
    return true;
}

export function ChangeCommunitySettingsRequestFromJSON(json: any): ChangeCommunitySettingsRequest {
    return ChangeCommunitySettingsRequestFromJSONTyped(json, false);
}

export function ChangeCommunitySettingsRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChangeCommunitySettingsRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'setting': json['setting'],
        'policy': json['policy'],
    };
}

export function ChangeCommunitySettingsRequestToJSON(json: any): ChangeCommunitySettingsRequest {
    return ChangeCommunitySettingsRequestToJSONTyped(json, false);
}

export function ChangeCommunitySettingsRequestToJSONTyped(value?: ChangeCommunitySettingsRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'setting': value['setting'],
        'policy': value['policy'],
    };
}

