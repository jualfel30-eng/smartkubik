/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SenderMedia
 */
export interface SenderMedia {
    /**
     * Use the phone number or [Chat ID](https://support.whapi.cloud/help-desk/faq/chat-id.-what-is-it-and-how-to-get-it) of the contact/group/channel to which you want to send the message. Use [Get groups](https://whapi.readme.io/reference/getgroups) to get the group ID.
     * @type {string}
     * @memberof SenderMedia
     */
    to: string;
    /**
     * Message ID of the message to be quoted
     * @type {string}
     * @memberof SenderMedia
     */
    quoted?: string;
    /**
     * Time in seconds for the message to be deleted. The Disappearing messages setting should be enabled in the chat where you are sending this message.
     * @type {number}
     * @memberof SenderMedia
     */
    ephemeral?: number;
    /**
     * Message ID of the message to be edited
     * @type {string}
     * @memberof SenderMedia
     */
    edit?: string;
    /**
     * Width of the media in pixels
     * @type {number}
     * @memberof SenderMedia
     */
    width?: number;
    /**
     * Height of the media in pixels
     * @type {number}
     * @memberof SenderMedia
     */
    height?: number;
    /**
     * The numbers of the mentioned users
     * @type {Array<string>}
     * @memberof SenderMedia
     */
    mentions?: Array<string>;
    /**
     * Is view once
     * @type {boolean}
     * @memberof SenderMedia
     */
    viewOnce?: boolean;
    /**
     * Optional. Text caption under the document.
     * @type {string}
     * @memberof SenderMedia
     */
    caption?: string;
    /**
     * Optional. Base64 encoded preview of the media. In JPEG format.
     * @type {string}
     * @memberof SenderMedia
     */
    preview?: string;
    /**
     * Optional. This field indicates whether the GIF should be played automatically when the message is received.
     * @type {boolean}
     * @memberof SenderMedia
     */
    autoplay?: boolean;
    /**
     * Optional. For stickers, this field indicates whether the sticker is animated.
     * @type {boolean}
     * @memberof SenderMedia
     */
    animated?: boolean;
    /**
     * Optional. File name
     * @type {string}
     * @memberof SenderMedia
     */
    filename?: string;
    /**
     * Optional. For audio files, this field indicates the duration of the audio file in seconds.
     * @type {number}
     * @memberof SenderMedia
     */
    seconds?: number;
    /**
     * Time in seconds to simulate recording voice
     * @type {number}
     * @memberof SenderMedia
     */
    recordingTime?: number;
}

/**
 * Check if a given object implements the SenderMedia interface.
 */
export function instanceOfSenderMedia(value: object): value is SenderMedia {
    if (!('to' in value) || value['to'] === undefined) return false;
    return true;
}

export function SenderMediaFromJSON(json: any): SenderMedia {
    return SenderMediaFromJSONTyped(json, false);
}

export function SenderMediaFromJSONTyped(json: any, ignoreDiscriminator: boolean): SenderMedia {
    if (json == null) {
        return json;
    }
    return {
        
        'to': json['to'],
        'quoted': json['quoted'] == null ? undefined : json['quoted'],
        'ephemeral': json['ephemeral'] == null ? undefined : json['ephemeral'],
        'edit': json['edit'] == null ? undefined : json['edit'],
        'width': json['width'] == null ? undefined : json['width'],
        'height': json['height'] == null ? undefined : json['height'],
        'mentions': json['mentions'] == null ? undefined : json['mentions'],
        'viewOnce': json['view_once'] == null ? undefined : json['view_once'],
        'caption': json['caption'] == null ? undefined : json['caption'],
        'preview': json['preview'] == null ? undefined : json['preview'],
        'autoplay': json['autoplay'] == null ? undefined : json['autoplay'],
        'animated': json['animated'] == null ? undefined : json['animated'],
        'filename': json['filename'] == null ? undefined : json['filename'],
        'seconds': json['seconds'] == null ? undefined : json['seconds'],
        'recordingTime': json['recording_time'] == null ? undefined : json['recording_time'],
    };
}

export function SenderMediaToJSON(json: any): SenderMedia {
    return SenderMediaToJSONTyped(json, false);
}

export function SenderMediaToJSONTyped(value?: SenderMedia | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'to': value['to'],
        'quoted': value['quoted'],
        'ephemeral': value['ephemeral'],
        'edit': value['edit'],
        'width': value['width'],
        'height': value['height'],
        'mentions': value['mentions'],
        'view_once': value['viewOnce'],
        'caption': value['caption'],
        'preview': value['preview'],
        'autoplay': value['autoplay'],
        'animated': value['animated'],
        'filename': value['filename'],
        'seconds': value['seconds'],
        'recording_time': value['recordingTime'],
    };
}

