/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface MessageContentLocation
 */
export interface MessageContentLocation {
    /**
     * Is view once
     * @type {boolean}
     * @memberof MessageContentLocation
     */
    viewOnce?: boolean;
    /**
     * Latitude of location being sent
     * @type {number}
     * @memberof MessageContentLocation
     */
    latitude: number;
    /**
     * Longitude of location being sent
     * @type {number}
     * @memberof MessageContentLocation
     */
    longitude: number;
    /**
     * Address of the location
     * @type {string}
     * @memberof MessageContentLocation
     */
    address?: string;
    /**
     * Name of the location
     * @type {string}
     * @memberof MessageContentLocation
     */
    name?: string;
    /**
     * URL for the website where the user downloaded the location information
     * @type {string}
     * @memberof MessageContentLocation
     */
    url?: string;
    /**
     * Optional. Base64 encoded preview of the media. In JPEG format.
     * @type {string}
     * @memberof MessageContentLocation
     */
    preview?: string;
    /**
     * Accuracy of the location in meters
     * @type {number}
     * @memberof MessageContentLocation
     */
    accuracy?: number;
    /**
     * Speed of the location in meters per second
     * @type {number}
     * @memberof MessageContentLocation
     */
    speed?: number;
    /**
     * Degrees clockwise from true north
     * @type {number}
     * @memberof MessageContentLocation
     */
    degrees?: number;
    /**
     * Optional. Comment for the location
     * @type {string}
     * @memberof MessageContentLocation
     */
    comment?: string;
}

/**
 * Check if a given object implements the MessageContentLocation interface.
 */
export function instanceOfMessageContentLocation(value: object): value is MessageContentLocation {
    if (!('latitude' in value) || value['latitude'] === undefined) return false;
    if (!('longitude' in value) || value['longitude'] === undefined) return false;
    return true;
}

export function MessageContentLocationFromJSON(json: any): MessageContentLocation {
    return MessageContentLocationFromJSONTyped(json, false);
}

export function MessageContentLocationFromJSONTyped(json: any, ignoreDiscriminator: boolean): MessageContentLocation {
    if (json == null) {
        return json;
    }
    return {
        
        'viewOnce': json['view_once'] == null ? undefined : json['view_once'],
        'latitude': json['latitude'],
        'longitude': json['longitude'],
        'address': json['address'] == null ? undefined : json['address'],
        'name': json['name'] == null ? undefined : json['name'],
        'url': json['url'] == null ? undefined : json['url'],
        'preview': json['preview'] == null ? undefined : json['preview'],
        'accuracy': json['accuracy'] == null ? undefined : json['accuracy'],
        'speed': json['speed'] == null ? undefined : json['speed'],
        'degrees': json['degrees'] == null ? undefined : json['degrees'],
        'comment': json['comment'] == null ? undefined : json['comment'],
    };
}

export function MessageContentLocationToJSON(json: any): MessageContentLocation {
    return MessageContentLocationToJSONTyped(json, false);
}

export function MessageContentLocationToJSONTyped(value?: MessageContentLocation | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'view_once': value['viewOnce'],
        'latitude': value['latitude'],
        'longitude': value['longitude'],
        'address': value['address'],
        'name': value['name'],
        'url': value['url'],
        'preview': value['preview'],
        'accuracy': value['accuracy'],
        'speed': value['speed'],
        'degrees': value['degrees'],
        'comment': value['comment'],
    };
}

