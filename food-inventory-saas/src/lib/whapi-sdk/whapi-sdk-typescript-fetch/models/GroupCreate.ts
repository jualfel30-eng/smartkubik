/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Participant } from './Participant';
import {
    ParticipantFromJSON,
    ParticipantFromJSONTyped,
    ParticipantToJSON,
    ParticipantToJSONTyped,
} from './Participant';

/**
 * 
 * @export
 * @interface GroupCreate
 */
export interface GroupCreate {
    /**
     * Chat ID
     * @type {string}
     * @memberof GroupCreate
     */
    id: string;
    /**
     * Group name
     * @type {string}
     * @memberof GroupCreate
     */
    name: string;
    /**
     * Chat type
     * @type {string}
     * @memberof GroupCreate
     */
    type: GroupCreateTypeEnum;
    /**
     * Chat timestamp
     * @type {number}
     * @memberof GroupCreate
     */
    timestamp?: number;
    /**
     * Group participants
     * @type {Array<Participant>}
     * @memberof GroupCreate
     */
    participants: Array<Participant>;
    /**
     * Group name set timestamp
     * @type {number}
     * @memberof GroupCreate
     */
    nameAt?: number;
    /**
     * Group creation timestamp
     * @type {number}
     * @memberof GroupCreate
     */
    createdAt?: number;
    /**
     * Contact ID
     * @type {string}
     * @memberof GroupCreate
     */
    createdBy?: string;
    /**
     * Ð¡ontacts that could not be added to the group
     * @type {Array<string>}
     * @memberof GroupCreate
     */
    unprocessedParticipants?: Array<string>;
}


/**
 * @export
 */
export const GroupCreateTypeEnum = {
    Group: 'group',
    Contact: 'contact',
    Broadcast: 'broadcast',
    Newsletter: 'newsletter',
    Unknown: 'unknown'
} as const;
export type GroupCreateTypeEnum = typeof GroupCreateTypeEnum[keyof typeof GroupCreateTypeEnum];


/**
 * Check if a given object implements the GroupCreate interface.
 */
export function instanceOfGroupCreate(value: object): value is GroupCreate {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('participants' in value) || value['participants'] === undefined) return false;
    return true;
}

export function GroupCreateFromJSON(json: any): GroupCreate {
    return GroupCreateFromJSONTyped(json, false);
}

export function GroupCreateFromJSONTyped(json: any, ignoreDiscriminator: boolean): GroupCreate {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'type': json['type'],
        'timestamp': json['timestamp'] == null ? undefined : json['timestamp'],
        'participants': ((json['participants'] as Array<any>).map(ParticipantFromJSON)),
        'nameAt': json['name_at'] == null ? undefined : json['name_at'],
        'createdAt': json['created_at'] == null ? undefined : json['created_at'],
        'createdBy': json['created_by'] == null ? undefined : json['created_by'],
        'unprocessedParticipants': json['unprocessed_participants'] == null ? undefined : json['unprocessed_participants'],
    };
}

export function GroupCreateToJSON(json: any): GroupCreate {
    return GroupCreateToJSONTyped(json, false);
}

export function GroupCreateToJSONTyped(value?: GroupCreate | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'name': value['name'],
        'type': value['type'],
        'timestamp': value['timestamp'],
        'participants': ((value['participants'] as Array<any>).map(ParticipantToJSON)),
        'name_at': value['nameAt'],
        'created_at': value['createdAt'],
        'created_by': value['createdBy'],
        'unprocessed_participants': value['unprocessedParticipants'],
    };
}

