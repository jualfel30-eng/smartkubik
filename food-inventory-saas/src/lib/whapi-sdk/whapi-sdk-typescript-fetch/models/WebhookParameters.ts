/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface WebhookParameters
 */
export interface WebhookParameters {
    /**
     * Additional headers for webhook. Max 5 headers. <br/>Example: <br/>"Authorization - Bearer token" <br/>"Content-Type - application/json" <br/>"X-Header - value"
     * @type {{ [key: string]: string; }}
     * @memberof WebhookParameters
     */
    headers?: { [key: string]: string; };
    /**
     * Inbound and outbound notifications are routed to this URL.
     * @type {string}
     * @memberof WebhookParameters
     */
    url?: string;
    /**
     * Request method for sending hook.
     * @type {string}
     * @memberof WebhookParameters
     */
    mode?: WebhookParametersModeEnum;
}


/**
 * @export
 */
export const WebhookParametersModeEnum = {
    Body: 'body',
    Path: 'path',
    Method: 'method'
} as const;
export type WebhookParametersModeEnum = typeof WebhookParametersModeEnum[keyof typeof WebhookParametersModeEnum];


/**
 * Check if a given object implements the WebhookParameters interface.
 */
export function instanceOfWebhookParameters(value: object): value is WebhookParameters {
    return true;
}

export function WebhookParametersFromJSON(json: any): WebhookParameters {
    return WebhookParametersFromJSONTyped(json, false);
}

export function WebhookParametersFromJSONTyped(json: any, ignoreDiscriminator: boolean): WebhookParameters {
    if (json == null) {
        return json;
    }
    return {
        
        'headers': json['headers'] == null ? undefined : json['headers'],
        'url': json['url'] == null ? undefined : json['url'],
        'mode': json['mode'] == null ? undefined : json['mode'],
    };
}

export function WebhookParametersToJSON(json: any): WebhookParameters {
    return WebhookParametersToJSONTyped(json, false);
}

export function WebhookParametersToJSONTyped(value?: WebhookParameters | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'headers': value['headers'],
        'url': value['url'],
        'mode': value['mode'],
    };
}

