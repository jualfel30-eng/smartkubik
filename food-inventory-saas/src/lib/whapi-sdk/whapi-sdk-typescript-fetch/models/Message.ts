/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MessageContentLiveLocation } from './MessageContentLiveLocation';
import {
    MessageContentLiveLocationFromJSON,
    MessageContentLiveLocationFromJSONTyped,
    MessageContentLiveLocationToJSON,
    MessageContentLiveLocationToJSONTyped,
} from './MessageContentLiveLocation';
import type { MessageContentNewsletterAdminInvite } from './MessageContentNewsletterAdminInvite';
import {
    MessageContentNewsletterAdminInviteFromJSON,
    MessageContentNewsletterAdminInviteFromJSONTyped,
    MessageContentNewsletterAdminInviteToJSON,
    MessageContentNewsletterAdminInviteToJSONTyped,
} from './MessageContentNewsletterAdminInvite';
import type { Label } from './Label';
import {
    LabelFromJSON,
    LabelFromJSONTyped,
    LabelToJSON,
    LabelToJSONTyped,
} from './Label';
import type { MessageContentAudio } from './MessageContentAudio';
import {
    MessageContentAudioFromJSON,
    MessageContentAudioFromJSONTyped,
    MessageContentAudioToJSON,
    MessageContentAudioToJSONTyped,
} from './MessageContentAudio';
import type { MessageContentEvent } from './MessageContentEvent';
import {
    MessageContentEventFromJSON,
    MessageContentEventFromJSONTyped,
    MessageContentEventToJSON,
    MessageContentEventToJSONTyped,
} from './MessageContentEvent';
import type { MessageContentText } from './MessageContentText';
import {
    MessageContentTextFromJSON,
    MessageContentTextFromJSONTyped,
    MessageContentTextToJSON,
    MessageContentTextToJSONTyped,
} from './MessageContentText';
import type { MessageContentHSM } from './MessageContentHSM';
import {
    MessageContentHSMFromJSON,
    MessageContentHSMFromJSONTyped,
    MessageContentHSMToJSON,
    MessageContentHSMToJSONTyped,
} from './MessageContentHSM';
import type { MessageAction } from './MessageAction';
import {
    MessageActionFromJSON,
    MessageActionFromJSONTyped,
    MessageActionToJSON,
    MessageActionToJSONTyped,
} from './MessageAction';
import type { MessageContentList } from './MessageContentList';
import {
    MessageContentListFromJSON,
    MessageContentListFromJSONTyped,
    MessageContentListToJSON,
    MessageContentListToJSONTyped,
} from './MessageContentList';
import type { MessageContentContact } from './MessageContentContact';
import {
    MessageContentContactFromJSON,
    MessageContentContactFromJSONTyped,
    MessageContentContactToJSON,
    MessageContentContactToJSONTyped,
} from './MessageContentContact';
import type { MessageContentVideo } from './MessageContentVideo';
import {
    MessageContentVideoFromJSON,
    MessageContentVideoFromJSONTyped,
    MessageContentVideoToJSON,
    MessageContentVideoToJSONTyped,
} from './MessageContentVideo';
import type { MessageContext } from './MessageContext';
import {
    MessageContextFromJSON,
    MessageContextFromJSONTyped,
    MessageContextToJSON,
    MessageContextToJSONTyped,
} from './MessageContext';
import type { MessageContentSystem } from './MessageContentSystem';
import {
    MessageContentSystemFromJSON,
    MessageContentSystemFromJSONTyped,
    MessageContentSystemToJSON,
    MessageContentSystemToJSONTyped,
} from './MessageContentSystem';
import type { MessageContentSticker } from './MessageContentSticker';
import {
    MessageContentStickerFromJSON,
    MessageContentStickerFromJSONTyped,
    MessageContentStickerToJSON,
    MessageContentStickerToJSONTyped,
} from './MessageContentSticker';
import type { MessageType } from './MessageType';
import {
    MessageTypeFromJSON,
    MessageTypeFromJSONTyped,
    MessageTypeToJSON,
    MessageTypeToJSONTyped,
} from './MessageType';
import type { StatusEnum } from './StatusEnum';
import {
    StatusEnumFromJSON,
    StatusEnumFromJSONTyped,
    StatusEnumToJSON,
    StatusEnumToJSONTyped,
} from './StatusEnum';
import type { MessageContentInteractive } from './MessageContentInteractive';
import {
    MessageContentInteractiveFromJSON,
    MessageContentInteractiveFromJSONTyped,
    MessageContentInteractiveToJSON,
    MessageContentInteractiveToJSONTyped,
} from './MessageContentInteractive';
import type { MessageSource } from './MessageSource';
import {
    MessageSourceFromJSON,
    MessageSourceFromJSONTyped,
    MessageSourceToJSON,
    MessageSourceToJSONTyped,
} from './MessageSource';
import type { MessageContentLinkPreview } from './MessageContentLinkPreview';
import {
    MessageContentLinkPreviewFromJSON,
    MessageContentLinkPreviewFromJSONTyped,
    MessageContentLinkPreviewToJSON,
    MessageContentLinkPreviewToJSONTyped,
} from './MessageContentLinkPreview';
import type { MessageContentButtons } from './MessageContentButtons';
import {
    MessageContentButtonsFromJSON,
    MessageContentButtonsFromJSONTyped,
    MessageContentButtonsToJSON,
    MessageContentButtonsToJSONTyped,
} from './MessageContentButtons';
import type { MessageContentDocument } from './MessageContentDocument';
import {
    MessageContentDocumentFromJSON,
    MessageContentDocumentFromJSONTyped,
    MessageContentDocumentToJSON,
    MessageContentDocumentToJSONTyped,
} from './MessageContentDocument';
import type { MessageContentOrder } from './MessageContentOrder';
import {
    MessageContentOrderFromJSON,
    MessageContentOrderFromJSONTyped,
    MessageContentOrderToJSON,
    MessageContentOrderToJSONTyped,
} from './MessageContentOrder';
import type { MessageContentProduct } from './MessageContentProduct';
import {
    MessageContentProductFromJSON,
    MessageContentProductFromJSONTyped,
    MessageContentProductToJSON,
    MessageContentProductToJSONTyped,
} from './MessageContentProduct';
import type { MessageReaction } from './MessageReaction';
import {
    MessageReactionFromJSON,
    MessageReactionFromJSONTyped,
    MessageReactionToJSON,
    MessageReactionToJSONTyped,
} from './MessageReaction';
import type { MessageContentImage } from './MessageContentImage';
import {
    MessageContentImageFromJSON,
    MessageContentImageFromJSONTyped,
    MessageContentImageToJSON,
    MessageContentImageToJSONTyped,
} from './MessageContentImage';
import type { MessageContentProductItems } from './MessageContentProductItems';
import {
    MessageContentProductItemsFromJSON,
    MessageContentProductItemsFromJSONTyped,
    MessageContentProductItemsToJSON,
    MessageContentProductItemsToJSONTyped,
} from './MessageContentProductItems';
import type { MessageContentLocation } from './MessageContentLocation';
import {
    MessageContentLocationFromJSON,
    MessageContentLocationFromJSONTyped,
    MessageContentLocationToJSON,
    MessageContentLocationToJSONTyped,
} from './MessageContentLocation';
import type { MessageContentContacts } from './MessageContentContacts';
import {
    MessageContentContactsFromJSON,
    MessageContentContactsFromJSONTyped,
    MessageContentContactsToJSON,
    MessageContentContactsToJSONTyped,
} from './MessageContentContacts';
import type { MessageContentPoll } from './MessageContentPoll';
import {
    MessageContentPollFromJSON,
    MessageContentPollFromJSONTyped,
    MessageContentPollToJSON,
    MessageContentPollToJSONTyped,
} from './MessageContentPoll';

/**
 * 
 * @export
 * @interface Message
 */
export interface Message {
    /**
     * Message ID
     * @type {string}
     * @memberof Message
     */
    id: string;
    /**
     * 
     * @type {MessageType}
     * @memberof Message
     */
    type: MessageType;
    /**
     * Message subtype
     * @type {string}
     * @memberof Message
     */
    subtype?: string;
    /**
     * Chat ID
     * @type {string}
     * @memberof Message
     */
    chatId: string;
    /**
     * Chat name
     * @type {string}
     * @memberof Message
     */
    chatName?: string;
    /**
     * WhatsApp ID of the sender
     * @type {string}
     * @memberof Message
     */
    from?: string;
    /**
     * Is message from me
     * @type {boolean}
     * @memberof Message
     */
    fromMe: boolean;
    /**
     * Pushname of the sender
     * @type {string}
     * @memberof Message
     */
    fromName?: string;
    /**
     * 
     * @type {MessageSource}
     * @memberof Message
     */
    source?: MessageSource;
    /**
     * Message timestamp
     * @type {number}
     * @memberof Message
     */
    timestamp: number;
    /**
     * Device ID, if the message was not sent through the app
     * @type {number}
     * @memberof Message
     */
    deviceId?: number;
    /**
     * 
     * @type {StatusEnum}
     * @memberof Message
     */
    status?: StatusEnum;
    /**
     * 
     * @type {MessageContentText}
     * @memberof Message
     */
    text?: MessageContentText;
    /**
     * 
     * @type {MessageContentImage}
     * @memberof Message
     */
    image?: MessageContentImage;
    /**
     * 
     * @type {MessageContentVideo}
     * @memberof Message
     */
    video?: MessageContentVideo;
    /**
     * 
     * @type {MessageContentVideo}
     * @memberof Message
     */
    _short?: MessageContentVideo;
    /**
     * 
     * @type {MessageContentVideo}
     * @memberof Message
     */
    gif?: MessageContentVideo;
    /**
     * 
     * @type {MessageContentAudio}
     * @memberof Message
     */
    audio?: MessageContentAudio;
    /**
     * 
     * @type {MessageContentAudio}
     * @memberof Message
     */
    voice?: MessageContentAudio;
    /**
     * 
     * @type {MessageContentDocument}
     * @memberof Message
     */
    document?: MessageContentDocument;
    /**
     * 
     * @type {MessageContentLinkPreview}
     * @memberof Message
     */
    linkPreview?: MessageContentLinkPreview;
    /**
     * 
     * @type {MessageContentSticker}
     * @memberof Message
     */
    sticker?: MessageContentSticker;
    /**
     * 
     * @type {MessageContentLocation}
     * @memberof Message
     */
    location?: MessageContentLocation;
    /**
     * 
     * @type {MessageContentLiveLocation}
     * @memberof Message
     */
    liveLocation?: MessageContentLiveLocation;
    /**
     * 
     * @type {MessageContentContact}
     * @memberof Message
     */
    contact?: MessageContentContact;
    /**
     * 
     * @type {MessageContentContacts}
     * @memberof Message
     */
    contactList?: MessageContentContacts;
    /**
     * 
     * @type {MessageContentInteractive}
     * @memberof Message
     */
    interactive?: MessageContentInteractive;
    /**
     * 
     * @type {MessageContentPoll}
     * @memberof Message
     */
    poll?: MessageContentPoll;
    /**
     * 
     * @type {MessageContentHSM}
     * @memberof Message
     */
    hsm?: MessageContentHSM;
    /**
     * 
     * @type {MessageContentSystem}
     * @memberof Message
     */
    system?: MessageContentSystem;
    /**
     * 
     * @type {MessageContentOrder}
     * @memberof Message
     */
    order?: MessageContentOrder;
    /**
     * 
     * @type {MessageContentLinkPreview}
     * @memberof Message
     */
    groupInvite?: MessageContentLinkPreview;
    /**
     * 
     * @type {MessageContentLinkPreview}
     * @memberof Message
     */
    newsletterInvite?: MessageContentLinkPreview;
    /**
     * 
     * @type {MessageContentNewsletterAdminInvite}
     * @memberof Message
     */
    adminInvite?: MessageContentNewsletterAdminInvite;
    /**
     * 
     * @type {MessageContentProduct}
     * @memberof Message
     */
    product?: MessageContentProduct;
    /**
     * 
     * @type {MessageContentLinkPreview}
     * @memberof Message
     */
    catalog?: MessageContentLinkPreview;
    /**
     * 
     * @type {MessageContentProductItems}
     * @memberof Message
     */
    productItems?: MessageContentProductItems;
    /**
     * 
     * @type {MessageAction}
     * @memberof Message
     */
    action?: MessageAction;
    /**
     * 
     * @type {MessageContext}
     * @memberof Message
     */
    context?: MessageContext;
    /**
     * 
     * @type {MessageContentEvent}
     * @memberof Message
     */
    event?: MessageContentEvent;
    /**
     * 
     * @type {MessageContentList}
     * @memberof Message
     */
    list?: MessageContentList;
    /**
     * 
     * @type {MessageContentButtons}
     * @memberof Message
     */
    buttons?: MessageContentButtons;
    /**
     * Reactions for message
     * @type {Array<MessageReaction>}
     * @memberof Message
     */
    reactions?: Array<MessageReaction>;
    /**
     * Labels associated with message
     * @type {Array<Label>}
     * @memberof Message
     */
    labels?: Array<Label>;
}



/**
 * Check if a given object implements the Message interface.
 */
export function instanceOfMessage(value: object): value is Message {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('chatId' in value) || value['chatId'] === undefined) return false;
    if (!('fromMe' in value) || value['fromMe'] === undefined) return false;
    if (!('timestamp' in value) || value['timestamp'] === undefined) return false;
    return true;
}

export function MessageFromJSON(json: any): Message {
    return MessageFromJSONTyped(json, false);
}

export function MessageFromJSONTyped(json: any, ignoreDiscriminator: boolean): Message {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'type': MessageTypeFromJSON(json['type']),
        'subtype': json['subtype'] == null ? undefined : json['subtype'],
        'chatId': json['chat_id'],
        'chatName': json['chat_name'] == null ? undefined : json['chat_name'],
        'from': json['from'] == null ? undefined : json['from'],
        'fromMe': json['from_me'],
        'fromName': json['from_name'] == null ? undefined : json['from_name'],
        'source': json['source'] == null ? undefined : MessageSourceFromJSON(json['source']),
        'timestamp': json['timestamp'],
        'deviceId': json['device_id'] == null ? undefined : json['device_id'],
        'status': json['status'] == null ? undefined : StatusEnumFromJSON(json['status']),
        'text': json['text'] == null ? undefined : MessageContentTextFromJSON(json['text']),
        'image': json['image'] == null ? undefined : MessageContentImageFromJSON(json['image']),
        'video': json['video'] == null ? undefined : MessageContentVideoFromJSON(json['video']),
        '_short': json['short'] == null ? undefined : MessageContentVideoFromJSON(json['short']),
        'gif': json['gif'] == null ? undefined : MessageContentVideoFromJSON(json['gif']),
        'audio': json['audio'] == null ? undefined : MessageContentAudioFromJSON(json['audio']),
        'voice': json['voice'] == null ? undefined : MessageContentAudioFromJSON(json['voice']),
        'document': json['document'] == null ? undefined : MessageContentDocumentFromJSON(json['document']),
        'linkPreview': json['link_preview'] == null ? undefined : MessageContentLinkPreviewFromJSON(json['link_preview']),
        'sticker': json['sticker'] == null ? undefined : MessageContentStickerFromJSON(json['sticker']),
        'location': json['location'] == null ? undefined : MessageContentLocationFromJSON(json['location']),
        'liveLocation': json['live_location'] == null ? undefined : MessageContentLiveLocationFromJSON(json['live_location']),
        'contact': json['contact'] == null ? undefined : MessageContentContactFromJSON(json['contact']),
        'contactList': json['contact_list'] == null ? undefined : MessageContentContactsFromJSON(json['contact_list']),
        'interactive': json['interactive'] == null ? undefined : MessageContentInteractiveFromJSON(json['interactive']),
        'poll': json['poll'] == null ? undefined : MessageContentPollFromJSON(json['poll']),
        'hsm': json['hsm'] == null ? undefined : MessageContentHSMFromJSON(json['hsm']),
        'system': json['system'] == null ? undefined : MessageContentSystemFromJSON(json['system']),
        'order': json['order'] == null ? undefined : MessageContentOrderFromJSON(json['order']),
        'groupInvite': json['group_invite'] == null ? undefined : MessageContentLinkPreviewFromJSON(json['group_invite']),
        'newsletterInvite': json['newsletter_invite'] == null ? undefined : MessageContentLinkPreviewFromJSON(json['newsletter_invite']),
        'adminInvite': json['admin_invite'] == null ? undefined : MessageContentNewsletterAdminInviteFromJSON(json['admin_invite']),
        'product': json['product'] == null ? undefined : MessageContentProductFromJSON(json['product']),
        'catalog': json['catalog'] == null ? undefined : MessageContentLinkPreviewFromJSON(json['catalog']),
        'productItems': json['product_items'] == null ? undefined : MessageContentProductItemsFromJSON(json['product_items']),
        'action': json['action'] == null ? undefined : MessageActionFromJSON(json['action']),
        'context': json['context'] == null ? undefined : MessageContextFromJSON(json['context']),
        'event': json['event'] == null ? undefined : MessageContentEventFromJSON(json['event']),
        'list': json['list'] == null ? undefined : MessageContentListFromJSON(json['list']),
        'buttons': json['buttons'] == null ? undefined : MessageContentButtonsFromJSON(json['buttons']),
        'reactions': json['reactions'] == null ? undefined : ((json['reactions'] as Array<any>).map(MessageReactionFromJSON)),
        'labels': json['labels'] == null ? undefined : ((json['labels'] as Array<any>).map(LabelFromJSON)),
    };
}

export function MessageToJSON(json: any): Message {
    return MessageToJSONTyped(json, false);
}

export function MessageToJSONTyped(value?: Message | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'type': MessageTypeToJSON(value['type']),
        'subtype': value['subtype'],
        'chat_id': value['chatId'],
        'chat_name': value['chatName'],
        'from': value['from'],
        'from_me': value['fromMe'],
        'from_name': value['fromName'],
        'source': MessageSourceToJSON(value['source']),
        'timestamp': value['timestamp'],
        'device_id': value['deviceId'],
        'status': StatusEnumToJSON(value['status']),
        'text': MessageContentTextToJSON(value['text']),
        'image': MessageContentImageToJSON(value['image']),
        'video': MessageContentVideoToJSON(value['video']),
        'short': MessageContentVideoToJSON(value['_short']),
        'gif': MessageContentVideoToJSON(value['gif']),
        'audio': MessageContentAudioToJSON(value['audio']),
        'voice': MessageContentAudioToJSON(value['voice']),
        'document': MessageContentDocumentToJSON(value['document']),
        'link_preview': MessageContentLinkPreviewToJSON(value['linkPreview']),
        'sticker': MessageContentStickerToJSON(value['sticker']),
        'location': MessageContentLocationToJSON(value['location']),
        'live_location': MessageContentLiveLocationToJSON(value['liveLocation']),
        'contact': MessageContentContactToJSON(value['contact']),
        'contact_list': MessageContentContactsToJSON(value['contactList']),
        'interactive': MessageContentInteractiveToJSON(value['interactive']),
        'poll': MessageContentPollToJSON(value['poll']),
        'hsm': MessageContentHSMToJSON(value['hsm']),
        'system': MessageContentSystemToJSON(value['system']),
        'order': MessageContentOrderToJSON(value['order']),
        'group_invite': MessageContentLinkPreviewToJSON(value['groupInvite']),
        'newsletter_invite': MessageContentLinkPreviewToJSON(value['newsletterInvite']),
        'admin_invite': MessageContentNewsletterAdminInviteToJSON(value['adminInvite']),
        'product': MessageContentProductToJSON(value['product']),
        'catalog': MessageContentLinkPreviewToJSON(value['catalog']),
        'product_items': MessageContentProductItemsToJSON(value['productItems']),
        'action': MessageActionToJSON(value['action']),
        'context': MessageContextToJSON(value['context']),
        'event': MessageContentEventToJSON(value['event']),
        'list': MessageContentListToJSON(value['list']),
        'buttons': MessageContentButtonsToJSON(value['buttons']),
        'reactions': value['reactions'] == null ? undefined : ((value['reactions'] as Array<any>).map(MessageReactionToJSON)),
        'labels': value['labels'] == null ? undefined : ((value['labels'] as Array<any>).map(LabelToJSON)),
    };
}

