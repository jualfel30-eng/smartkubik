/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface MessageContentNewsletterAdminInvite
 */
export interface MessageContentNewsletterAdminInvite {
    /**
     * Message text
     * @type {string}
     * @memberof MessageContentNewsletterAdminInvite
     */
    body: string;
    /**
     * Newsletter ID
     * @type {string}
     * @memberof MessageContentNewsletterAdminInvite
     */
    newsletterId: string;
    /**
     * Newsletter name
     * @type {string}
     * @memberof MessageContentNewsletterAdminInvite
     */
    newsletterName: string;
    /**
     * Expiration timestamp of the invitation
     * @type {number}
     * @memberof MessageContentNewsletterAdminInvite
     */
    expiration: number;
    /**
     * Base64 encoded newsletter preview image. In JPEG format
     * @type {string}
     * @memberof MessageContentNewsletterAdminInvite
     */
    preview?: string;
}

/**
 * Check if a given object implements the MessageContentNewsletterAdminInvite interface.
 */
export function instanceOfMessageContentNewsletterAdminInvite(value: object): value is MessageContentNewsletterAdminInvite {
    if (!('body' in value) || value['body'] === undefined) return false;
    if (!('newsletterId' in value) || value['newsletterId'] === undefined) return false;
    if (!('newsletterName' in value) || value['newsletterName'] === undefined) return false;
    if (!('expiration' in value) || value['expiration'] === undefined) return false;
    return true;
}

export function MessageContentNewsletterAdminInviteFromJSON(json: any): MessageContentNewsletterAdminInvite {
    return MessageContentNewsletterAdminInviteFromJSONTyped(json, false);
}

export function MessageContentNewsletterAdminInviteFromJSONTyped(json: any, ignoreDiscriminator: boolean): MessageContentNewsletterAdminInvite {
    if (json == null) {
        return json;
    }
    return {
        
        'body': json['body'],
        'newsletterId': json['newsletter_id'],
        'newsletterName': json['newsletter_name'],
        'expiration': json['expiration'],
        'preview': json['preview'] == null ? undefined : json['preview'],
    };
}

export function MessageContentNewsletterAdminInviteToJSON(json: any): MessageContentNewsletterAdminInvite {
    return MessageContentNewsletterAdminInviteToJSONTyped(json, false);
}

export function MessageContentNewsletterAdminInviteToJSONTyped(value?: MessageContentNewsletterAdminInvite | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'body': value['body'],
        'newsletter_id': value['newsletterId'],
        'newsletter_name': value['newsletterName'],
        'expiration': value['expiration'],
        'preview': value['preview'],
    };
}

