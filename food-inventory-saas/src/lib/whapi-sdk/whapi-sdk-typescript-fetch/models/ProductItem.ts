/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Currency } from './Currency';
import {
    CurrencyFromJSON,
    CurrencyFromJSONTyped,
    CurrencyToJSON,
    CurrencyToJSONTyped,
} from './Currency';

/**
 * 
 * @export
 * @interface ProductItem
 */
export interface ProductItem {
    /**
     * Product ID
     * @type {string}
     * @memberof ProductItem
     */
    id?: string;
    /**
     * Product Retailer ID
     * @type {string}
     * @memberof ProductItem
     */
    productRetailerId?: string;
    /**
     * Product name
     * @type {string}
     * @memberof ProductItem
     */
    name?: string;
    /**
     * Product image URL
     * @type {string}
     * @memberof ProductItem
     */
    image?: string;
    /**
     * Quantity
     * @type {number}
     * @memberof ProductItem
     */
    quantity?: number;
    /**
     * Item price
     * @type {number}
     * @memberof ProductItem
     */
    price?: number;
    /**
     * 
     * @type {Currency}
     * @memberof ProductItem
     */
    currency?: Currency;
}



/**
 * Check if a given object implements the ProductItem interface.
 */
export function instanceOfProductItem(value: object): value is ProductItem {
    return true;
}

export function ProductItemFromJSON(json: any): ProductItem {
    return ProductItemFromJSONTyped(json, false);
}

export function ProductItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProductItem {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'productRetailerId': json['product_retailer_id'] == null ? undefined : json['product_retailer_id'],
        'name': json['name'] == null ? undefined : json['name'],
        'image': json['image'] == null ? undefined : json['image'],
        'quantity': json['quantity'] == null ? undefined : json['quantity'],
        'price': json['price'] == null ? undefined : json['price'],
        'currency': json['currency'] == null ? undefined : CurrencyFromJSON(json['currency']),
    };
}

export function ProductItemToJSON(json: any): ProductItem {
    return ProductItemToJSONTyped(json, false);
}

export function ProductItemToJSONTyped(value?: ProductItem | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'product_retailer_id': value['productRetailerId'],
        'name': value['name'],
        'image': value['image'],
        'quantity': value['quantity'],
        'price': value['price'],
        'currency': CurrencyToJSON(value['currency']),
    };
}

