/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Participant } from './Participant';
import {
    ParticipantFromJSON,
    ParticipantFromJSONTyped,
    ParticipantToJSON,
    ParticipantToJSONTyped,
} from './Participant';

/**
 * 
 * @export
 * @interface GroupInfoByInviteCode
 */
export interface GroupInfoByInviteCode {
    /**
     * Chat ID
     * @type {string}
     * @memberof GroupInfoByInviteCode
     */
    id?: string;
    /**
     * Group name change timestamp
     * @type {number}
     * @memberof GroupInfoByInviteCode
     */
    nameAt?: number;
    /**
     * Group name
     * @type {string}
     * @memberof GroupInfoByInviteCode
     */
    name?: string;
    /**
     * Group participants
     * @type {Array<Participant>}
     * @memberof GroupInfoByInviteCode
     */
    participants?: Array<Participant>;
    /**
     * Group participants count
     * @type {number}
     * @memberof GroupInfoByInviteCode
     */
    participantsCount?: number;
    /**
     * Group creation timestamp
     * @type {number}
     * @memberof GroupInfoByInviteCode
     */
    createdAt?: number;
    /**
     * Contact ID
     * @type {string}
     * @memberof GroupInfoByInviteCode
     */
    createdBy?: string;
    /**
     * Group ephemeral timer
     * @type {number}
     * @memberof GroupInfoByInviteCode
     */
    ephemeral?: number;
}

/**
 * Check if a given object implements the GroupInfoByInviteCode interface.
 */
export function instanceOfGroupInfoByInviteCode(value: object): value is GroupInfoByInviteCode {
    return true;
}

export function GroupInfoByInviteCodeFromJSON(json: any): GroupInfoByInviteCode {
    return GroupInfoByInviteCodeFromJSONTyped(json, false);
}

export function GroupInfoByInviteCodeFromJSONTyped(json: any, ignoreDiscriminator: boolean): GroupInfoByInviteCode {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'nameAt': json['name_at'] == null ? undefined : json['name_at'],
        'name': json['name'] == null ? undefined : json['name'],
        'participants': json['participants'] == null ? undefined : ((json['participants'] as Array<any>).map(ParticipantFromJSON)),
        'participantsCount': json['participantsCount'] == null ? undefined : json['participantsCount'],
        'createdAt': json['created_at'] == null ? undefined : json['created_at'],
        'createdBy': json['created_by'] == null ? undefined : json['created_by'],
        'ephemeral': json['ephemeral'] == null ? undefined : json['ephemeral'],
    };
}

export function GroupInfoByInviteCodeToJSON(json: any): GroupInfoByInviteCode {
    return GroupInfoByInviteCodeToJSONTyped(json, false);
}

export function GroupInfoByInviteCodeToJSONTyped(value?: GroupInfoByInviteCode | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'name_at': value['nameAt'],
        'name': value['name'],
        'participants': value['participants'] == null ? undefined : ((value['participants'] as Array<any>).map(ParticipantToJSON)),
        'participantsCount': value['participantsCount'],
        'created_at': value['createdAt'],
        'created_by': value['createdBy'],
        'ephemeral': value['ephemeral'],
    };
}

