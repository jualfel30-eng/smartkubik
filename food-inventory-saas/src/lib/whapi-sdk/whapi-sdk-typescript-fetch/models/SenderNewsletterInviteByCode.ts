/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SendMediaMedia } from './SendMediaMedia';
import {
    SendMediaMediaFromJSON,
    SendMediaMediaFromJSONTyped,
    SendMediaMediaToJSON,
    SendMediaMediaToJSONTyped,
} from './SendMediaMedia';

/**
 * 
 * @export
 * @interface SenderNewsletterInviteByCode
 */
export interface SenderNewsletterInviteByCode {
    /**
     * Use the phone number or [Chat ID](https://support.whapi.cloud/help-desk/faq/chat-id.-what-is-it-and-how-to-get-it) of the contact/group/channel to which you want to send the message. Use [Get groups](https://whapi.readme.io/reference/getgroups) to get the group ID.
     * @type {string}
     * @memberof SenderNewsletterInviteByCode
     */
    to: string;
    /**
     * Message ID of the message to be quoted
     * @type {string}
     * @memberof SenderNewsletterInviteByCode
     */
    quoted?: string;
    /**
     * Time in seconds for the message to be deleted. The Disappearing messages setting should be enabled in the chat where you are sending this message.
     * @type {number}
     * @memberof SenderNewsletterInviteByCode
     */
    ephemeral?: number;
    /**
     * Message ID of the message to be edited
     * @type {string}
     * @memberof SenderNewsletterInviteByCode
     */
    edit?: string;
    /**
     * 
     * @type {SendMediaMedia}
     * @memberof SenderNewsletterInviteByCode
     */
    media?: SendMediaMedia;
    /**
     * Mime type of media
     * @type {string}
     * @memberof SenderNewsletterInviteByCode
     */
    mimeType?: string;
    /**
     * Do not use our encoding
     * @type {boolean}
     * @memberof SenderNewsletterInviteByCode
     */
    noEncode?: boolean;
    /**
     * Do not use the cache in a request
     * @type {boolean}
     * @memberof SenderNewsletterInviteByCode
     */
    noCache?: boolean;
    /**
     * The numbers of the mentioned users
     * @type {Array<string>}
     * @memberof SenderNewsletterInviteByCode
     */
    mentions?: Array<string>;
    /**
     * Is view once
     * @type {boolean}
     * @memberof SenderNewsletterInviteByCode
     */
    viewOnce?: boolean;
    /**
     * Title of the newsletter. If not set, the newsletter title will be used
     * @type {string}
     * @memberof SenderNewsletterInviteByCode
     */
    title?: string;
    /**
     * Invite message with link. Example: "Follow this link to join my newsletter on WhatsApp". Use %URL% to insert the invite link.
     * 
     * @type {string}
     * @memberof SenderNewsletterInviteByCode
     */
    body?: string;
    /**
     * Type of the newsletter preview. Use 'newsletter_picture' to set a newsletter picture as large preview, 'thumbnail' to set a custom small jpeg image from 'preview' param as preview,  'media' to set a custom large image from 'media' param as large preview,  'style1' to set a isometric style for newsletter invite link preview stub, 'style2' to set a flat style for newsletter invite link preview stub, 'style3' to set a WA style for newsletter invite link preview stub, or 'none' to not set a preview. If not set, the default is newsletter_picture.
     * 
     * @type {string}
     * @memberof SenderNewsletterInviteByCode
     */
    previewType?: SenderNewsletterInviteByCodePreviewTypeEnum;
    /**
     * Base64 encoded image for small version newsletter invite link preview (preview_type=thumbnail). In JPEG format
     * @type {string}
     * @memberof SenderNewsletterInviteByCode
     */
    preview?: string;
}


/**
 * @export
 */
export const SenderNewsletterInviteByCodePreviewTypeEnum = {
    NewsletterPicture: 'newsletter_picture',
    Thumbnail: 'thumbnail',
    Media: 'media',
    Style1: 'style1',
    Style2: 'style2',
    Style3: 'style3',
    None: 'none'
} as const;
export type SenderNewsletterInviteByCodePreviewTypeEnum = typeof SenderNewsletterInviteByCodePreviewTypeEnum[keyof typeof SenderNewsletterInviteByCodePreviewTypeEnum];


/**
 * Check if a given object implements the SenderNewsletterInviteByCode interface.
 */
export function instanceOfSenderNewsletterInviteByCode(value: object): value is SenderNewsletterInviteByCode {
    if (!('to' in value) || value['to'] === undefined) return false;
    return true;
}

export function SenderNewsletterInviteByCodeFromJSON(json: any): SenderNewsletterInviteByCode {
    return SenderNewsletterInviteByCodeFromJSONTyped(json, false);
}

export function SenderNewsletterInviteByCodeFromJSONTyped(json: any, ignoreDiscriminator: boolean): SenderNewsletterInviteByCode {
    if (json == null) {
        return json;
    }
    return {
        
        'to': json['to'],
        'quoted': json['quoted'] == null ? undefined : json['quoted'],
        'ephemeral': json['ephemeral'] == null ? undefined : json['ephemeral'],
        'edit': json['edit'] == null ? undefined : json['edit'],
        'media': json['media'] == null ? undefined : SendMediaMediaFromJSON(json['media']),
        'mimeType': json['mime_type'] == null ? undefined : json['mime_type'],
        'noEncode': json['no_encode'] == null ? undefined : json['no_encode'],
        'noCache': json['no_cache'] == null ? undefined : json['no_cache'],
        'mentions': json['mentions'] == null ? undefined : json['mentions'],
        'viewOnce': json['view_once'] == null ? undefined : json['view_once'],
        'title': json['title'] == null ? undefined : json['title'],
        'body': json['body'] == null ? undefined : json['body'],
        'previewType': json['preview_type'] == null ? undefined : json['preview_type'],
        'preview': json['preview'] == null ? undefined : json['preview'],
    };
}

export function SenderNewsletterInviteByCodeToJSON(json: any): SenderNewsletterInviteByCode {
    return SenderNewsletterInviteByCodeToJSONTyped(json, false);
}

export function SenderNewsletterInviteByCodeToJSONTyped(value?: SenderNewsletterInviteByCode | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'to': value['to'],
        'quoted': value['quoted'],
        'ephemeral': value['ephemeral'],
        'edit': value['edit'],
        'media': SendMediaMediaToJSON(value['media']),
        'mime_type': value['mimeType'],
        'no_encode': value['noEncode'],
        'no_cache': value['noCache'],
        'mentions': value['mentions'],
        'view_once': value['viewOnce'],
        'title': value['title'],
        'body': value['body'],
        'preview_type': value['previewType'],
        'preview': value['preview'],
    };
}

