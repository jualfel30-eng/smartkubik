/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EventResponse } from './EventResponse';
import {
    EventResponseFromJSON,
    EventResponseFromJSONTyped,
    EventResponseToJSON,
    EventResponseToJSONTyped,
} from './EventResponse';

/**
 * 
 * @export
 * @interface MessageContentEvent
 */
export interface MessageContentEvent {
    /**
     * True if event is canceled
     * @type {boolean}
     * @memberof MessageContentEvent
     */
    isCanceled?: boolean;
    /**
     * Event name
     * @type {string}
     * @memberof MessageContentEvent
     */
    name?: string;
    /**
     * Event description
     * @type {string}
     * @memberof MessageContentEvent
     */
    description?: string;
    /**
     * Join link
     * @type {string}
     * @memberof MessageContentEvent
     */
    joinLink?: string;
    /**
     * Chat timestamp
     * @type {number}
     * @memberof MessageContentEvent
     */
    start?: number;
    /**
     * Event responses
     * @type {Array<EventResponse>}
     * @memberof MessageContentEvent
     */
    responses?: Array<EventResponse>;
}

/**
 * Check if a given object implements the MessageContentEvent interface.
 */
export function instanceOfMessageContentEvent(value: object): value is MessageContentEvent {
    return true;
}

export function MessageContentEventFromJSON(json: any): MessageContentEvent {
    return MessageContentEventFromJSONTyped(json, false);
}

export function MessageContentEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): MessageContentEvent {
    if (json == null) {
        return json;
    }
    return {
        
        'isCanceled': json['is_canceled'] == null ? undefined : json['is_canceled'],
        'name': json['name'] == null ? undefined : json['name'],
        'description': json['description'] == null ? undefined : json['description'],
        'joinLink': json['join_link'] == null ? undefined : json['join_link'],
        'start': json['start'] == null ? undefined : json['start'],
        'responses': json['responses'] == null ? undefined : ((json['responses'] as Array<any>).map(EventResponseFromJSON)),
    };
}

export function MessageContentEventToJSON(json: any): MessageContentEvent {
    return MessageContentEventToJSONTyped(json, false);
}

export function MessageContentEventToJSONTyped(value?: MessageContentEvent | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'is_canceled': value['isCanceled'],
        'name': value['name'],
        'description': value['description'],
        'join_link': value['joinLink'],
        'start': value['start'],
        'responses': value['responses'] == null ? undefined : ((value['responses'] as Array<any>).map(EventResponseToJSON)),
    };
}

