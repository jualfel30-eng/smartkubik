/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { GroupApplication } from './GroupApplication';
import {
    GroupApplicationFromJSON,
    GroupApplicationFromJSONTyped,
    GroupApplicationToJSON,
    GroupApplicationToJSONTyped,
} from './GroupApplication';

/**
 * 
 * @export
 * @interface GroupApplicationList
 */
export interface GroupApplicationList {
    /**
     * Count of requested chats
     * @type {number}
     * @memberof GroupApplicationList
     */
    count?: number;
    /**
     * Total number of returned chats
     * @type {number}
     * @memberof GroupApplicationList
     */
    total?: number;
    /**
     * Offset of requested chats
     * @type {number}
     * @memberof GroupApplicationList
     */
    offset?: number;
    /**
     * 
     * @type {Array<GroupApplication>}
     * @memberof GroupApplicationList
     */
    applications?: Array<GroupApplication>;
}

/**
 * Check if a given object implements the GroupApplicationList interface.
 */
export function instanceOfGroupApplicationList(value: object): value is GroupApplicationList {
    return true;
}

export function GroupApplicationListFromJSON(json: any): GroupApplicationList {
    return GroupApplicationListFromJSONTyped(json, false);
}

export function GroupApplicationListFromJSONTyped(json: any, ignoreDiscriminator: boolean): GroupApplicationList {
    if (json == null) {
        return json;
    }
    return {
        
        'count': json['count'] == null ? undefined : json['count'],
        'total': json['total'] == null ? undefined : json['total'],
        'offset': json['offset'] == null ? undefined : json['offset'],
        'applications': json['applications'] == null ? undefined : ((json['applications'] as Array<any>).map(GroupApplicationFromJSON)),
    };
}

export function GroupApplicationListToJSON(json: any): GroupApplicationList {
    return GroupApplicationListToJSONTyped(json, false);
}

export function GroupApplicationListToJSONTyped(value?: GroupApplicationList | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'count': value['count'],
        'total': value['total'],
        'offset': value['offset'],
        'applications': value['applications'] == null ? undefined : ((value['applications'] as Array<any>).map(GroupApplicationToJSON)),
    };
}

