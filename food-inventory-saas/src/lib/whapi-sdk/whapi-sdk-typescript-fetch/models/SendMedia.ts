/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SendMediaMedia } from './SendMediaMedia';
import {
    SendMediaMediaFromJSON,
    SendMediaMediaFromJSONTyped,
    SendMediaMediaToJSON,
    SendMediaMediaToJSONTyped,
} from './SendMediaMedia';

/**
 * Media file to send. You can use preuploaded file or upload file on the fly. 
 * Use preupload files if you want to send same file to multiple chats and
 * so as not to disturb the order of messages.
 * 
 * @export
 * @interface SendMedia
 */
export interface SendMedia {
    /**
     * 
     * @type {SendMediaMedia}
     * @memberof SendMedia
     */
    media?: SendMediaMedia;
    /**
     * Mime type of media
     * @type {string}
     * @memberof SendMedia
     */
    mimeType?: string;
    /**
     * Do not use our encoding
     * @type {boolean}
     * @memberof SendMedia
     */
    noEncode?: boolean;
    /**
     * Do not use the cache in a request
     * @type {boolean}
     * @memberof SendMedia
     */
    noCache?: boolean;
}

/**
 * Check if a given object implements the SendMedia interface.
 */
export function instanceOfSendMedia(value: object): value is SendMedia {
    return true;
}

export function SendMediaFromJSON(json: any): SendMedia {
    return SendMediaFromJSONTyped(json, false);
}

export function SendMediaFromJSONTyped(json: any, ignoreDiscriminator: boolean): SendMedia {
    if (json == null) {
        return json;
    }
    return {
        
        'media': json['media'] == null ? undefined : SendMediaMediaFromJSON(json['media']),
        'mimeType': json['mime_type'] == null ? undefined : json['mime_type'],
        'noEncode': json['no_encode'] == null ? undefined : json['no_encode'],
        'noCache': json['no_cache'] == null ? undefined : json['no_cache'],
    };
}

export function SendMediaToJSON(json: any): SendMedia {
    return SendMediaToJSONTyped(json, false);
}

export function SendMediaToJSONTyped(value?: SendMedia | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'media': SendMediaMediaToJSON(value['media']),
        'mime_type': value['mimeType'],
        'no_encode': value['noEncode'],
        'no_cache': value['noCache'],
    };
}

