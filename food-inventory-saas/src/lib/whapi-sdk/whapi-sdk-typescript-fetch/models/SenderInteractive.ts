/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MessagePropsInteractiveHeader } from './MessagePropsInteractiveHeader';
import {
    MessagePropsInteractiveHeaderFromJSON,
    MessagePropsInteractiveHeaderFromJSONTyped,
    MessagePropsInteractiveHeaderToJSON,
    MessagePropsInteractiveHeaderToJSONTyped,
} from './MessagePropsInteractiveHeader';
import type { MessagePropsInteractiveBody } from './MessagePropsInteractiveBody';
import {
    MessagePropsInteractiveBodyFromJSON,
    MessagePropsInteractiveBodyFromJSONTyped,
    MessagePropsInteractiveBodyToJSON,
    MessagePropsInteractiveBodyToJSONTyped,
} from './MessagePropsInteractiveBody';
import type { InteractiveType } from './InteractiveType';
import {
    InteractiveTypeFromJSON,
    InteractiveTypeFromJSONTyped,
    InteractiveTypeToJSON,
    InteractiveTypeToJSONTyped,
} from './InteractiveType';
import type { MessagePropsInteractiveFooter } from './MessagePropsInteractiveFooter';
import {
    MessagePropsInteractiveFooterFromJSON,
    MessagePropsInteractiveFooterFromJSONTyped,
    MessagePropsInteractiveFooterToJSON,
    MessagePropsInteractiveFooterToJSONTyped,
} from './MessagePropsInteractiveFooter';
import type { InteractiveAction } from './InteractiveAction';
import {
    InteractiveActionFromJSON,
    InteractiveActionFromJSONTyped,
    InteractiveActionToJSON,
    InteractiveActionToJSONTyped,
} from './InteractiveAction';

/**
 * 
 * @export
 * @interface SenderInteractive
 */
export interface SenderInteractive {
    /**
     * Use the phone number or [Chat ID](https://support.whapi.cloud/help-desk/faq/chat-id.-what-is-it-and-how-to-get-it) of the contact/group/channel to which you want to send the message. Use [Get groups](https://whapi.readme.io/reference/getgroups) to get the group ID.
     * @type {string}
     * @memberof SenderInteractive
     */
    to: string;
    /**
     * Message ID of the message to be quoted
     * @type {string}
     * @memberof SenderInteractive
     */
    quoted?: string;
    /**
     * Time in seconds for the message to be deleted. The Disappearing messages setting should be enabled in the chat where you are sending this message.
     * @type {number}
     * @memberof SenderInteractive
     */
    ephemeral?: number;
    /**
     * Message ID of the message to be edited
     * @type {string}
     * @memberof SenderInteractive
     */
    edit?: string;
    /**
     * 
     * @type {MessagePropsInteractiveHeader}
     * @memberof SenderInteractive
     */
    header?: MessagePropsInteractiveHeader;
    /**
     * 
     * @type {MessagePropsInteractiveBody}
     * @memberof SenderInteractive
     */
    body?: MessagePropsInteractiveBody;
    /**
     * 
     * @type {MessagePropsInteractiveFooter}
     * @memberof SenderInteractive
     */
    footer?: MessagePropsInteractiveFooter;
    /**
     * 
     * @type {InteractiveAction}
     * @memberof SenderInteractive
     */
    action: InteractiveAction;
    /**
     * 
     * @type {InteractiveType}
     * @memberof SenderInteractive
     */
    type?: InteractiveType;
    /**
     * Is view once
     * @type {boolean}
     * @memberof SenderInteractive
     */
    viewOnce?: boolean;
}



/**
 * Check if a given object implements the SenderInteractive interface.
 */
export function instanceOfSenderInteractive(value: object): value is SenderInteractive {
    if (!('to' in value) || value['to'] === undefined) return false;
    if (!('action' in value) || value['action'] === undefined) return false;
    return true;
}

export function SenderInteractiveFromJSON(json: any): SenderInteractive {
    return SenderInteractiveFromJSONTyped(json, false);
}

export function SenderInteractiveFromJSONTyped(json: any, ignoreDiscriminator: boolean): SenderInteractive {
    if (json == null) {
        return json;
    }
    return {
        
        'to': json['to'],
        'quoted': json['quoted'] == null ? undefined : json['quoted'],
        'ephemeral': json['ephemeral'] == null ? undefined : json['ephemeral'],
        'edit': json['edit'] == null ? undefined : json['edit'],
        'header': json['header'] == null ? undefined : MessagePropsInteractiveHeaderFromJSON(json['header']),
        'body': json['body'] == null ? undefined : MessagePropsInteractiveBodyFromJSON(json['body']),
        'footer': json['footer'] == null ? undefined : MessagePropsInteractiveFooterFromJSON(json['footer']),
        'action': InteractiveActionFromJSON(json['action']),
        'type': json['type'] == null ? undefined : InteractiveTypeFromJSON(json['type']),
        'viewOnce': json['view_once'] == null ? undefined : json['view_once'],
    };
}

export function SenderInteractiveToJSON(json: any): SenderInteractive {
    return SenderInteractiveToJSONTyped(json, false);
}

export function SenderInteractiveToJSONTyped(value?: SenderInteractive | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'to': value['to'],
        'quoted': value['quoted'],
        'ephemeral': value['ephemeral'],
        'edit': value['edit'],
        'header': MessagePropsInteractiveHeaderToJSON(value['header']),
        'body': MessagePropsInteractiveBodyToJSON(value['body']),
        'footer': MessagePropsInteractiveFooterToJSON(value['footer']),
        'action': InteractiveActionToJSON(value['action']),
        'type': InteractiveTypeToJSON(value['type']),
        'view_once': value['viewOnce'],
    };
}

