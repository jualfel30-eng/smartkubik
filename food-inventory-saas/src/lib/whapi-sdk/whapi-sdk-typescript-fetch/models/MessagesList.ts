/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Message } from './Message';
import {
    MessageFromJSON,
    MessageFromJSONTyped,
    MessageToJSON,
    MessageToJSONTyped,
} from './Message';

/**
 * 
 * @export
 * @interface MessagesList
 */
export interface MessagesList {
    /**
     * 
     * @type {Array<Message>}
     * @memberof MessagesList
     */
    messages?: Array<Message>;
    /**
     * Count of requested messages
     * @type {number}
     * @memberof MessagesList
     */
    count?: number;
    /**
     * Total number of returned messages
     * @type {number}
     * @memberof MessagesList
     */
    total?: number;
    /**
     * Offset of requested messages
     * @type {number}
     * @memberof MessagesList
     */
    offset?: number;
    /**
     * The index of the first message
     * @type {number}
     * @memberof MessagesList
     */
    first?: number;
    /**
     * The index of the last message
     * @type {number}
     * @memberof MessagesList
     */
    last?: number;
}

/**
 * Check if a given object implements the MessagesList interface.
 */
export function instanceOfMessagesList(value: object): value is MessagesList {
    return true;
}

export function MessagesListFromJSON(json: any): MessagesList {
    return MessagesListFromJSONTyped(json, false);
}

export function MessagesListFromJSONTyped(json: any, ignoreDiscriminator: boolean): MessagesList {
    if (json == null) {
        return json;
    }
    return {
        
        'messages': json['messages'] == null ? undefined : ((json['messages'] as Array<any>).map(MessageFromJSON)),
        'count': json['count'] == null ? undefined : json['count'],
        'total': json['total'] == null ? undefined : json['total'],
        'offset': json['offset'] == null ? undefined : json['offset'],
        'first': json['first'] == null ? undefined : json['first'],
        'last': json['last'] == null ? undefined : json['last'],
    };
}

export function MessagesListToJSON(json: any): MessagesList {
    return MessagesListToJSONTyped(json, false);
}

export function MessagesListToJSONTyped(value?: MessagesList | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'messages': value['messages'] == null ? undefined : ((value['messages'] as Array<any>).map(MessageToJSON)),
        'count': value['count'],
        'total': value['total'],
        'offset': value['offset'],
        'first': value['first'],
        'last': value['last'],
    };
}

