/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Currency } from './Currency';
import {
    CurrencyFromJSON,
    CurrencyFromJSONTyped,
    CurrencyToJSON,
    CurrencyToJSONTyped,
} from './Currency';

/**
 * 
 * @export
 * @interface MessageContentOrder
 */
export interface MessageContentOrder {
    /**
     * Order ID
     * @type {string}
     * @memberof MessageContentOrder
     */
    orderId?: string;
    /**
     * Seller ID (Contact ID)
     * @type {string}
     * @memberof MessageContentOrder
     */
    seller?: string;
    /**
     * Order title
     * @type {string}
     * @memberof MessageContentOrder
     */
    title?: string;
    /**
     * Order message text
     * @type {string}
     * @memberof MessageContentOrder
     */
    text?: string;
    /**
     * Base64 secret token
     * @type {string}
     * @memberof MessageContentOrder
     */
    token?: string;
    /**
     * Total products count
     * @type {number}
     * @memberof MessageContentOrder
     */
    itemCount?: number;
    /**
     * 
     * @type {Currency}
     * @memberof MessageContentOrder
     */
    currency?: Currency;
    /**
     * Total order price
     * @type {number}
     * @memberof MessageContentOrder
     */
    totalPrice?: number;
    /**
     * Order status
     * @type {string}
     * @memberof MessageContentOrder
     */
    status?: MessageContentOrderStatusEnum;
    /**
     * Order preview base64 image JPEG
     * @type {string}
     * @memberof MessageContentOrder
     */
    preview?: string;
}


/**
 * @export
 */
export const MessageContentOrderStatusEnum = {
    New: 'new',
    Accepted: 'accepted',
    Canceled: 'canceled'
} as const;
export type MessageContentOrderStatusEnum = typeof MessageContentOrderStatusEnum[keyof typeof MessageContentOrderStatusEnum];


/**
 * Check if a given object implements the MessageContentOrder interface.
 */
export function instanceOfMessageContentOrder(value: object): value is MessageContentOrder {
    return true;
}

export function MessageContentOrderFromJSON(json: any): MessageContentOrder {
    return MessageContentOrderFromJSONTyped(json, false);
}

export function MessageContentOrderFromJSONTyped(json: any, ignoreDiscriminator: boolean): MessageContentOrder {
    if (json == null) {
        return json;
    }
    return {
        
        'orderId': json['order_id'] == null ? undefined : json['order_id'],
        'seller': json['seller'] == null ? undefined : json['seller'],
        'title': json['title'] == null ? undefined : json['title'],
        'text': json['text'] == null ? undefined : json['text'],
        'token': json['token'] == null ? undefined : json['token'],
        'itemCount': json['item_count'] == null ? undefined : json['item_count'],
        'currency': json['currency'] == null ? undefined : CurrencyFromJSON(json['currency']),
        'totalPrice': json['total_price'] == null ? undefined : json['total_price'],
        'status': json['status'] == null ? undefined : json['status'],
        'preview': json['preview'] == null ? undefined : json['preview'],
    };
}

export function MessageContentOrderToJSON(json: any): MessageContentOrder {
    return MessageContentOrderToJSONTyped(json, false);
}

export function MessageContentOrderToJSONTyped(value?: MessageContentOrder | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'order_id': value['orderId'],
        'seller': value['seller'],
        'title': value['title'],
        'text': value['text'],
        'token': value['token'],
        'item_count': value['itemCount'],
        'currency': CurrencyToJSON(value['currency']),
        'total_price': value['totalPrice'],
        'status': value['status'],
        'preview': value['preview'],
    };
}

