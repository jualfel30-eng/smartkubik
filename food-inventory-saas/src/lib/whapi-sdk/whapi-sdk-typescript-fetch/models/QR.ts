/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * The QR code object contains the QR code image and the status of the QR code. The QR code is only valid for a limited time. Sent on event "channels.patch"
 * @export
 * @interface QR
 */
export interface QR {
    /**
     * Status of the QR code
     * @type {string}
     * @memberof QR
     */
    status: QRStatusEnum;
    /**
     * Base64 encoded QR code
     * @type {string}
     * @memberof QR
     */
    base64?: string;
    /**
     * Rowdata for generating the QR code
     * @type {string}
     * @memberof QR
     */
    rowdata?: string;
    /**
     * Seconds until the QR code expires
     * @type {number}
     * @memberof QR
     */
    expire?: number;
}


/**
 * @export
 */
export const QRStatusEnum = {
    Ok: 'OK',
    Timeout: 'TIMEOUT',
    Waiting: 'WAITING',
    Error: 'ERROR'
} as const;
export type QRStatusEnum = typeof QRStatusEnum[keyof typeof QRStatusEnum];


/**
 * Check if a given object implements the QR interface.
 */
export function instanceOfQR(value: object): value is QR {
    if (!('status' in value) || value['status'] === undefined) return false;
    return true;
}

export function QRFromJSON(json: any): QR {
    return QRFromJSONTyped(json, false);
}

export function QRFromJSONTyped(json: any, ignoreDiscriminator: boolean): QR {
    if (json == null) {
        return json;
    }
    return {
        
        'status': json['status'],
        'base64': json['base64'] == null ? undefined : json['base64'],
        'rowdata': json['rowdata'] == null ? undefined : json['rowdata'],
        'expire': json['expire'] == null ? undefined : json['expire'],
    };
}

export function QRToJSON(json: any): QR {
    return QRToJSONTyped(json, false);
}

export function QRToJSONTyped(value?: QR | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'status': value['status'],
        'base64': value['base64'],
        'rowdata': value['rowdata'],
        'expire': value['expire'],
    };
}

