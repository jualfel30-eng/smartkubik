/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Group } from './Group';
import {
    GroupFromJSON,
    GroupFromJSONTyped,
    GroupToJSON,
    GroupToJSONTyped,
} from './Group';

/**
 * 
 * @export
 * @interface GroupUpdate
 */
export interface GroupUpdate {
    /**
     * 
     * @type {Group}
     * @memberof GroupUpdate
     */
    beforeUpdate: Group;
    /**
     * 
     * @type {Group}
     * @memberof GroupUpdate
     */
    afterUpdate: Group;
    /**
     * 
     * @type {Array<string>}
     * @memberof GroupUpdate
     */
    changes: Array<string>;
}

/**
 * Check if a given object implements the GroupUpdate interface.
 */
export function instanceOfGroupUpdate(value: object): value is GroupUpdate {
    if (!('beforeUpdate' in value) || value['beforeUpdate'] === undefined) return false;
    if (!('afterUpdate' in value) || value['afterUpdate'] === undefined) return false;
    if (!('changes' in value) || value['changes'] === undefined) return false;
    return true;
}

export function GroupUpdateFromJSON(json: any): GroupUpdate {
    return GroupUpdateFromJSONTyped(json, false);
}

export function GroupUpdateFromJSONTyped(json: any, ignoreDiscriminator: boolean): GroupUpdate {
    if (json == null) {
        return json;
    }
    return {
        
        'beforeUpdate': GroupFromJSON(json['before_update']),
        'afterUpdate': GroupFromJSON(json['after_update']),
        'changes': json['changes'],
    };
}

export function GroupUpdateToJSON(json: any): GroupUpdate {
    return GroupUpdateToJSONTyped(json, false);
}

export function GroupUpdateToJSONTyped(value?: GroupUpdate | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'before_update': GroupToJSON(value['beforeUpdate']),
        'after_update': GroupToJSON(value['afterUpdate']),
        'changes': value['changes'],
    };
}

