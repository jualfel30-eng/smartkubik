/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ChannelStatus } from './ChannelStatus';
import {
    ChannelStatusFromJSON,
    ChannelStatusFromJSONTyped,
    ChannelStatusToJSON,
    ChannelStatusToJSONTyped,
} from './ChannelStatus';
import type { Contact } from './Contact';
import {
    ContactFromJSON,
    ContactFromJSONTyped,
    ContactToJSON,
    ContactToJSONTyped,
} from './Contact';

/**
 * The health object contains information about the uptime of the channel and the status of the channel. Sent on event "channels.post"
 * @export
 * @interface Health
 */
export interface Health {
    /**
     * Date timestamp when channel started on the server.
     * @type {number}
     * @memberof Health
     */
    startAt: number;
    /**
     * Seconds have passed since the start of the instance.
     * @type {number}
     * @memberof Health
     */
    uptime: number;
    /**
     * Channel version
     * @type {string}
     * @memberof Health
     */
    version?: string;
    /**
     * Current device ID
     * @type {number}
     * @memberof Health
     */
    deviceId?: number;
    /**
     * Current channel ip-address
     * @type {string}
     * @memberof Health
     */
    ip?: string;
    /**
     * 
     * @type {ChannelStatus}
     * @memberof Health
     */
    status: ChannelStatus;
    /**
     * 
     * @type {Contact}
     * @memberof Health
     */
    user?: Contact;
}

/**
 * Check if a given object implements the Health interface.
 */
export function instanceOfHealth(value: object): value is Health {
    if (!('startAt' in value) || value['startAt'] === undefined) return false;
    if (!('uptime' in value) || value['uptime'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    return true;
}

export function HealthFromJSON(json: any): Health {
    return HealthFromJSONTyped(json, false);
}

export function HealthFromJSONTyped(json: any, ignoreDiscriminator: boolean): Health {
    if (json == null) {
        return json;
    }
    return {
        
        'startAt': json['start_at'],
        'uptime': json['uptime'],
        'version': json['version'] == null ? undefined : json['version'],
        'deviceId': json['device_id'] == null ? undefined : json['device_id'],
        'ip': json['ip'] == null ? undefined : json['ip'],
        'status': ChannelStatusFromJSON(json['status']),
        'user': json['user'] == null ? undefined : ContactFromJSON(json['user']),
    };
}

export function HealthToJSON(json: any): Health {
    return HealthToJSONTyped(json, false);
}

export function HealthToJSONTyped(value?: Health | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'start_at': value['startAt'],
        'uptime': value['uptime'],
        'version': value['version'],
        'device_id': value['deviceId'],
        'ip': value['ip'],
        'status': ChannelStatusToJSON(value['status']),
        'user': ContactToJSON(value['user']),
    };
}

