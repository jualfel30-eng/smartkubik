/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Status } from './Status';
import {
    StatusFromJSON,
    StatusFromJSONTyped,
    StatusToJSON,
    StatusToJSONTyped,
} from './Status';
import type { Group } from './Group';
import {
    GroupFromJSON,
    GroupFromJSONTyped,
    GroupToJSON,
    GroupToJSONTyped,
} from './Group';
import type { QR } from './QR';
import {
    QRFromJSON,
    QRFromJSONTyped,
    QRToJSON,
    QRToJSONTyped,
} from './QR';
import type { Message } from './Message';
import {
    MessageFromJSON,
    MessageFromJSONTyped,
    MessageToJSON,
    MessageToJSONTyped,
} from './Message';
import type { Health } from './Health';
import {
    HealthFromJSON,
    HealthFromJSONTyped,
    HealthToJSON,
    HealthToJSONTyped,
} from './Health';
import type { Label } from './Label';
import {
    LabelFromJSON,
    LabelFromJSONTyped,
    LabelToJSON,
    LabelToJSONTyped,
} from './Label';
import type { ParticipantEvent } from './ParticipantEvent';
import {
    ParticipantEventFromJSON,
    ParticipantEventFromJSONTyped,
    ParticipantEventToJSON,
    ParticipantEventToJSONTyped,
} from './ParticipantEvent';
import type { MessageUpdate } from './MessageUpdate';
import {
    MessageUpdateFromJSON,
    MessageUpdateFromJSONTyped,
    MessageUpdateToJSON,
    MessageUpdateToJSONTyped,
} from './MessageUpdate';
import type { ChatUpdate } from './ChatUpdate';
import {
    ChatUpdateFromJSON,
    ChatUpdateFromJSONTyped,
    ChatUpdateToJSON,
    ChatUpdateToJSONTyped,
} from './ChatUpdate';
import type { Contact } from './Contact';
import {
    ContactFromJSON,
    ContactFromJSONTyped,
    ContactToJSON,
    ContactToJSONTyped,
} from './Contact';
import type { CallEvent } from './CallEvent';
import {
    CallEventFromJSON,
    CallEventFromJSONTyped,
    CallEventToJSON,
    CallEventToJSONTyped,
} from './CallEvent';
import type { Chat } from './Chat';
import {
    ChatFromJSON,
    ChatFromJSONTyped,
    ChatToJSON,
    ChatToJSONTyped,
} from './Chat';
import type { Event } from './Event';
import {
    EventFromJSON,
    EventFromJSONTyped,
    EventToJSON,
    EventToJSONTyped,
} from './Event';
import type { Presence } from './Presence';
import {
    PresenceFromJSON,
    PresenceFromJSONTyped,
    PresenceToJSON,
    PresenceToJSONTyped,
} from './Presence';
import type { ContactUpdate } from './ContactUpdate';
import {
    ContactUpdateFromJSON,
    ContactUpdateFromJSONTyped,
    ContactUpdateToJSON,
    ContactUpdateToJSONTyped,
} from './ContactUpdate';
import type { GroupUpdate } from './GroupUpdate';
import {
    GroupUpdateFromJSON,
    GroupUpdateFromJSONTyped,
    GroupUpdateToJSON,
    GroupUpdateToJSONTyped,
} from './GroupUpdate';

/**
 * 
 * @export
 * @interface WebhookPayload
 */
export interface WebhookPayload {
    /**
     * The contacts array contains all contacts that were sent to the webhook URL. Sent on event "contacts.post"
     * @type {Array<Contact>}
     * @memberof WebhookPayload
     */
    contacts?: Array<Contact>;
    /**
     * The messages array contains all messages that were sent to the webhook URL. Sent on event "messages.post" or "messages.put"
     * @type {Array<Message>}
     * @memberof WebhookPayload
     */
    messages?: Array<Message>;
    /**
     * The messages updates array contains all messages updates that were sent to the webhook URL. Sent on event "messages.patch"
     * @type {Array<MessageUpdate>}
     * @memberof WebhookPayload
     */
    messagesUpdates?: Array<MessageUpdate>;
    /**
     * The messages removed array contains all messages removed that were sent to the webhook URL. Sent on event "messages.delete"
     * @type {Array<string>}
     * @memberof WebhookPayload
     */
    messagesRemoved?: Array<string>;
    /**
     * The messages removed all contains the chat ID of the chat that was cleared. Sent on event "messages.delete"
     * @type {string}
     * @memberof WebhookPayload
     */
    messagesRemovedAll?: string;
    /**
     * The messages statuses array contains all statuses that were sent to the webhook URL. Sent on event "statuses.post" or "statuses.put"
     * @type {Array<Status>}
     * @memberof WebhookPayload
     */
    statuses?: Array<Status>;
    /**
     * The chats array contains all chats that were sent to the webhook URL. Sent on event "chats.post" or "chats.put"
     * @type {Array<Chat>}
     * @memberof WebhookPayload
     */
    chats?: Array<Chat>;
    /**
     * The chats updates array contains all chats updates that were sent to the webhook URL. Sent on event "chats.patch"
     * @type {Array<ChatUpdate>}
     * @memberof WebhookPayload
     */
    chatsUpdates?: Array<ChatUpdate>;
    /**
     * The chats removed array contains all chats removed that were sent to the webhook URL. Sent on event "chats.delete"
     * @type {Array<string>}
     * @memberof WebhookPayload
     */
    chatsRemoved?: Array<string>;
    /**
     * The contacts updates array contains all contacts updates that were sent to the webhook URL. Sent on event "contacts.patch"
     * @type {Array<ContactUpdate>}
     * @memberof WebhookPayload
     */
    contactsUpdates?: Array<ContactUpdate>;
    /**
     * The groups array contains all groups that were sent to the webhook URL. Sent on event "groups.post"
     * @type {Array<Group>}
     * @memberof WebhookPayload
     */
    groups?: Array<Group>;
    /**
     * The groups participants event array contains all groups participants event that were sent to the webhook URL. Sent on event "groups.put"
     * @type {Array<ParticipantEvent>}
     * @memberof WebhookPayload
     */
    groupsParticipants?: Array<ParticipantEvent>;
    /**
     * The groups updates array contains all groups updates that were sent to the webhook URL. Sent on event "groups.patch"
     * @type {Array<GroupUpdate>}
     * @memberof WebhookPayload
     */
    groupsUpdates?: Array<GroupUpdate>;
    /**
     * The presences array contains all presences that were sent to the webhook URL. Sent on event "presences.post"
     * @type {Array<Presence>}
     * @memberof WebhookPayload
     */
    presences?: Array<Presence>;
    /**
     * The labels array contains all labels that were sent to the webhook URL. Sent on event "labels.post"
     * @type {Array<Label>}
     * @memberof WebhookPayload
     */
    labels?: Array<Label>;
    /**
     * The labels removed array contains all labels removed that were sent to the webhook URL. Sent on event "labels.delete"
     * @type {Array<string>}
     * @memberof WebhookPayload
     */
    labelsRemoved?: Array<string>;
    /**
     * The calls array contains all calls that were sent to the webhook URL. Sent on event "calls.post"
     * @type {Array<CallEvent>}
     * @memberof WebhookPayload
     */
    calls?: Array<CallEvent>;
    /**
     * 
     * @type {QR}
     * @memberof WebhookPayload
     */
    qr?: QR;
    /**
     * 
     * @type {Health}
     * @memberof WebhookPayload
     */
    health?: Health;
    /**
     * 
     * @type {Contact}
     * @memberof WebhookPayload
     */
    user?: Contact;
    /**
     * 
     * @type {Array<Error>}
     * @memberof WebhookPayload
     */
    errors?: Array<Error>;
    /**
     * 
     * @type {Event}
     * @memberof WebhookPayload
     */
    event?: Event;
    /**
     * The channel ID
     * @type {string}
     * @memberof WebhookPayload
     */
    channelId?: string;
}

/**
 * Check if a given object implements the WebhookPayload interface.
 */
export function instanceOfWebhookPayload(value: object): value is WebhookPayload {
    return true;
}

export function WebhookPayloadFromJSON(json: any): WebhookPayload {
    return WebhookPayloadFromJSONTyped(json, false);
}

export function WebhookPayloadFromJSONTyped(json: any, ignoreDiscriminator: boolean): WebhookPayload {
    if (json == null) {
        return json;
    }
    return {
        
        'contacts': json['contacts'] == null ? undefined : ((json['contacts'] as Array<any>).map(ContactFromJSON)),
        'messages': json['messages'] == null ? undefined : ((json['messages'] as Array<any>).map(MessageFromJSON)),
        'messagesUpdates': json['messages_updates'] == null ? undefined : ((json['messages_updates'] as Array<any>).map(MessageUpdateFromJSON)),
        'messagesRemoved': json['messages_removed'] == null ? undefined : json['messages_removed'],
        'messagesRemovedAll': json['messages_removed_all'] == null ? undefined : json['messages_removed_all'],
        'statuses': json['statuses'] == null ? undefined : ((json['statuses'] as Array<any>).map(StatusFromJSON)),
        'chats': json['chats'] == null ? undefined : ((json['chats'] as Array<any>).map(ChatFromJSON)),
        'chatsUpdates': json['chats_updates'] == null ? undefined : ((json['chats_updates'] as Array<any>).map(ChatUpdateFromJSON)),
        'chatsRemoved': json['chats_removed'] == null ? undefined : json['chats_removed'],
        'contactsUpdates': json['contacts_updates'] == null ? undefined : ((json['contacts_updates'] as Array<any>).map(ContactUpdateFromJSON)),
        'groups': json['groups'] == null ? undefined : ((json['groups'] as Array<any>).map(GroupFromJSON)),
        'groupsParticipants': json['groups_participants'] == null ? undefined : ((json['groups_participants'] as Array<any>).map(ParticipantEventFromJSON)),
        'groupsUpdates': json['groups_updates'] == null ? undefined : ((json['groups_updates'] as Array<any>).map(GroupUpdateFromJSON)),
        'presences': json['presences'] == null ? undefined : ((json['presences'] as Array<any>).map(PresenceFromJSON)),
        'labels': json['labels'] == null ? undefined : ((json['labels'] as Array<any>).map(LabelFromJSON)),
        'labelsRemoved': json['labels_removed'] == null ? undefined : json['labels_removed'],
        'calls': json['calls'] == null ? undefined : ((json['calls'] as Array<any>).map(CallEventFromJSON)),
        'qr': json['qr'] == null ? undefined : QRFromJSON(json['qr']),
        'health': json['health'] == null ? undefined : HealthFromJSON(json['health']),
        'user': json['user'] == null ? undefined : ContactFromJSON(json['user']),
        'errors': json['errors'] == null ? undefined : json['errors'],
        'event': json['event'] == null ? undefined : EventFromJSON(json['event']),
        'channelId': json['channel_id'] == null ? undefined : json['channel_id'],
    };
}

export function WebhookPayloadToJSON(json: any): WebhookPayload {
    return WebhookPayloadToJSONTyped(json, false);
}

export function WebhookPayloadToJSONTyped(value?: WebhookPayload | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'contacts': value['contacts'] == null ? undefined : ((value['contacts'] as Array<any>).map(ContactToJSON)),
        'messages': value['messages'] == null ? undefined : ((value['messages'] as Array<any>).map(MessageToJSON)),
        'messages_updates': value['messagesUpdates'] == null ? undefined : ((value['messagesUpdates'] as Array<any>).map(MessageUpdateToJSON)),
        'messages_removed': value['messagesRemoved'],
        'messages_removed_all': value['messagesRemovedAll'],
        'statuses': value['statuses'] == null ? undefined : ((value['statuses'] as Array<any>).map(StatusToJSON)),
        'chats': value['chats'] == null ? undefined : ((value['chats'] as Array<any>).map(ChatToJSON)),
        'chats_updates': value['chatsUpdates'] == null ? undefined : ((value['chatsUpdates'] as Array<any>).map(ChatUpdateToJSON)),
        'chats_removed': value['chatsRemoved'],
        'contacts_updates': value['contactsUpdates'] == null ? undefined : ((value['contactsUpdates'] as Array<any>).map(ContactUpdateToJSON)),
        'groups': value['groups'] == null ? undefined : ((value['groups'] as Array<any>).map(GroupToJSON)),
        'groups_participants': value['groupsParticipants'] == null ? undefined : ((value['groupsParticipants'] as Array<any>).map(ParticipantEventToJSON)),
        'groups_updates': value['groupsUpdates'] == null ? undefined : ((value['groupsUpdates'] as Array<any>).map(GroupUpdateToJSON)),
        'presences': value['presences'] == null ? undefined : ((value['presences'] as Array<any>).map(PresenceToJSON)),
        'labels': value['labels'] == null ? undefined : ((value['labels'] as Array<any>).map(LabelToJSON)),
        'labels_removed': value['labelsRemoved'],
        'calls': value['calls'] == null ? undefined : ((value['calls'] as Array<any>).map(CallEventToJSON)),
        'qr': QRToJSON(value['qr']),
        'health': HealthToJSON(value['health']),
        'user': ContactToJSON(value['user']),
        'errors': value['errors'],
        'event': EventToJSON(value['event']),
        'channel_id': value['channelId'],
    };
}

