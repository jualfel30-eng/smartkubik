/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface MessageReaction
 */
export interface MessageReaction {
    /**
     * Reaction ID
     * @type {string}
     * @memberof MessageReaction
     */
    id?: string;
    /**
     * Reaction text
     * @type {string}
     * @memberof MessageReaction
     */
    emoji: string;
    /**
     * Reaction group key
     * @type {string}
     * @memberof MessageReaction
     */
    groupKey?: string;
    /**
     * Reaction timestamp
     * @type {number}
     * @memberof MessageReaction
     */
    t?: number;
    /**
     * Is reaction unread
     * @type {boolean}
     * @memberof MessageReaction
     */
    unread?: boolean;
    /**
     * Reaction count
     * @type {number}
     * @memberof MessageReaction
     */
    count?: number;
}

/**
 * Check if a given object implements the MessageReaction interface.
 */
export function instanceOfMessageReaction(value: object): value is MessageReaction {
    if (!('emoji' in value) || value['emoji'] === undefined) return false;
    return true;
}

export function MessageReactionFromJSON(json: any): MessageReaction {
    return MessageReactionFromJSONTyped(json, false);
}

export function MessageReactionFromJSONTyped(json: any, ignoreDiscriminator: boolean): MessageReaction {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'emoji': json['emoji'],
        'groupKey': json['group_key'] == null ? undefined : json['group_key'],
        't': json['t'] == null ? undefined : json['t'],
        'unread': json['unread'] == null ? undefined : json['unread'],
        'count': json['count'] == null ? undefined : json['count'],
    };
}

export function MessageReactionToJSON(json: any): MessageReaction {
    return MessageReactionToJSONTyped(json, false);
}

export function MessageReactionToJSONTyped(value?: MessageReaction | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'emoji': value['emoji'],
        'group_key': value['groupKey'],
        't': value['t'],
        'unread': value['unread'],
        'count': value['count'],
    };
}

