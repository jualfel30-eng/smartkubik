/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MediaFile } from './MediaFile';
import {
    MediaFileFromJSON,
    MediaFileFromJSONTyped,
    MediaFileToJSON,
    MediaFileToJSONTyped,
} from './MediaFile';
import type { MessageContentLocation } from './MessageContentLocation';
import {
    MessageContentLocationFromJSON,
    MessageContentLocationFromJSONTyped,
    MessageContentLocationToJSON,
    MessageContentLocationToJSONTyped,
} from './MessageContentLocation';
import type { MessagePropsText } from './MessagePropsText';
import {
    MessagePropsTextFromJSON,
    MessagePropsTextFromJSONTyped,
    MessagePropsTextToJSON,
    MessagePropsTextToJSONTyped,
} from './MessagePropsText';

/**
 * Header
 * @export
 * @interface MessageContentHSMHeader
 */
export interface MessageContentHSMHeader {
    /**
     * Header type
     * @type {string}
     * @memberof MessageContentHSMHeader
     */
    type?: MessageContentHSMHeaderTypeEnum;
    /**
     * 
     * @type {MessagePropsText}
     * @memberof MessageContentHSMHeader
     */
    text?: MessagePropsText;
    /**
     * 
     * @type {MediaFile}
     * @memberof MessageContentHSMHeader
     */
    image?: MediaFile;
    /**
     * 
     * @type {MediaFile}
     * @memberof MessageContentHSMHeader
     */
    video?: MediaFile;
    /**
     * 
     * @type {MediaFile}
     * @memberof MessageContentHSMHeader
     */
    document?: MediaFile;
    /**
     * 
     * @type {MessageContentLocation}
     * @memberof MessageContentHSMHeader
     */
    location?: MessageContentLocation;
}


/**
 * @export
 */
export const MessageContentHSMHeaderTypeEnum = {
    Text: 'text',
    Image: 'image',
    Video: 'video',
    Document: 'document',
    Location: 'location'
} as const;
export type MessageContentHSMHeaderTypeEnum = typeof MessageContentHSMHeaderTypeEnum[keyof typeof MessageContentHSMHeaderTypeEnum];


/**
 * Check if a given object implements the MessageContentHSMHeader interface.
 */
export function instanceOfMessageContentHSMHeader(value: object): value is MessageContentHSMHeader {
    return true;
}

export function MessageContentHSMHeaderFromJSON(json: any): MessageContentHSMHeader {
    return MessageContentHSMHeaderFromJSONTyped(json, false);
}

export function MessageContentHSMHeaderFromJSONTyped(json: any, ignoreDiscriminator: boolean): MessageContentHSMHeader {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'] == null ? undefined : json['type'],
        'text': json['text'] == null ? undefined : MessagePropsTextFromJSON(json['text']),
        'image': json['image'] == null ? undefined : MediaFileFromJSON(json['image']),
        'video': json['video'] == null ? undefined : MediaFileFromJSON(json['video']),
        'document': json['document'] == null ? undefined : MediaFileFromJSON(json['document']),
        'location': json['location'] == null ? undefined : MessageContentLocationFromJSON(json['location']),
    };
}

export function MessageContentHSMHeaderToJSON(json: any): MessageContentHSMHeader {
    return MessageContentHSMHeaderToJSONTyped(json, false);
}

export function MessageContentHSMHeaderToJSONTyped(value?: MessageContentHSMHeader | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'text': MessagePropsTextToJSON(value['text']),
        'image': MediaFileToJSON(value['image']),
        'video': MediaFileToJSON(value['video']),
        'document': MediaFileToJSON(value['document']),
        'location': MessageContentLocationToJSON(value['location']),
    };
}

