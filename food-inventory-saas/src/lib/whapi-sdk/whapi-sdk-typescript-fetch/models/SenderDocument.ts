/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SendMediaMedia } from './SendMediaMedia';
import {
    SendMediaMediaFromJSON,
    SendMediaMediaFromJSONTyped,
    SendMediaMediaToJSON,
    SendMediaMediaToJSONTyped,
} from './SendMediaMedia';

/**
 * 
 * @export
 * @interface SenderDocument
 */
export interface SenderDocument {
    /**
     * Use the phone number or [Chat ID](https://support.whapi.cloud/help-desk/faq/chat-id.-what-is-it-and-how-to-get-it) of the contact/group/channel to which you want to send the message. Use [Get groups](https://whapi.readme.io/reference/getgroups) to get the group ID.
     * @type {string}
     * @memberof SenderDocument
     */
    to: string;
    /**
     * Message ID of the message to be quoted
     * @type {string}
     * @memberof SenderDocument
     */
    quoted?: string;
    /**
     * Time in seconds for the message to be deleted. The Disappearing messages setting should be enabled in the chat where you are sending this message.
     * @type {number}
     * @memberof SenderDocument
     */
    ephemeral?: number;
    /**
     * Message ID of the message to be edited
     * @type {string}
     * @memberof SenderDocument
     */
    edit?: string;
    /**
     * 
     * @type {SendMediaMedia}
     * @memberof SenderDocument
     */
    media: SendMediaMedia;
    /**
     * Mime type of media
     * @type {string}
     * @memberof SenderDocument
     */
    mimeType?: string;
    /**
     * Do not use our encoding
     * @type {boolean}
     * @memberof SenderDocument
     */
    noEncode?: boolean;
    /**
     * Do not use the cache in a request
     * @type {boolean}
     * @memberof SenderDocument
     */
    noCache?: boolean;
    /**
     * Optional. Text caption under the document.
     * @type {string}
     * @memberof SenderDocument
     */
    caption?: string;
    /**
     * Optional. File name
     * @type {string}
     * @memberof SenderDocument
     */
    filename?: string;
    /**
     * Is view once
     * @type {boolean}
     * @memberof SenderDocument
     */
    viewOnce?: boolean;
}

/**
 * Check if a given object implements the SenderDocument interface.
 */
export function instanceOfSenderDocument(value: object): value is SenderDocument {
    if (!('to' in value) || value['to'] === undefined) return false;
    if (!('media' in value) || value['media'] === undefined) return false;
    return true;
}

export function SenderDocumentFromJSON(json: any): SenderDocument {
    return SenderDocumentFromJSONTyped(json, false);
}

export function SenderDocumentFromJSONTyped(json: any, ignoreDiscriminator: boolean): SenderDocument {
    if (json == null) {
        return json;
    }
    return {
        
        'to': json['to'],
        'quoted': json['quoted'] == null ? undefined : json['quoted'],
        'ephemeral': json['ephemeral'] == null ? undefined : json['ephemeral'],
        'edit': json['edit'] == null ? undefined : json['edit'],
        'media': SendMediaMediaFromJSON(json['media']),
        'mimeType': json['mime_type'] == null ? undefined : json['mime_type'],
        'noEncode': json['no_encode'] == null ? undefined : json['no_encode'],
        'noCache': json['no_cache'] == null ? undefined : json['no_cache'],
        'caption': json['caption'] == null ? undefined : json['caption'],
        'filename': json['filename'] == null ? undefined : json['filename'],
        'viewOnce': json['view_once'] == null ? undefined : json['view_once'],
    };
}

export function SenderDocumentToJSON(json: any): SenderDocument {
    return SenderDocumentToJSONTyped(json, false);
}

export function SenderDocumentToJSONTyped(value?: SenderDocument | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'to': value['to'],
        'quoted': value['quoted'],
        'ephemeral': value['ephemeral'],
        'edit': value['edit'],
        'media': SendMediaMediaToJSON(value['media']),
        'mime_type': value['mimeType'],
        'no_encode': value['noEncode'],
        'no_cache': value['noCache'],
        'caption': value['caption'],
        'filename': value['filename'],
        'view_once': value['viewOnce'],
    };
}

