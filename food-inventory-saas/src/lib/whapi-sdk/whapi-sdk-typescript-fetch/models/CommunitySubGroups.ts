/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CommunitySubGroupsOtherGroupsInner } from './CommunitySubGroupsOtherGroupsInner';
import {
    CommunitySubGroupsOtherGroupsInnerFromJSON,
    CommunitySubGroupsOtherGroupsInnerFromJSONTyped,
    CommunitySubGroupsOtherGroupsInnerToJSON,
    CommunitySubGroupsOtherGroupsInnerToJSONTyped,
} from './CommunitySubGroupsOtherGroupsInner';
import type { CommunitySubGroupsAnnounceGroupInfo } from './CommunitySubGroupsAnnounceGroupInfo';
import {
    CommunitySubGroupsAnnounceGroupInfoFromJSON,
    CommunitySubGroupsAnnounceGroupInfoFromJSONTyped,
    CommunitySubGroupsAnnounceGroupInfoToJSON,
    CommunitySubGroupsAnnounceGroupInfoToJSONTyped,
} from './CommunitySubGroupsAnnounceGroupInfo';

/**
 * 
 * @export
 * @interface CommunitySubGroups
 */
export interface CommunitySubGroups {
    /**
     * 
     * @type {CommunitySubGroupsAnnounceGroupInfo}
     * @memberof CommunitySubGroups
     */
    announceGroupInfo: CommunitySubGroupsAnnounceGroupInfo;
    /**
     * 
     * @type {Array<CommunitySubGroupsOtherGroupsInner>}
     * @memberof CommunitySubGroups
     */
    otherGroups: Array<CommunitySubGroupsOtherGroupsInner>;
}

/**
 * Check if a given object implements the CommunitySubGroups interface.
 */
export function instanceOfCommunitySubGroups(value: object): value is CommunitySubGroups {
    if (!('announceGroupInfo' in value) || value['announceGroupInfo'] === undefined) return false;
    if (!('otherGroups' in value) || value['otherGroups'] === undefined) return false;
    return true;
}

export function CommunitySubGroupsFromJSON(json: any): CommunitySubGroups {
    return CommunitySubGroupsFromJSONTyped(json, false);
}

export function CommunitySubGroupsFromJSONTyped(json: any, ignoreDiscriminator: boolean): CommunitySubGroups {
    if (json == null) {
        return json;
    }
    return {
        
        'announceGroupInfo': CommunitySubGroupsAnnounceGroupInfoFromJSON(json['announceGroupInfo']),
        'otherGroups': ((json['otherGroups'] as Array<any>).map(CommunitySubGroupsOtherGroupsInnerFromJSON)),
    };
}

export function CommunitySubGroupsToJSON(json: any): CommunitySubGroups {
    return CommunitySubGroupsToJSONTyped(json, false);
}

export function CommunitySubGroupsToJSONTyped(value?: CommunitySubGroups | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'announceGroupInfo': CommunitySubGroupsAnnounceGroupInfoToJSON(value['announceGroupInfo']),
        'otherGroups': ((value['otherGroups'] as Array<any>).map(CommunitySubGroupsOtherGroupsInnerToJSON)),
    };
}

