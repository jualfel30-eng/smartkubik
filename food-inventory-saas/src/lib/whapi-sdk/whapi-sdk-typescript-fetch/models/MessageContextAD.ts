/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MessageContextADSource } from './MessageContextADSource';
import {
    MessageContextADSourceFromJSON,
    MessageContextADSourceFromJSONTyped,
    MessageContextADSourceToJSON,
    MessageContextADSourceToJSONTyped,
} from './MessageContextADSource';
import type { MediaMessageType } from './MediaMessageType';
import {
    MediaMessageTypeFromJSON,
    MediaMessageTypeFromJSONTyped,
    MediaMessageTypeToJSON,
    MediaMessageTypeToJSONTyped,
} from './MediaMessageType';

/**
 * Advertisement message from META-business
 * @export
 * @interface MessageContextAD
 */
export interface MessageContextAD {
    /**
     * Name of the advertiser
     * @type {string}
     * @memberof MessageContextAD
     */
    advertiserName?: string;
    /**
     * 
     * @type {MediaMessageType}
     * @memberof MessageContextAD
     */
    mediaType?: MediaMessageType;
    /**
     * Base64 encoded preview. In JPEG format.
     * @type {string}
     * @memberof MessageContextAD
     */
    preview?: string;
    /**
     * URL of the preview
     * @type {string}
     * @memberof MessageContextAD
     */
    previewUrl?: string;
    /**
     * Title of the advertisement
     * @type {string}
     * @memberof MessageContextAD
     */
    title?: string;
    /**
     * Body of the advertisement
     * @type {string}
     * @memberof MessageContextAD
     */
    body?: string;
    /**
     * URL of the media
     * @type {string}
     * @memberof MessageContextAD
     */
    mediaUrl?: string;
    /**
     * 
     * @type {MessageContextADSource}
     * @memberof MessageContextAD
     */
    source?: MessageContextADSource;
    /**
     * True if the advertisement contains an auto-reply
     * @type {boolean}
     * @memberof MessageContextAD
     */
    autoReply?: boolean;
    /**
     * True if the advertisement shows the attributions
     * @type {boolean}
     * @memberof MessageContextAD
     */
    attrib?: boolean;
    /**
     * Call to action
     * @type {string}
     * @memberof MessageContextAD
     */
    ctwa?: string;
    /**
     * Reference
     * @type {string}
     * @memberof MessageContextAD
     */
    ref?: string;
}



/**
 * Check if a given object implements the MessageContextAD interface.
 */
export function instanceOfMessageContextAD(value: object): value is MessageContextAD {
    return true;
}

export function MessageContextADFromJSON(json: any): MessageContextAD {
    return MessageContextADFromJSONTyped(json, false);
}

export function MessageContextADFromJSONTyped(json: any, ignoreDiscriminator: boolean): MessageContextAD {
    if (json == null) {
        return json;
    }
    return {
        
        'advertiserName': json['advertiser_name'] == null ? undefined : json['advertiser_name'],
        'mediaType': json['media_type'] == null ? undefined : MediaMessageTypeFromJSON(json['media_type']),
        'preview': json['preview'] == null ? undefined : json['preview'],
        'previewUrl': json['preview_url'] == null ? undefined : json['preview_url'],
        'title': json['title'] == null ? undefined : json['title'],
        'body': json['body'] == null ? undefined : json['body'],
        'mediaUrl': json['media_url'] == null ? undefined : json['media_url'],
        'source': json['source'] == null ? undefined : MessageContextADSourceFromJSON(json['source']),
        'autoReply': json['auto_reply'] == null ? undefined : json['auto_reply'],
        'attrib': json['attrib'] == null ? undefined : json['attrib'],
        'ctwa': json['ctwa'] == null ? undefined : json['ctwa'],
        'ref': json['ref'] == null ? undefined : json['ref'],
    };
}

export function MessageContextADToJSON(json: any): MessageContextAD {
    return MessageContextADToJSONTyped(json, false);
}

export function MessageContextADToJSONTyped(value?: MessageContextAD | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'advertiser_name': value['advertiserName'],
        'media_type': MediaMessageTypeToJSON(value['mediaType']),
        'preview': value['preview'],
        'preview_url': value['previewUrl'],
        'title': value['title'],
        'body': value['body'],
        'media_url': value['mediaUrl'],
        'source': MessageContextADSourceToJSON(value['source']),
        'auto_reply': value['autoReply'],
        'attrib': value['attrib'],
        'ctwa': value['ctwa'],
        'ref': value['ref'],
    };
}

