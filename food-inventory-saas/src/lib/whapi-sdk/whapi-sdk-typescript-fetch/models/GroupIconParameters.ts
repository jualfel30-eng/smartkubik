/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { GroupIconParametersMedia } from './GroupIconParametersMedia';
import {
    GroupIconParametersMediaFromJSON,
    GroupIconParametersMediaFromJSONTyped,
    GroupIconParametersMediaToJSON,
    GroupIconParametersMediaToJSONTyped,
} from './GroupIconParametersMedia';

/**
 * Group icon. You can use preuploaded file or upload file on the fly.
 * 
 * @export
 * @interface GroupIconParameters
 */
export interface GroupIconParameters {
    /**
     * 
     * @type {GroupIconParametersMedia}
     * @memberof GroupIconParameters
     */
    media: GroupIconParametersMedia;
    /**
     * Mime type of media
     * @type {string}
     * @memberof GroupIconParameters
     */
    mimeType?: string;
}

/**
 * Check if a given object implements the GroupIconParameters interface.
 */
export function instanceOfGroupIconParameters(value: object): value is GroupIconParameters {
    if (!('media' in value) || value['media'] === undefined) return false;
    return true;
}

export function GroupIconParametersFromJSON(json: any): GroupIconParameters {
    return GroupIconParametersFromJSONTyped(json, false);
}

export function GroupIconParametersFromJSONTyped(json: any, ignoreDiscriminator: boolean): GroupIconParameters {
    if (json == null) {
        return json;
    }
    return {
        
        'media': GroupIconParametersMediaFromJSON(json['media']),
        'mimeType': json['mime_type'] == null ? undefined : json['mime_type'],
    };
}

export function GroupIconParametersToJSON(json: any): GroupIconParameters {
    return GroupIconParametersToJSONTyped(json, false);
}

export function GroupIconParametersToJSONTyped(value?: GroupIconParameters | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'media': GroupIconParametersMediaToJSON(value['media']),
        'mime_type': value['mimeType'],
    };
}

