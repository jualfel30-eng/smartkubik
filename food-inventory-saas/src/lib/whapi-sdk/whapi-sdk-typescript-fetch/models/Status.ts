/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { StatusEnum } from './StatusEnum';
import {
    StatusEnumFromJSON,
    StatusEnumFromJSONTyped,
    StatusEnumToJSON,
    StatusEnumToJSONTyped,
} from './StatusEnum';

/**
 * 
 * @export
 * @interface Status
 */
export interface Status {
    /**
     * 
     * @type {Array<Error>}
     * @memberof Status
     */
    errors?: Array<Error>;
    /**
     * Message ID from event
     * @type {string}
     * @memberof Status
     */
    id: string;
    /**
     * Status code
     * @type {number}
     * @memberof Status
     */
    code: number;
    /**
     * 
     * @type {StatusEnum}
     * @memberof Status
     */
    status: StatusEnum;
    /**
     * Chat ID
     * @type {string}
     * @memberof Status
     */
    recipientId?: string;
    /**
     * Contact ID
     * @type {string}
     * @memberof Status
     */
    viewerId?: string;
    /**
     * Timestamp of the status message
     * @type {string}
     * @memberof Status
     */
    timestamp: string;
}



/**
 * Check if a given object implements the Status interface.
 */
export function instanceOfStatus(value: object): value is Status {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('code' in value) || value['code'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('timestamp' in value) || value['timestamp'] === undefined) return false;
    return true;
}

export function StatusFromJSON(json: any): Status {
    return StatusFromJSONTyped(json, false);
}

export function StatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): Status {
    if (json == null) {
        return json;
    }
    return {
        
        'errors': json['errors'] == null ? undefined : json['errors'],
        'id': json['id'],
        'code': json['code'],
        'status': StatusEnumFromJSON(json['status']),
        'recipientId': json['recipient_id'] == null ? undefined : json['recipient_id'],
        'viewerId': json['viewer_id'] == null ? undefined : json['viewer_id'],
        'timestamp': json['timestamp'],
    };
}

export function StatusToJSON(json: any): Status {
    return StatusToJSONTyped(json, false);
}

export function StatusToJSONTyped(value?: Status | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'errors': value['errors'],
        'id': value['id'],
        'code': value['code'],
        'status': StatusEnumToJSON(value['status']),
        'recipient_id': value['recipientId'],
        'viewer_id': value['viewerId'],
        'timestamp': value['timestamp'],
    };
}

