/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MessageContent } from './MessageContent';
import {
    MessageContentFromJSON,
    MessageContentFromJSONTyped,
    MessageContentToJSON,
    MessageContentToJSONTyped,
} from './MessageContent';
import type { EventResponse } from './EventResponse';
import {
    EventResponseFromJSON,
    EventResponseFromJSONTyped,
    EventResponseToJSON,
    EventResponseToJSONTyped,
} from './EventResponse';
import type { MessageType } from './MessageType';
import {
    MessageTypeFromJSON,
    MessageTypeFromJSONTyped,
    MessageTypeToJSON,
    MessageTypeToJSONTyped,
} from './MessageType';

/**
 * 
 * @export
 * @interface MessageAction
 */
export interface MessageAction {
    /**
     * Target message ID or chat ID
     * @type {string}
     * @memberof MessageAction
     */
    target?: string;
    /**
     * Type of action
     * @type {string}
     * @memberof MessageAction
     */
    type: MessageActionTypeEnum;
    /**
     * Action emoji for reaction
     * @type {string}
     * @memberof MessageAction
     */
    emoji?: string;
    /**
     * Ephemeral message duration
     * @type {number}
     * @memberof MessageAction
     */
    ephemeral?: number;
    /**
     * 
     * @type {MessageType}
     * @memberof MessageAction
     */
    editedType?: MessageType;
    /**
     * 
     * @type {MessageContent}
     * @memberof MessageAction
     */
    editedContent?: MessageContent;
    /**
     * List of poll options
     * @type {Array<string>}
     * @memberof MessageAction
     */
    votes?: Array<string>;
    /**
     * Comment
     * @type {string}
     * @memberof MessageAction
     */
    comment?: string;
    /**
     * 
     * @type {EventResponse}
     * @memberof MessageAction
     */
    eventResponse?: EventResponse;
}


/**
 * @export
 */
export const MessageActionTypeEnum = {
    Edited: 'edited',
    Edit: 'edit',
    Delete: 'delete',
    Reaction: 'reaction',
    Ephemeral: 'ephemeral',
    Vote: 'vote',
    Comment: 'comment',
    EventResponse: 'event_response'
} as const;
export type MessageActionTypeEnum = typeof MessageActionTypeEnum[keyof typeof MessageActionTypeEnum];


/**
 * Check if a given object implements the MessageAction interface.
 */
export function instanceOfMessageAction(value: object): value is MessageAction {
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function MessageActionFromJSON(json: any): MessageAction {
    return MessageActionFromJSONTyped(json, false);
}

export function MessageActionFromJSONTyped(json: any, ignoreDiscriminator: boolean): MessageAction {
    if (json == null) {
        return json;
    }
    return {
        
        'target': json['target'] == null ? undefined : json['target'],
        'type': json['type'],
        'emoji': json['emoji'] == null ? undefined : json['emoji'],
        'ephemeral': json['ephemeral'] == null ? undefined : json['ephemeral'],
        'editedType': json['edited_type'] == null ? undefined : MessageTypeFromJSON(json['edited_type']),
        'editedContent': json['edited_content'] == null ? undefined : MessageContentFromJSON(json['edited_content']),
        'votes': json['votes'] == null ? undefined : json['votes'],
        'comment': json['comment'] == null ? undefined : json['comment'],
        'eventResponse': json['event_response'] == null ? undefined : EventResponseFromJSON(json['event_response']),
    };
}

export function MessageActionToJSON(json: any): MessageAction {
    return MessageActionToJSONTyped(json, false);
}

export function MessageActionToJSONTyped(value?: MessageAction | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'target': value['target'],
        'type': value['type'],
        'emoji': value['emoji'],
        'ephemeral': value['ephemeral'],
        'edited_type': MessageTypeToJSON(value['editedType']),
        'edited_content': MessageContentToJSON(value['editedContent']),
        'votes': value['votes'],
        'comment': value['comment'],
        'event_response': EventResponseToJSON(value['eventResponse']),
    };
}

