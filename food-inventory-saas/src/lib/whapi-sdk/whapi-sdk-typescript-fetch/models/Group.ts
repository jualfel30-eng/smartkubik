/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Message } from './Message';
import {
    MessageFromJSON,
    MessageFromJSONTyped,
    MessageToJSON,
    MessageToJSONTyped,
} from './Message';
import type { Participant } from './Participant';
import {
    ParticipantFromJSON,
    ParticipantFromJSONTyped,
    ParticipantToJSON,
    ParticipantToJSONTyped,
} from './Participant';
import type { Label } from './Label';
import {
    LabelFromJSON,
    LabelFromJSONTyped,
    LabelToJSON,
    LabelToJSONTyped,
} from './Label';

/**
 * 
 * @export
 * @interface Group
 */
export interface Group {
    /**
     * Chat ID
     * @type {string}
     * @memberof Group
     */
    id: string;
    /**
     * Group name
     * @type {string}
     * @memberof Group
     */
    name: string;
    /**
     * Chat type
     * @type {string}
     * @memberof Group
     */
    type: GroupTypeEnum;
    /**
     * Chat timestamp
     * @type {number}
     * @memberof Group
     */
    timestamp?: number;
    /**
     * Chat picture URL
     * @type {string}
     * @memberof Group
     */
    chatPic?: string;
    /**
     * Chat full picture URL
     * @type {string}
     * @memberof Group
     */
    chatPicFull?: string;
    /**
     * Is chat pinned
     * @type {boolean}
     * @memberof Group
     */
    pin?: boolean;
    /**
     * Is chat muted
     * @type {boolean}
     * @memberof Group
     */
    mute?: boolean;
    /**
     * Chat mute until
     * @type {number}
     * @memberof Group
     */
    muteUntil?: number;
    /**
     * Is chat archived
     * @type {boolean}
     * @memberof Group
     */
    archive?: boolean;
    /**
     * Unread messages count
     * @type {number}
     * @memberof Group
     */
    unread?: number;
    /**
     * Is chat unread mention
     * @type {boolean}
     * @memberof Group
     */
    unreadMention?: boolean;
    /**
     * Is chat read only
     * @type {boolean}
     * @memberof Group
     */
    readOnly?: boolean;
    /**
     * Is chat not spam
     * @type {boolean}
     * @memberof Group
     */
    notSpam?: boolean;
    /**
     * 
     * @type {Message}
     * @memberof Group
     */
    lastMessage?: Message;
    /**
     * Labels associated with chat
     * @type {Array<Label>}
     * @memberof Group
     */
    labels?: Array<Label>;
    /**
     * Group name owner
     * @type {string}
     * @memberof Group
     */
    nameOwner?: string;
    /**
     * Group name change timestamp
     * @type {number}
     * @memberof Group
     */
    nameAt?: number;
    /**
     * Group description
     * @type {string}
     * @memberof Group
     */
    description?: string;
    /**
     * Group description owner
     * @type {string}
     * @memberof Group
     */
    descriptionOwner?: string;
    /**
     * Group description ID
     * @type {string}
     * @memberof Group
     */
    descriptionId?: string;
    /**
     * Group size
     * @type {number}
     * @memberof Group
     */
    size: number;
    /**
     * Group participants
     * @type {Array<Participant>}
     * @memberof Group
     */
    participants: Array<Participant>;
    /**
     * Group creation timestamp
     * @type {number}
     * @memberof Group
     */
    createdAt?: number;
    /**
     * Contact ID
     * @type {string}
     * @memberof Group
     */
    createdBy?: string;
    /**
     * Is group suspended
     * @type {boolean}
     * @memberof Group
     */
    suspended?: boolean;
    /**
     * Is group terminated
     * @type {boolean}
     * @memberof Group
     */
    terminated?: boolean;
    /**
     * Is group parent
     * @type {boolean}
     * @memberof Group
     */
    isParent?: boolean;
    /**
     * Is group default subgroup
     * @type {boolean}
     * @memberof Group
     */
    isDefaultSubgroup?: boolean;
    /**
     * If only admins can change group settings
     * @type {boolean}
     * @memberof Group
     */
    restricted?: boolean;
    /**
     * If only admins can send messages
     * @type {boolean}
     * @memberof Group
     */
    announcements?: boolean;
    /**
     * If only admins can add members
     * @type {boolean}
     * @memberof Group
     */
    adminAddMemberMode?: boolean;
    /**
     * Group ephemeral timer
     * @type {number}
     * @memberof Group
     */
    ephemeral?: number;
    /**
     * Group invite code
     * @type {string}
     * @memberof Group
     */
    inviteCode?: string;
    /**
     * If group is community announce
     * @type {boolean}
     * @memberof Group
     */
    isCommunityAnnounce?: boolean;
    /**
     * Chat ID
     * @type {string}
     * @memberof Group
     */
    linkedParent?: string;
}


/**
 * @export
 */
export const GroupTypeEnum = {
    Group: 'group',
    Contact: 'contact',
    Broadcast: 'broadcast',
    Newsletter: 'newsletter',
    Unknown: 'unknown'
} as const;
export type GroupTypeEnum = typeof GroupTypeEnum[keyof typeof GroupTypeEnum];


/**
 * Check if a given object implements the Group interface.
 */
export function instanceOfGroup(value: object): value is Group {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('size' in value) || value['size'] === undefined) return false;
    if (!('participants' in value) || value['participants'] === undefined) return false;
    return true;
}

export function GroupFromJSON(json: any): Group {
    return GroupFromJSONTyped(json, false);
}

export function GroupFromJSONTyped(json: any, ignoreDiscriminator: boolean): Group {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'type': json['type'],
        'timestamp': json['timestamp'] == null ? undefined : json['timestamp'],
        'chatPic': json['chat_pic'] == null ? undefined : json['chat_pic'],
        'chatPicFull': json['chat_pic_full'] == null ? undefined : json['chat_pic_full'],
        'pin': json['pin'] == null ? undefined : json['pin'],
        'mute': json['mute'] == null ? undefined : json['mute'],
        'muteUntil': json['mute_until'] == null ? undefined : json['mute_until'],
        'archive': json['archive'] == null ? undefined : json['archive'],
        'unread': json['unread'] == null ? undefined : json['unread'],
        'unreadMention': json['unread_mention'] == null ? undefined : json['unread_mention'],
        'readOnly': json['read_only'] == null ? undefined : json['read_only'],
        'notSpam': json['not_spam'] == null ? undefined : json['not_spam'],
        'lastMessage': json['last_message'] == null ? undefined : MessageFromJSON(json['last_message']),
        'labels': json['labels'] == null ? undefined : ((json['labels'] as Array<any>).map(LabelFromJSON)),
        'nameOwner': json['name_owner'] == null ? undefined : json['name_owner'],
        'nameAt': json['name_at'] == null ? undefined : json['name_at'],
        'description': json['description'] == null ? undefined : json['description'],
        'descriptionOwner': json['description_owner'] == null ? undefined : json['description_owner'],
        'descriptionId': json['description_id'] == null ? undefined : json['description_id'],
        'size': json['size'],
        'participants': ((json['participants'] as Array<any>).map(ParticipantFromJSON)),
        'createdAt': json['created_at'] == null ? undefined : json['created_at'],
        'createdBy': json['created_by'] == null ? undefined : json['created_by'],
        'suspended': json['suspended'] == null ? undefined : json['suspended'],
        'terminated': json['terminated'] == null ? undefined : json['terminated'],
        'isParent': json['is_parent'] == null ? undefined : json['is_parent'],
        'isDefaultSubgroup': json['is_default_subgroup'] == null ? undefined : json['is_default_subgroup'],
        'restricted': json['restricted'] == null ? undefined : json['restricted'],
        'announcements': json['announcements'] == null ? undefined : json['announcements'],
        'adminAddMemberMode': json['adminAddMemberMode'] == null ? undefined : json['adminAddMemberMode'],
        'ephemeral': json['ephemeral'] == null ? undefined : json['ephemeral'],
        'inviteCode': json['invite_code'] == null ? undefined : json['invite_code'],
        'isCommunityAnnounce': json['isCommunityAnnounce'] == null ? undefined : json['isCommunityAnnounce'],
        'linkedParent': json['linkedParent'] == null ? undefined : json['linkedParent'],
    };
}

export function GroupToJSON(json: any): Group {
    return GroupToJSONTyped(json, false);
}

export function GroupToJSONTyped(value?: Group | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'name': value['name'],
        'type': value['type'],
        'timestamp': value['timestamp'],
        'chat_pic': value['chatPic'],
        'chat_pic_full': value['chatPicFull'],
        'pin': value['pin'],
        'mute': value['mute'],
        'mute_until': value['muteUntil'],
        'archive': value['archive'],
        'unread': value['unread'],
        'unread_mention': value['unreadMention'],
        'read_only': value['readOnly'],
        'not_spam': value['notSpam'],
        'last_message': MessageToJSON(value['lastMessage']),
        'labels': value['labels'] == null ? undefined : ((value['labels'] as Array<any>).map(LabelToJSON)),
        'name_owner': value['nameOwner'],
        'name_at': value['nameAt'],
        'description': value['description'],
        'description_owner': value['descriptionOwner'],
        'description_id': value['descriptionId'],
        'size': value['size'],
        'participants': ((value['participants'] as Array<any>).map(ParticipantToJSON)),
        'created_at': value['createdAt'],
        'created_by': value['createdBy'],
        'suspended': value['suspended'],
        'terminated': value['terminated'],
        'is_parent': value['isParent'],
        'is_default_subgroup': value['isDefaultSubgroup'],
        'restricted': value['restricted'],
        'announcements': value['announcements'],
        'adminAddMemberMode': value['adminAddMemberMode'],
        'ephemeral': value['ephemeral'],
        'invite_code': value['inviteCode'],
        'isCommunityAnnounce': value['isCommunityAnnounce'],
        'linkedParent': value['linkedParent'],
    };
}

