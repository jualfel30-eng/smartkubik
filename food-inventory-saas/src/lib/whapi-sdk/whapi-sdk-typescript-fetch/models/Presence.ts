/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Presence
 */
export interface Presence {
    /**
     * Contact ID
     * @type {string}
     * @memberof Presence
     */
    contactId: string;
    /**
     * Last seen timestamp
     * @type {number}
     * @memberof Presence
     */
    lastSeen?: number;
    /**
     * Presence status
     * @type {string}
     * @memberof Presence
     */
    status?: PresenceStatusEnum;
}


/**
 * @export
 */
export const PresenceStatusEnum = {
    Online: 'online',
    Offline: 'offline',
    Typing: 'typing',
    Recording: 'recording',
    Pending: 'pending'
} as const;
export type PresenceStatusEnum = typeof PresenceStatusEnum[keyof typeof PresenceStatusEnum];


/**
 * Check if a given object implements the Presence interface.
 */
export function instanceOfPresence(value: object): value is Presence {
    if (!('contactId' in value) || value['contactId'] === undefined) return false;
    return true;
}

export function PresenceFromJSON(json: any): Presence {
    return PresenceFromJSONTyped(json, false);
}

export function PresenceFromJSONTyped(json: any, ignoreDiscriminator: boolean): Presence {
    if (json == null) {
        return json;
    }
    return {
        
        'contactId': json['contact_id'],
        'lastSeen': json['last_seen'] == null ? undefined : json['last_seen'],
        'status': json['status'] == null ? undefined : json['status'],
    };
}

export function PresenceToJSON(json: any): Presence {
    return PresenceToJSONTyped(json, false);
}

export function PresenceToJSONTyped(value?: Presence | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'contact_id': value['contactId'],
        'last_seen': value['lastSeen'],
        'status': value['status'],
    };
}

