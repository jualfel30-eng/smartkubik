/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Settings } from './Settings';
import {
    SettingsFromJSON,
    SettingsFromJSONTyped,
    SettingsToJSON,
    SettingsToJSONTyped,
} from './Settings';

/**
 * 
 * @export
 * @interface UpdateSettings
 */
export interface UpdateSettings {
    /**
     * 
     * @type {Settings}
     * @memberof UpdateSettings
     */
    beforeUpdate: Settings;
    /**
     * 
     * @type {Settings}
     * @memberof UpdateSettings
     */
    afterUpdate: Settings;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateSettings
     */
    changes: Array<UpdateSettingsChangesEnum>;
}


/**
 * @export
 */
export const UpdateSettingsChangesEnum = {
    CallbackBackoffDelayMs: 'callback_backoff_delay_ms',
    MaxCallbackBackoffDelayMs: 'max_callback_backoff_delay_ms',
    CallbackPersist: 'callback_persist',
    Media: 'media',
    Webhooks: 'webhooks',
    OnCallPager: 'on_call_pager',
    PassThrough: 'pass_through',
    SentStatus: 'sent_status',
    Proxy: 'proxy',
    MobileProxy: 'mobile_proxy'
} as const;
export type UpdateSettingsChangesEnum = typeof UpdateSettingsChangesEnum[keyof typeof UpdateSettingsChangesEnum];


/**
 * Check if a given object implements the UpdateSettings interface.
 */
export function instanceOfUpdateSettings(value: object): value is UpdateSettings {
    if (!('beforeUpdate' in value) || value['beforeUpdate'] === undefined) return false;
    if (!('afterUpdate' in value) || value['afterUpdate'] === undefined) return false;
    if (!('changes' in value) || value['changes'] === undefined) return false;
    return true;
}

export function UpdateSettingsFromJSON(json: any): UpdateSettings {
    return UpdateSettingsFromJSONTyped(json, false);
}

export function UpdateSettingsFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateSettings {
    if (json == null) {
        return json;
    }
    return {
        
        'beforeUpdate': SettingsFromJSON(json['before_update']),
        'afterUpdate': SettingsFromJSON(json['after_update']),
        'changes': json['changes'],
    };
}

export function UpdateSettingsToJSON(json: any): UpdateSettings {
    return UpdateSettingsToJSONTyped(json, false);
}

export function UpdateSettingsToJSONTyped(value?: UpdateSettings | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'before_update': SettingsToJSON(value['beforeUpdate']),
        'after_update': SettingsToJSON(value['afterUpdate']),
        'changes': value['changes'],
    };
}

