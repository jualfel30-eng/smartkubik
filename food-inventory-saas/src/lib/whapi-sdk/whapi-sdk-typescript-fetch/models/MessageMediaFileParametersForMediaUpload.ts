/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MessageMediaFileParametersForMediaUploadMedia } from './MessageMediaFileParametersForMediaUploadMedia';
import {
    MessageMediaFileParametersForMediaUploadMediaFromJSON,
    MessageMediaFileParametersForMediaUploadMediaFromJSONTyped,
    MessageMediaFileParametersForMediaUploadMediaToJSON,
    MessageMediaFileParametersForMediaUploadMediaToJSONTyped,
} from './MessageMediaFileParametersForMediaUploadMedia';

/**
 * Media file to upload.
 * 
 * @export
 * @interface MessageMediaFileParametersForMediaUpload
 */
export interface MessageMediaFileParametersForMediaUpload {
    /**
     * Do not use our encoding
     * @type {boolean}
     * @memberof MessageMediaFileParametersForMediaUpload
     */
    noEncode?: boolean;
    /**
     * 
     * @type {MessageMediaFileParametersForMediaUploadMedia}
     * @memberof MessageMediaFileParametersForMediaUpload
     */
    media?: MessageMediaFileParametersForMediaUploadMedia;
}

/**
 * Check if a given object implements the MessageMediaFileParametersForMediaUpload interface.
 */
export function instanceOfMessageMediaFileParametersForMediaUpload(value: object): value is MessageMediaFileParametersForMediaUpload {
    return true;
}

export function MessageMediaFileParametersForMediaUploadFromJSON(json: any): MessageMediaFileParametersForMediaUpload {
    return MessageMediaFileParametersForMediaUploadFromJSONTyped(json, false);
}

export function MessageMediaFileParametersForMediaUploadFromJSONTyped(json: any, ignoreDiscriminator: boolean): MessageMediaFileParametersForMediaUpload {
    if (json == null) {
        return json;
    }
    return {
        
        'noEncode': json['no_encode'] == null ? undefined : json['no_encode'],
        'media': json['media'] == null ? undefined : MessageMediaFileParametersForMediaUploadMediaFromJSON(json['media']),
    };
}

export function MessageMediaFileParametersForMediaUploadToJSON(json: any): MessageMediaFileParametersForMediaUpload {
    return MessageMediaFileParametersForMediaUploadToJSONTyped(json, false);
}

export function MessageMediaFileParametersForMediaUploadToJSONTyped(value?: MessageMediaFileParametersForMediaUpload | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'no_encode': value['noEncode'],
        'media': MessageMediaFileParametersForMediaUploadMediaToJSON(value['media']),
    };
}

