/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface EventResponse
 */
export interface EventResponse {
    /**
     * Contact ID
     * @type {string}
     * @memberof EventResponse
     */
    participant?: string;
    /**
     * Response
     * @type {string}
     * @memberof EventResponse
     */
    response?: EventResponseResponseEnum;
    /**
     * Response timestamp
     * @type {number}
     * @memberof EventResponse
     */
    timestamp?: number;
}


/**
 * @export
 */
export const EventResponseResponseEnum = {
    Unknown: 'UNKNOWN',
    Going: 'GOING',
    NotGoing: 'NOT_GOING'
} as const;
export type EventResponseResponseEnum = typeof EventResponseResponseEnum[keyof typeof EventResponseResponseEnum];


/**
 * Check if a given object implements the EventResponse interface.
 */
export function instanceOfEventResponse(value: object): value is EventResponse {
    return true;
}

export function EventResponseFromJSON(json: any): EventResponse {
    return EventResponseFromJSONTyped(json, false);
}

export function EventResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): EventResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'participant': json['participant'] == null ? undefined : json['participant'],
        'response': json['response'] == null ? undefined : json['response'],
        'timestamp': json['timestamp'] == null ? undefined : json['timestamp'],
    };
}

export function EventResponseToJSON(json: any): EventResponse {
    return EventResponseToJSONTyped(json, false);
}

export function EventResponseToJSONTyped(value?: EventResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'participant': value['participant'],
        'response': value['response'],
        'timestamp': value['timestamp'],
    };
}

