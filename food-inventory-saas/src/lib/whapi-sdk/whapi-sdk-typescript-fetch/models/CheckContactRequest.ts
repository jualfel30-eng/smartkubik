/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CheckContactRequest
 */
export interface CheckContactRequest {
    /**
     * Blocking determines whether the request should wait for the processing to complete (synchronous) or not (asynchronous).
     * @type {string}
     * @memberof CheckContactRequest
     */
    blocking?: CheckContactRequestBlockingEnum;
    /**
     * Array of contact phone numbers. The numbers can be in any standard telephone number format.
     * @type {Array<string>}
     * @memberof CheckContactRequest
     */
    contacts: Array<string>;
    /**
     * Force check determines whether the request should check the contact even if it is already in the cache.
     * @type {boolean}
     * @memberof CheckContactRequest
     */
    forceCheck?: boolean;
}


/**
 * @export
 */
export const CheckContactRequestBlockingEnum = {
    NoWait: 'no_wait',
    Wait: 'wait'
} as const;
export type CheckContactRequestBlockingEnum = typeof CheckContactRequestBlockingEnum[keyof typeof CheckContactRequestBlockingEnum];


/**
 * Check if a given object implements the CheckContactRequest interface.
 */
export function instanceOfCheckContactRequest(value: object): value is CheckContactRequest {
    if (!('contacts' in value) || value['contacts'] === undefined) return false;
    return true;
}

export function CheckContactRequestFromJSON(json: any): CheckContactRequest {
    return CheckContactRequestFromJSONTyped(json, false);
}

export function CheckContactRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CheckContactRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'blocking': json['blocking'] == null ? undefined : json['blocking'],
        'contacts': json['contacts'],
        'forceCheck': json['force_check'] == null ? undefined : json['force_check'],
    };
}

export function CheckContactRequestToJSON(json: any): CheckContactRequest {
    return CheckContactRequestToJSONTyped(json, false);
}

export function CheckContactRequestToJSONTyped(value?: CheckContactRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'blocking': value['blocking'],
        'contacts': value['contacts'],
        'force_check': value['forceCheck'],
    };
}

