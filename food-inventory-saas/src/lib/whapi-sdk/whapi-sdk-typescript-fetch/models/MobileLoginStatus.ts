/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MobileLoginMethod } from './MobileLoginMethod';
import {
    MobileLoginMethodFromJSON,
    MobileLoginMethodFromJSONTyped,
    MobileLoginMethodToJSON,
    MobileLoginMethodToJSONTyped,
} from './MobileLoginMethod';
import type { MobileLoginStatusPhoneNumber } from './MobileLoginStatusPhoneNumber';
import {
    MobileLoginStatusPhoneNumberFromJSON,
    MobileLoginStatusPhoneNumberFromJSONTyped,
    MobileLoginStatusPhoneNumberToJSON,
    MobileLoginStatusPhoneNumberToJSONTyped,
} from './MobileLoginStatusPhoneNumber';

/**
 * 
 * @export
 * @interface MobileLoginStatus
 */
export interface MobileLoginStatus {
    /**
     * 
     * @type {MobileLoginStatusPhoneNumber}
     * @memberof MobileLoginStatus
     */
    phoneNumber: MobileLoginStatusPhoneNumber;
    /**
     * 
     * @type {MobileLoginMethod}
     * @memberof MobileLoginStatus
     */
    method: MobileLoginMethod;
    /**
     * Captcha code in base64
     * @type {string}
     * @memberof MobileLoginStatus
     */
    captcha?: string;
    /**
     * Login status
     * @type {string}
     * @memberof MobileLoginStatus
     */
    status?: MobileLoginStatusStatusEnum;
    /**
     * Error message
     * @type {string}
     * @memberof MobileLoginStatus
     */
    error?: string;
}


/**
 * @export
 */
export const MobileLoginStatusStatusEnum = {
    WaitingCode: 'waiting_code',
    Error: 'error',
    CaptchaRequired: 'captcha_required',
    Completed: 'completed'
} as const;
export type MobileLoginStatusStatusEnum = typeof MobileLoginStatusStatusEnum[keyof typeof MobileLoginStatusStatusEnum];


/**
 * Check if a given object implements the MobileLoginStatus interface.
 */
export function instanceOfMobileLoginStatus(value: object): value is MobileLoginStatus {
    if (!('phoneNumber' in value) || value['phoneNumber'] === undefined) return false;
    if (!('method' in value) || value['method'] === undefined) return false;
    return true;
}

export function MobileLoginStatusFromJSON(json: any): MobileLoginStatus {
    return MobileLoginStatusFromJSONTyped(json, false);
}

export function MobileLoginStatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): MobileLoginStatus {
    if (json == null) {
        return json;
    }
    return {
        
        'phoneNumber': MobileLoginStatusPhoneNumberFromJSON(json['phone_number']),
        'method': MobileLoginMethodFromJSON(json['method']),
        'captcha': json['captcha'] == null ? undefined : json['captcha'],
        'status': json['status'] == null ? undefined : json['status'],
        'error': json['error'] == null ? undefined : json['error'],
    };
}

export function MobileLoginStatusToJSON(json: any): MobileLoginStatus {
    return MobileLoginStatusToJSONTyped(json, false);
}

export function MobileLoginStatusToJSONTyped(value?: MobileLoginStatus | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'phone_number': MobileLoginStatusPhoneNumberToJSON(value['phoneNumber']),
        'method': MobileLoginMethodToJSON(value['method']),
        'captcha': value['captcha'],
        'status': value['status'],
        'error': value['error'],
    };
}

