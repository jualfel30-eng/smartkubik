/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ActionListSectionsInner } from './ActionListSectionsInner';
import {
    ActionListSectionsInnerFromJSON,
    ActionListSectionsInnerFromJSONTyped,
    ActionListSectionsInnerToJSON,
    ActionListSectionsInnerToJSONTyped,
} from './ActionListSectionsInner';
import type { Button } from './Button';
import {
    ButtonFromJSON,
    ButtonFromJSONTyped,
    ButtonToJSON,
    ButtonToJSONTyped,
} from './Button';

/**
 * 
 * @export
 * @interface MessageContentText
 */
export interface MessageContentText {
    /**
     * Message text
     * @type {string}
     * @memberof MessageContentText
     */
    body: string;
    /**
     * 
     * @type {Array<Button>}
     * @memberof MessageContentText
     */
    buttons?: Array<Button>;
    /**
     * Section of the message
     * @type {Array<ActionListSectionsInner>}
     * @memberof MessageContentText
     */
    sections?: Array<ActionListSectionsInner>;
    /**
     * Button text for list of message
     * @type {string}
     * @memberof MessageContentText
     */
    button?: string;
    /**
     * Is view once
     * @type {boolean}
     * @memberof MessageContentText
     */
    viewOnce?: boolean;
}

/**
 * Check if a given object implements the MessageContentText interface.
 */
export function instanceOfMessageContentText(value: object): value is MessageContentText {
    if (!('body' in value) || value['body'] === undefined) return false;
    return true;
}

export function MessageContentTextFromJSON(json: any): MessageContentText {
    return MessageContentTextFromJSONTyped(json, false);
}

export function MessageContentTextFromJSONTyped(json: any, ignoreDiscriminator: boolean): MessageContentText {
    if (json == null) {
        return json;
    }
    return {
        
        'body': json['body'],
        'buttons': json['buttons'] == null ? undefined : ((json['buttons'] as Array<any>).map(ButtonFromJSON)),
        'sections': json['sections'] == null ? undefined : ((json['sections'] as Array<any>).map(ActionListSectionsInnerFromJSON)),
        'button': json['button'] == null ? undefined : json['button'],
        'viewOnce': json['view_once'] == null ? undefined : json['view_once'],
    };
}

export function MessageContentTextToJSON(json: any): MessageContentText {
    return MessageContentTextToJSONTyped(json, false);
}

export function MessageContentTextToJSONTyped(value?: MessageContentText | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'body': value['body'],
        'buttons': value['buttons'] == null ? undefined : ((value['buttons'] as Array<any>).map(ButtonToJSON)),
        'sections': value['sections'] == null ? undefined : ((value['sections'] as Array<any>).map(ActionListSectionsInnerToJSON)),
        'button': value['button'],
        'view_once': value['viewOnce'],
    };
}

