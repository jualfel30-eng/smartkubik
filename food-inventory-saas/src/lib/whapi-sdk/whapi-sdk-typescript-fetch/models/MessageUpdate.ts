/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Message } from './Message';
import {
    MessageFromJSON,
    MessageFromJSONTyped,
    MessageToJSON,
    MessageToJSONTyped,
} from './Message';

/**
 * 
 * @export
 * @interface MessageUpdate
 */
export interface MessageUpdate {
    /**
     * Message ID
     * @type {string}
     * @memberof MessageUpdate
     */
    id: string;
    /**
     * 
     * @type {Message}
     * @memberof MessageUpdate
     */
    trigger?: Message;
    /**
     * 
     * @type {Message}
     * @memberof MessageUpdate
     */
    beforeUpdate: Message;
    /**
     * 
     * @type {Message}
     * @memberof MessageUpdate
     */
    afterUpdate: Message;
    /**
     * 
     * @type {Array<string>}
     * @memberof MessageUpdate
     */
    changes?: Array<string>;
}

/**
 * Check if a given object implements the MessageUpdate interface.
 */
export function instanceOfMessageUpdate(value: object): value is MessageUpdate {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('beforeUpdate' in value) || value['beforeUpdate'] === undefined) return false;
    if (!('afterUpdate' in value) || value['afterUpdate'] === undefined) return false;
    return true;
}

export function MessageUpdateFromJSON(json: any): MessageUpdate {
    return MessageUpdateFromJSONTyped(json, false);
}

export function MessageUpdateFromJSONTyped(json: any, ignoreDiscriminator: boolean): MessageUpdate {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'trigger': json['trigger'] == null ? undefined : MessageFromJSON(json['trigger']),
        'beforeUpdate': MessageFromJSON(json['before_update']),
        'afterUpdate': MessageFromJSON(json['after_update']),
        'changes': json['changes'] == null ? undefined : json['changes'],
    };
}

export function MessageUpdateToJSON(json: any): MessageUpdate {
    return MessageUpdateToJSONTyped(json, false);
}

export function MessageUpdateToJSONTyped(value?: MessageUpdate | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'trigger': MessageToJSON(value['trigger']),
        'before_update': MessageToJSON(value['beforeUpdate']),
        'after_update': MessageToJSON(value['afterUpdate']),
        'changes': value['changes'],
    };
}

