/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ListReply } from './ListReply';
import {
    ListReplyFromJSON,
    ListReplyFromJSONTyped,
    ListReplyToJSON,
    ListReplyToJSONTyped,
} from './ListReply';
import type { ButtonsReply } from './ButtonsReply';
import {
    ButtonsReplyFromJSON,
    ButtonsReplyFromJSONTyped,
    ButtonsReplyToJSON,
    ButtonsReplyToJSONTyped,
} from './ButtonsReply';

/**
 * 
 * @export
 * @interface MessageContentReply
 */
export interface MessageContentReply {
    /**
     * Type of message content
     * @type {string}
     * @memberof MessageContentReply
     */
    type?: MessageContentReplyTypeEnum;
    /**
     * 
     * @type {ListReply}
     * @memberof MessageContentReply
     */
    listReply?: ListReply;
    /**
     * 
     * @type {ButtonsReply}
     * @memberof MessageContentReply
     */
    buttonsReply?: ButtonsReply;
}


/**
 * @export
 */
export const MessageContentReplyTypeEnum = {
    ListReply: 'list_reply',
    ButtonsReply: 'buttons_reply'
} as const;
export type MessageContentReplyTypeEnum = typeof MessageContentReplyTypeEnum[keyof typeof MessageContentReplyTypeEnum];


/**
 * Check if a given object implements the MessageContentReply interface.
 */
export function instanceOfMessageContentReply(value: object): value is MessageContentReply {
    return true;
}

export function MessageContentReplyFromJSON(json: any): MessageContentReply {
    return MessageContentReplyFromJSONTyped(json, false);
}

export function MessageContentReplyFromJSONTyped(json: any, ignoreDiscriminator: boolean): MessageContentReply {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'] == null ? undefined : json['type'],
        'listReply': json['list_reply'] == null ? undefined : ListReplyFromJSON(json['list_reply']),
        'buttonsReply': json['buttons_reply'] == null ? undefined : ButtonsReplyFromJSON(json['buttons_reply']),
    };
}

export function MessageContentReplyToJSON(json: any): MessageContentReply {
    return MessageContentReplyToJSONTyped(json, false);
}

export function MessageContentReplyToJSONTyped(value?: MessageContentReply | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'list_reply': ListReplyToJSON(value['listReply']),
        'buttons_reply': ButtonsReplyToJSON(value['buttonsReply']),
    };
}

