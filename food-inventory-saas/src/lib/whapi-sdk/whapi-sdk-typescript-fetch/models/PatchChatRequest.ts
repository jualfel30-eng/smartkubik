/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface PatchChatRequest
 */
export interface PatchChatRequest {
    /**
     * Pin or unpin chat
     * @type {boolean}
     * @memberof PatchChatRequest
     */
    pin?: boolean;
    /**
     * Mute chat until. 0 - unmute chat
     * @type {number}
     * @memberof PatchChatRequest
     */
    muteUntil?: number;
    /**
     * Mark as unread/read chat
     * @type {boolean}
     * @memberof PatchChatRequest
     */
    markUnread?: boolean;
    /**
     * Amount of days to store messages, when set to none will store infinitely
     * @type {string}
     * @memberof PatchChatRequest
     */
    ephemeral?: PatchChatRequestEphemeralEnum;
}


/**
 * @export
 */
export const PatchChatRequestEphemeralEnum = {
    None: 'none',
    Day: 'day',
    Week: 'week',
    Quarter: 'quarter'
} as const;
export type PatchChatRequestEphemeralEnum = typeof PatchChatRequestEphemeralEnum[keyof typeof PatchChatRequestEphemeralEnum];


/**
 * Check if a given object implements the PatchChatRequest interface.
 */
export function instanceOfPatchChatRequest(value: object): value is PatchChatRequest {
    return true;
}

export function PatchChatRequestFromJSON(json: any): PatchChatRequest {
    return PatchChatRequestFromJSONTyped(json, false);
}

export function PatchChatRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PatchChatRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'pin': json['pin'] == null ? undefined : json['pin'],
        'muteUntil': json['mute_until'] == null ? undefined : json['mute_until'],
        'markUnread': json['mark_unread'] == null ? undefined : json['mark_unread'],
        'ephemeral': json['ephemeral'] == null ? undefined : json['ephemeral'],
    };
}

export function PatchChatRequestToJSON(json: any): PatchChatRequest {
    return PatchChatRequestToJSONTyped(json, false);
}

export function PatchChatRequestToJSONTyped(value?: PatchChatRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'pin': value['pin'],
        'mute_until': value['muteUntil'],
        'mark_unread': value['markUnread'],
        'ephemeral': value['ephemeral'],
    };
}

