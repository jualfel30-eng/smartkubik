/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SenderText
 */
export interface SenderText {
    /**
     * Use the phone number or [Chat ID](https://support.whapi.cloud/help-desk/faq/chat-id.-what-is-it-and-how-to-get-it) of the contact/group/channel to which you want to send the message. Use [Get groups](https://whapi.readme.io/reference/getgroups) to get the group ID.
     * @type {string}
     * @memberof SenderText
     */
    to: string;
    /**
     * Message ID of the message to be quoted
     * @type {string}
     * @memberof SenderText
     */
    quoted?: string;
    /**
     * Time in seconds for the message to be deleted. The Disappearing messages setting should be enabled in the chat where you are sending this message.
     * @type {number}
     * @memberof SenderText
     */
    ephemeral?: number;
    /**
     * Message ID of the message to be edited
     * @type {string}
     * @memberof SenderText
     */
    edit?: string;
    /**
     * Message text
     * @type {string}
     * @memberof SenderText
     */
    body: string;
    /**
     * The numbers of the mentioned users
     * @type {Array<string>}
     * @memberof SenderText
     */
    mentions?: Array<string>;
    /**
     * Is view once
     * @type {boolean}
     * @memberof SenderText
     */
    viewOnce?: boolean;
    /**
     * Time in seconds to simulate typing
     * @type {number}
     * @memberof SenderText
     */
    typingTime?: number;
    /**
     * Set "true" if necessary to send the link without preview
     * @type {boolean}
     * @memberof SenderText
     */
    noLinkPreview?: boolean;
}

/**
 * Check if a given object implements the SenderText interface.
 */
export function instanceOfSenderText(value: object): value is SenderText {
    if (!('to' in value) || value['to'] === undefined) return false;
    if (!('body' in value) || value['body'] === undefined) return false;
    return true;
}

export function SenderTextFromJSON(json: any): SenderText {
    return SenderTextFromJSONTyped(json, false);
}

export function SenderTextFromJSONTyped(json: any, ignoreDiscriminator: boolean): SenderText {
    if (json == null) {
        return json;
    }
    return {
        
        'to': json['to'],
        'quoted': json['quoted'] == null ? undefined : json['quoted'],
        'ephemeral': json['ephemeral'] == null ? undefined : json['ephemeral'],
        'edit': json['edit'] == null ? undefined : json['edit'],
        'body': json['body'],
        'mentions': json['mentions'] == null ? undefined : json['mentions'],
        'viewOnce': json['view_once'] == null ? undefined : json['view_once'],
        'typingTime': json['typing_time'] == null ? undefined : json['typing_time'],
        'noLinkPreview': json['no_link_preview'] == null ? undefined : json['no_link_preview'],
    };
}

export function SenderTextToJSON(json: any): SenderText {
    return SenderTextToJSONTyped(json, false);
}

export function SenderTextToJSONTyped(value?: SenderText | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'to': value['to'],
        'quoted': value['quoted'],
        'ephemeral': value['ephemeral'],
        'edit': value['edit'],
        'body': value['body'],
        'mentions': value['mentions'],
        'view_once': value['viewOnce'],
        'typing_time': value['typingTime'],
        'no_link_preview': value['noLinkPreview'],
    };
}

