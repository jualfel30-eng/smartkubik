/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MessageContextConversion } from './MessageContextConversion';
import {
    MessageContextConversionFromJSON,
    MessageContextConversionFromJSONTyped,
    MessageContextConversionToJSON,
    MessageContextConversionToJSONTyped,
} from './MessageContextConversion';
import type { MessageContent } from './MessageContent';
import {
    MessageContentFromJSON,
    MessageContentFromJSONTyped,
    MessageContentToJSON,
    MessageContentToJSONTyped,
} from './MessageContent';
import type { MessageContextAD } from './MessageContextAD';
import {
    MessageContextADFromJSON,
    MessageContextADFromJSONTyped,
    MessageContextADToJSON,
    MessageContextADToJSONTyped,
} from './MessageContextAD';
import type { MessageType } from './MessageType';
import {
    MessageTypeFromJSON,
    MessageTypeFromJSONTyped,
    MessageTypeToJSON,
    MessageTypeToJSONTyped,
} from './MessageType';

/**
 * 
 * @export
 * @interface MessageContext
 */
export interface MessageContext {
    /**
     * Is forwarding message
     * @type {boolean}
     * @memberof MessageContext
     */
    forwarded?: boolean;
    /**
     * Count fo forwarding message
     * @type {number}
     * @memberof MessageContext
     */
    forwardingScore?: number;
    /**
     * The numbers of the mentioned users
     * @type {Array<string>}
     * @memberof MessageContext
     */
    mentions?: Array<string>;
    /**
     * 
     * @type {MessageContextAD}
     * @memberof MessageContext
     */
    ad?: MessageContextAD;
    /**
     * 
     * @type {MessageContextConversion}
     * @memberof MessageContext
     */
    conversion?: MessageContextConversion;
    /**
     * ID of quoted message
     * @type {string}
     * @memberof MessageContext
     */
    quotedId?: string;
    /**
     * 
     * @type {MessageType}
     * @memberof MessageContext
     */
    quotedType?: MessageType;
    /**
     * 
     * @type {MessageContent}
     * @memberof MessageContext
     */
    quotedContent?: MessageContent;
    /**
     * Whatsapp ID of quoted message author
     * @type {string}
     * @memberof MessageContext
     */
    quotedAuthor?: string;
    /**
     * Ephemeral message duration
     * @type {number}
     * @memberof MessageContext
     */
    ephemeral?: number;
}



/**
 * Check if a given object implements the MessageContext interface.
 */
export function instanceOfMessageContext(value: object): value is MessageContext {
    return true;
}

export function MessageContextFromJSON(json: any): MessageContext {
    return MessageContextFromJSONTyped(json, false);
}

export function MessageContextFromJSONTyped(json: any, ignoreDiscriminator: boolean): MessageContext {
    if (json == null) {
        return json;
    }
    return {
        
        'forwarded': json['forwarded'] == null ? undefined : json['forwarded'],
        'forwardingScore': json['forwarding_score'] == null ? undefined : json['forwarding_score'],
        'mentions': json['mentions'] == null ? undefined : json['mentions'],
        'ad': json['ad'] == null ? undefined : MessageContextADFromJSON(json['ad']),
        'conversion': json['conversion'] == null ? undefined : MessageContextConversionFromJSON(json['conversion']),
        'quotedId': json['quoted_id'] == null ? undefined : json['quoted_id'],
        'quotedType': json['quoted_type'] == null ? undefined : MessageTypeFromJSON(json['quoted_type']),
        'quotedContent': json['quoted_content'] == null ? undefined : MessageContentFromJSON(json['quoted_content']),
        'quotedAuthor': json['quoted_author'] == null ? undefined : json['quoted_author'],
        'ephemeral': json['ephemeral'] == null ? undefined : json['ephemeral'],
    };
}

export function MessageContextToJSON(json: any): MessageContext {
    return MessageContextToJSONTyped(json, false);
}

export function MessageContextToJSONTyped(value?: MessageContext | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'forwarded': value['forwarded'],
        'forwarding_score': value['forwardingScore'],
        'mentions': value['mentions'],
        'ad': MessageContextADToJSON(value['ad']),
        'conversion': MessageContextConversionToJSON(value['conversion']),
        'quoted_id': value['quotedId'],
        'quoted_type': MessageTypeToJSON(value['quotedType']),
        'quoted_content': MessageContentToJSON(value['quotedContent']),
        'quoted_author': value['quotedAuthor'],
        'ephemeral': value['ephemeral'],
    };
}

