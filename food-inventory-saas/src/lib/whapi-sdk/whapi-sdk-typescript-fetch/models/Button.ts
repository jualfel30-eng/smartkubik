/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Button
 */
export interface Button {
    /**
     * Type of button
     * @type {string}
     * @memberof Button
     */
    type: ButtonTypeEnum;
    /**
     * Button text
     * @type {string}
     * @memberof Button
     */
    title: string;
    /**
     * Button ID
     * @type {string}
     * @memberof Button
     */
    id: string;
    /**
     * Button code for copy type
     * @type {string}
     * @memberof Button
     */
    copyCode?: string;
    /**
     * Button phone number for call type
     * @type {string}
     * @memberof Button
     */
    phoneNumber?: string;
    /**
     * Button url for url type
     * @type {string}
     * @memberof Button
     */
    url?: string;
    /**
     * Button merchant_url for url type
     * @type {string}
     * @memberof Button
     */
    merchantUrl?: string;
}


/**
 * @export
 */
export const ButtonTypeEnum = {
    QuickReply: 'quick_reply',
    Call: 'call',
    Copy: 'copy',
    Url: 'url'
} as const;
export type ButtonTypeEnum = typeof ButtonTypeEnum[keyof typeof ButtonTypeEnum];


/**
 * Check if a given object implements the Button interface.
 */
export function instanceOfButton(value: object): value is Button {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    return true;
}

export function ButtonFromJSON(json: any): Button {
    return ButtonFromJSONTyped(json, false);
}

export function ButtonFromJSONTyped(json: any, ignoreDiscriminator: boolean): Button {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'],
        'title': json['title'],
        'id': json['id'],
        'copyCode': json['copy_code'] == null ? undefined : json['copy_code'],
        'phoneNumber': json['phone_number'] == null ? undefined : json['phone_number'],
        'url': json['url'] == null ? undefined : json['url'],
        'merchantUrl': json['merchant_url'] == null ? undefined : json['merchant_url'],
    };
}

export function ButtonToJSON(json: any): Button {
    return ButtonToJSONTyped(json, false);
}

export function ButtonToJSONTyped(value?: Button | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'title': value['title'],
        'id': value['id'],
        'copy_code': value['copyCode'],
        'phone_number': value['phoneNumber'],
        'url': value['url'],
        'merchant_url': value['merchantUrl'],
    };
}

