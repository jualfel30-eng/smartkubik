/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { GroupIconParametersMedia } from './GroupIconParametersMedia';
import {
    GroupIconParametersMediaFromJSON,
    GroupIconParametersMediaFromJSONTyped,
    GroupIconParametersMediaToJSON,
    GroupIconParametersMediaToJSONTyped,
} from './GroupIconParametersMedia';
import type { Currency } from './Currency';
import {
    CurrencyFromJSON,
    CurrencyFromJSONTyped,
    CurrencyToJSON,
    CurrencyToJSONTyped,
} from './Currency';

/**
 * 
 * @export
 * @interface Product
 */
export interface Product {
    /**
     * Product Retailer ID
     * @type {string}
     * @memberof Product
     */
    productRetailerId?: string;
    /**
     * 
     * @type {Currency}
     * @memberof Product
     */
    currency: Currency;
    /**
     * Product images urls
     * @type {Array<GroupIconParametersMedia>}
     * @memberof Product
     */
    images: Array<GroupIconParametersMedia>;
    /**
     * Product availability
     * @type {string}
     * @memberof Product
     */
    availability: ProductAvailabilityEnum;
    /**
     * Product name
     * @type {string}
     * @memberof Product
     */
    name: string;
    /**
     * Product url
     * @type {string}
     * @memberof Product
     */
    url?: string;
    /**
     * Product description
     * @type {string}
     * @memberof Product
     */
    description: string;
    /**
     * Product price
     * @type {number}
     * @memberof Product
     */
    price: number;
    /**
     * Product is hidden
     * @type {boolean}
     * @memberof Product
     */
    isHidden?: boolean;
    /**
     * Product ID
     * @type {string}
     * @memberof Product
     */
    id: string;
    /**
     * Product review status
     * @type {object}
     * @memberof Product
     */
    review?: object;
}


/**
 * @export
 */
export const ProductAvailabilityEnum = {
    InStock: 'in stock',
    OutOfStock: 'out of stock'
} as const;
export type ProductAvailabilityEnum = typeof ProductAvailabilityEnum[keyof typeof ProductAvailabilityEnum];


/**
 * Check if a given object implements the Product interface.
 */
export function instanceOfProduct(value: object): value is Product {
    if (!('currency' in value) || value['currency'] === undefined) return false;
    if (!('images' in value) || value['images'] === undefined) return false;
    if (!('availability' in value) || value['availability'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('price' in value) || value['price'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    return true;
}

export function ProductFromJSON(json: any): Product {
    return ProductFromJSONTyped(json, false);
}

export function ProductFromJSONTyped(json: any, ignoreDiscriminator: boolean): Product {
    if (json == null) {
        return json;
    }
    return {
        
        'productRetailerId': json['product_retailer_id'] == null ? undefined : json['product_retailer_id'],
        'currency': CurrencyFromJSON(json['currency']),
        'images': ((json['images'] as Array<any>).map(GroupIconParametersMediaFromJSON)),
        'availability': json['availability'],
        'name': json['name'],
        'url': json['url'] == null ? undefined : json['url'],
        'description': json['description'],
        'price': json['price'],
        'isHidden': json['is_hidden'] == null ? undefined : json['is_hidden'],
        'id': json['id'],
        'review': json['review'] == null ? undefined : json['review'],
    };
}

export function ProductToJSON(json: any): Product {
    return ProductToJSONTyped(json, false);
}

export function ProductToJSONTyped(value?: Product | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'product_retailer_id': value['productRetailerId'],
        'currency': CurrencyToJSON(value['currency']),
        'images': ((value['images'] as Array<any>).map(GroupIconParametersMediaToJSON)),
        'availability': value['availability'],
        'name': value['name'],
        'url': value['url'],
        'description': value['description'],
        'price': value['price'],
        'is_hidden': value['isHidden'],
        'id': value['id'],
        'review': value['review'],
    };
}

