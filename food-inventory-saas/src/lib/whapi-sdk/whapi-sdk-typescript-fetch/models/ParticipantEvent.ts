/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ParticipantEvent
 */
export interface ParticipantEvent {
    /**
     * Group ID
     * @type {string}
     * @memberof ParticipantEvent
     */
    groupId: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ParticipantEvent
     */
    participants: Array<string>;
    /**
     * Participant action
     * @type {string}
     * @memberof ParticipantEvent
     */
    action: ParticipantEventActionEnum | null;
}


/**
 * @export
 */
export const ParticipantEventActionEnum = {
    Add: 'add',
    Remove: 'remove',
    Promote: 'promote',
    Demote: 'demote',
    Request: 'request',
    RevokeRequest: 'revoke_request',
    RejectedRequest: 'rejected_request'
} as const;
export type ParticipantEventActionEnum = typeof ParticipantEventActionEnum[keyof typeof ParticipantEventActionEnum];


/**
 * Check if a given object implements the ParticipantEvent interface.
 */
export function instanceOfParticipantEvent(value: object): value is ParticipantEvent {
    if (!('groupId' in value) || value['groupId'] === undefined) return false;
    if (!('participants' in value) || value['participants'] === undefined) return false;
    if (!('action' in value) || value['action'] === undefined) return false;
    return true;
}

export function ParticipantEventFromJSON(json: any): ParticipantEvent {
    return ParticipantEventFromJSONTyped(json, false);
}

export function ParticipantEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): ParticipantEvent {
    if (json == null) {
        return json;
    }
    return {
        
        'groupId': json['group_id'],
        'participants': json['participants'],
        'action': json['action'],
    };
}

export function ParticipantEventToJSON(json: any): ParticipantEvent {
    return ParticipantEventToJSONTyped(json, false);
}

export function ParticipantEventToJSONTyped(value?: ParticipantEvent | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'group_id': value['groupId'],
        'participants': value['participants'],
        'action': value['action'],
    };
}

