/* tslint:disable */
/* eslint-disable */
/**
 * Whapi API
 * Sending and receiving messages using HTTP requests. Fixed price with no hidden fees, without limits and restrictions. You will be able to send and receive text/media/files/locations/goods/orders/polls messages via WhatsApp in private or group chats. Guides and SDK can be found on our website.
 *
 * The version of the OpenAPI document: 1.8.7
 * Contact: care@whapi.cloud
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CallEvent
 */
export interface CallEvent {
    /**
     * The ID of the call.
     * @type {string}
     * @memberof CallEvent
     */
    id?: string;
    /**
     * The ID of the chat that the call is associated with.
     * @type {string}
     * @memberof CallEvent
     */
    chatId?: string;
    /**
     * The status of the call.
     * @type {string}
     * @memberof CallEvent
     */
    status?: CallEventStatusEnum;
    /**
     * The ID of the contact that initiated the call.
     * @type {string}
     * @memberof CallEvent
     */
    from?: string;
    /**
     * The timestamp of the call.
     * @type {number}
     * @memberof CallEvent
     */
    timestamp?: number;
    /**
     * Whether the call is a group call.
     * @type {boolean}
     * @memberof CallEvent
     */
    groupCall?: boolean;
    /**
     * Whether the call is a video call.
     * @type {boolean}
     * @memberof CallEvent
     */
    videoCall?: boolean;
    /**
     * Whether the call is an offline call.
     * @type {boolean}
     * @memberof CallEvent
     */
    offlineCall?: boolean;
    /**
     * The latency of the call in milliseconds.
     * @type {number}
     * @memberof CallEvent
     */
    latency?: number;
}


/**
 * @export
 */
export const CallEventStatusEnum = {
    Initiated: 'initiated',
    Ringing: 'ringing',
    Missed: 'missed',
    Canceled: 'canceled',
    Answered: 'answered'
} as const;
export type CallEventStatusEnum = typeof CallEventStatusEnum[keyof typeof CallEventStatusEnum];


/**
 * Check if a given object implements the CallEvent interface.
 */
export function instanceOfCallEvent(value: object): value is CallEvent {
    return true;
}

export function CallEventFromJSON(json: any): CallEvent {
    return CallEventFromJSONTyped(json, false);
}

export function CallEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): CallEvent {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'chatId': json['chat_id'] == null ? undefined : json['chat_id'],
        'status': json['status'] == null ? undefined : json['status'],
        'from': json['from'] == null ? undefined : json['from'],
        'timestamp': json['timestamp'] == null ? undefined : json['timestamp'],
        'groupCall': json['group_call'] == null ? undefined : json['group_call'],
        'videoCall': json['video_call'] == null ? undefined : json['video_call'],
        'offlineCall': json['offline_call'] == null ? undefined : json['offline_call'],
        'latency': json['latency'] == null ? undefined : json['latency'],
    };
}

export function CallEventToJSON(json: any): CallEvent {
    return CallEventToJSONTyped(json, false);
}

export function CallEventToJSONTyped(value?: CallEvent | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'chat_id': value['chatId'],
        'status': value['status'],
        'from': value['from'],
        'timestamp': value['timestamp'],
        'group_call': value['groupCall'],
        'video_call': value['videoCall'],
        'offline_call': value['offlineCall'],
        'latency': value['latency'],
    };
}

